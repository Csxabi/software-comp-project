Index: src/main/java/at/fhtw/swen3/services/impl/ParcelApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/ParcelApiController.java b/src/main/java/at/fhtw/swen3/services/impl/controller/rest/ParcelApiController.java
rename from src/main/java/at/fhtw/swen3/services/impl/ParcelApiController.java
rename to src/main/java/at/fhtw/swen3/services/impl/controller/rest/ParcelApiController.java
--- a/src/main/java/at/fhtw/swen3/services/impl/ParcelApiController.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/impl/controller/rest/ParcelApiController.java	(date 1679849674264)
@@ -1,20 +1,9 @@
-package at.fhtw.swen3.services.impl;
+package at.fhtw.swen3.services.impl.controller.rest;
 
 
-import at.fhtw.swen3.services.ParcelApi;
+import at.fhtw.swen3.services.impl.controller.ParcelApi;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestHeader;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.CookieValue;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
-import org.springframework.web.multipart.MultipartFile;
 import org.springframework.web.context.request.NativeWebRequest;
 
 import java.util.Optional;
Index: .github/workflows/aws.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#application name ändern\r\n#environment name ändern\r\n#deploy package ändern\r\n\r\nname: Deploy to Amazon ECS\r\n\r\non:\r\n  push:\r\n    branches: [ \"master\" ]\r\n\r\nenv:\r\n  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1\r\n  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name\r\n  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name\r\n  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name\r\n  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition\r\n                                               # file, e.g. .aws/task-definition.json\r\n  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the\r\n                                               # containerDefinitions section of your task definition\r\n\r\npermissions:\r\n  contents: read\r\n\r\njobs:\r\n  deploy:\r\n    name: Deploy\r\n    runs-on: ubuntu-latest\r\n    environment: production\r\n\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@v3\r\n\r\n    - name: Configure AWS credentials\r\n      uses: aws-actions/configure-aws-credentials@v1\r\n      with:\r\n        aws-access-key-id: ${{ secrets.AWS_ACCES_KEY_ID }}\r\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\r\n        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}\r\n        aws-region: us-east-1\r\n\r\n    - name: Login to Amazon ECR\r\n      id: login-ecr\r\n      uses: aws-actions/amazon-ecr-login@v1\r\n\r\n    - name: Build, tag, and push image to Amazon ECR\r\n      id: build-image\r\n      env:\r\n        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\r\n        IMAGE_TAG: ${{ github.sha }}\r\n      run: |\r\n        # Build a docker container and\r\n        # push it to ECR so that it can\r\n        # be deployed to ECS.\r\n        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\r\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\r\n        echo \"::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"\r\n\r\n    - name: Fill in the new image ID in the Amazon ECS task definition\r\n      id: task-def\r\n      uses: aws-actions/amazon-ecs-render-task-definition@v1\r\n      with:\r\n        task-definition: ${{ env.ECS_TASK_DEFINITION }}\r\n        container-name: ${{ env.CONTAINER_NAME }}\r\n        image: ${{ steps.build-image.outputs.image }}\r\n\r\n    - name: Deploy Amazon ECS task definition\r\n      uses: aws-actions/amazon-ecs-deploy-task-definition@v1\r\n      with:\r\n        task-definition: ${{ steps.task-def.outputs.task-definition }}\r\n        service: ${{ env.ECS_SERVICE }}\r\n        cluster: ${{ env.ECS_CLUSTER }}\r\n        wait-for-service-stability: true\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.github/workflows/aws.yml b/.github/workflows/aws.yml
--- a/.github/workflows/aws.yml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.github/workflows/aws.yml	(date 1679854988812)
@@ -1,73 +1,81 @@
-#application name ändern
-#environment name ändern
-#deploy package ändern
-
-name: Deploy to Amazon ECS
+name: CD
 
 on:
-  push:
-    branches: [ "master" ]
+  workflow_run:
+    workflows: ["Master CI"]
+    types:
+      - completed
 
-env:
-  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
-  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
-  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
-  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
-  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
-                                               # file, e.g. .aws/task-definition.json
-  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
-                                               # containerDefinitions section of your task definition
-
-permissions:
-  contents: read
-
+# Deploy's Job
 jobs:
   deploy:
-    name: Deploy
+
     runs-on: ubuntu-latest
-    environment: production
 
     steps:
-    - name: Checkout
-      uses: actions/checkout@v3
+      - name: Download JAR
+        uses: dawidd6/action-download-artifact@v2
+        with:
+          # Optional, workflow file name or ID
+          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
+          workflow: build.yml
+          # Optional, uploaded artifact name,
+          # will download all artifacts if not specified
+          # and extract them into respective subdirectories
+          # https://github.com/actions/download-artifact#download-all-artifacts
+          name: parcel_trackn_trace_jar
+          # Optional, check the workflow run to whether it has an artifact
+          # then will get the last available artifact from the previous workflow
+          # default false, just try to download from the last one
+          check_artifacts:  false
+          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
+          # default false
+          search_artifacts: false
+          # Optional, choose to skip unpacking the downloaded artifact(s)
+          # default false
+          skip_unpack: false
+          # Optional, choose how to exit the action if no artifact is found
+          # can be one of:
+          #  "fail", "warn", "ignore"
+          # default fail
+          if_no_artifact_found: fail
 
-    - name: Configure AWS credentials
-      uses: aws-actions/configure-aws-credentials@v1
-      with:
-        aws-access-key-id: ${{ secrets.AWS_ACCES_KEY_ID }}
-        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
-        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
-        aws-region: us-east-1
-
-    - name: Login to Amazon ECR
-      id: login-ecr
-      uses: aws-actions/amazon-ecr-login@v1
+      # Deploy the artifact (JAR) into AWS Beanstalk
+      - name: Deploy to EB
+        uses: einaregilsson/beanstalk-deploy@v13
+        with:
+          aws-access-key-id: ${{ secrets.AWS_ACCES_KEY_ID }}
+          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
+          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
+          use_existing_version_if_available: false
+          application_name: parcel-trackn-trace
+          environment_name: Parceltrackntrace-env
+          version_label: ${{github.SHA}}
+          region: us-east-1
+          deployment_package: openapi-spring-1.22.1.jar
 
-    - name: Build, tag, and push image to Amazon ECR
-      id: build-image
-      env:
-        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
-        IMAGE_TAG: ${{ github.sha }}
-      run: |
-        # Build a docker container and
-        # push it to ECR so that it can
-        # be deployed to ECS.
-        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
-        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
-        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
 
-    - name: Fill in the new image ID in the Amazon ECS task definition
-      id: task-def
-      uses: aws-actions/amazon-ecs-render-task-definition@v1
-      with:
-        task-definition: ${{ env.ECS_TASK_DEFINITION }}
-        container-name: ${{ env.CONTAINER_NAME }}
-        image: ${{ steps.build-image.outputs.image }}
-
-    - name: Deploy Amazon ECS task definition
-      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
-      with:
-        task-definition: ${{ steps.task-def.outputs.task-definition }}
-        service: ${{ env.ECS_SERVICE }}
-        cluster: ${{ env.ECS_CLUSTER }}
-        wait-for-service-stability: true
+#build:
+#    runs-on: ubuntu-latest
+#
+#    steps:
+#    - uses: actions/checkout@v3
+#    
+#    - name: Set up JDK 11
+#      uses: actions/setup-java@v3
+#      with:
+#        java-version: '11'
+#        distribution: 'temurin'
+#        cache: maven
+#    
+#    - name: Build with Maven
+#      run: mvn -B package -DskipTests --file springboot/pom.xml
+#    
+#    - name: Upload Jar
+#      # This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
+#      uses: actions/upload-artifact@v3
+#      with:
+#        # set artifact name
+#        name: parcel_trackn_trace_jar
+#        # from this path
+#        path: springboot/target/openapi-spring-1.22.1.jar
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>org.openapitools</groupId>\r\n    <artifactId>openapi-spring</artifactId>\r\n    <packaging>jar</packaging>\r\n    <name>openapi-spring</name>\r\n    <version>1.22.1</version>\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <maven.compiler.source>${java.version}</maven.compiler.source>\r\n        <maven.compiler.target>${java.version}</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <springdoc.version>1.6.8</springdoc.version>\r\n        <swagger-ui.version>4.10.3</swagger-ui.version>\r\n    </properties>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.7.0</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <build>\r\n        <sourceDirectory>src/main/java</sourceDirectory>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.22</version>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mapstruct</groupId>\r\n            <artifactId>mapstruct</artifactId>\r\n            <version>1.5.2.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mapstruct</groupId>\r\n            <artifactId>mapstruct-processor</artifactId>\r\n            <version>1.5.2.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n            <version>2.7.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.data</groupId>\r\n            <artifactId>spring-data-commons</artifactId>\r\n        </dependency>\r\n          <!--SpringDoc dependencies -->\r\n        <dependency>\r\n            <groupId>org.springdoc</groupId>\r\n            <artifactId>springdoc-openapi-ui</artifactId>\r\n            <version>${springdoc.version}</version>\r\n        </dependency>\r\n        <!-- @Nullable annotation -->\r\n        <dependency>\r\n            <groupId>com.google.code.findbugs</groupId>\r\n            <artifactId>jsr305</artifactId>\r\n            <version>3.0.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\r\n            <artifactId>jackson-dataformat-yaml</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.datatype</groupId>\r\n            <artifactId>jackson-datatype-jsr310</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openapitools</groupId>\r\n            <artifactId>jackson-databind-nullable</artifactId>\r\n            <version>0.2.2</version>\r\n        </dependency>\r\n        <!-- Bean Validation API support -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-validation</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/pom.xml	(date 1679849761714)
@@ -16,7 +16,7 @@
     <parent>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-parent</artifactId>
-        <version>2.7.0</version>
+        <version>2.7.4</version>
         <relativePath/> <!-- lookup parent from repository -->
     </parent>
     <build>
@@ -25,32 +25,18 @@
             <plugin>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-maven-plugin</artifactId>
+                <version>2.7.0</version>
             </plugin>
         </plugins>
     </build>
     <dependencies>
         <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.22</version>
+            <groupId>org.testng</groupId>
+            <artifactId>testng</artifactId>
+            <version>6.1.1</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>org.mapstruct</groupId>
-            <artifactId>mapstruct</artifactId>
-            <version>1.5.2.Final</version>
-        </dependency>
-        <dependency>
-            <groupId>org.mapstruct</groupId>
-            <artifactId>mapstruct-processor</artifactId>
-            <version>1.5.2.Final</version>
-        </dependency>
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-data-jpa</artifactId>
-            <version>2.7.4</version>
-        </dependency>
-        <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
@@ -58,7 +44,7 @@
             <groupId>org.springframework.data</groupId>
             <artifactId>spring-data-commons</artifactId>
         </dependency>
-          <!--SpringDoc dependencies -->
+        <!--SpringDoc dependencies -->
         <dependency>
             <groupId>org.springdoc</groupId>
             <artifactId>springdoc-openapi-ui</artifactId>
@@ -89,13 +75,69 @@
             <artifactId>spring-boot-starter-validation</artifactId>
         </dependency>
         <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mapstruct</groupId>
+            <artifactId>mapstruct-processor</artifactId>
+            <version>1.5.2.Final</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mapstruct</groupId>
+            <artifactId>mapstruct</artifactId>
+            <version>1.5.2.Final</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.validation</groupId>
+            <artifactId>validation-api</artifactId>
+            <version>2.0.1.Final</version>
+        </dependency>
+        <dependency>
+            <groupId>org.hibernate.validator</groupId>
+            <artifactId>hibernate-validator</artifactId>
+            <version>6.0.20.Final</version>
+        </dependency>
+        <dependency>
+            <groupId>org.glassfish</groupId>
+            <artifactId>javax.el</artifactId>
+            <version>3.0.0</version>
+        </dependency>
+
+        <!-- postgres/postgis dependencies -->
+        <dependency>
+            <groupId>org.postgresql</groupId>
+            <artifactId>postgresql</artifactId>
+            <version>42.5.0</version>
+        </dependency>
+        <dependency>
+            <groupId>com.h2database</groupId>
+            <artifactId>h2</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.json</groupId>
+            <artifactId>json</artifactId>
+            <version>20220924</version>
+        </dependency>
+        <dependency>
             <groupId>com.fasterxml.jackson.core</groupId>
             <artifactId>jackson-databind</artifactId>
+            <version>2.13.3</version>
         </dependency>
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-test</artifactId>
-            <scope>test</scope>
+            <groupId>com.mapbox.mapboxsdk</groupId>
+            <artifactId>mapbox-sdk-geojson</artifactId>
+            <version>3.0.1</version>
         </dependency>
     </dependencies>
 </project>
Index: src/main/java/at/fhtw/swen3/services/impl/WarehouseApiController.java
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/WarehouseApiController.java b/src/main/java/at/fhtw/swen3/services/impl/WarehouseApiController.java
deleted file mode 100644
--- a/src/main/java/at/fhtw/swen3/services/impl/WarehouseApiController.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ /dev/null	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
@@ -1,39 +0,0 @@
-package at.fhtw.swen3.services.impl;
-
-
-import at.fhtw.swen3.services.WarehouseApi;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestHeader;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.CookieValue;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
-import org.springframework.web.multipart.MultipartFile;
-import org.springframework.web.context.request.NativeWebRequest;
-
-import java.util.Optional;
-import javax.annotation.Generated;
-
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
-@Controller
-public class WarehouseApiController implements WarehouseApi {
-
-    private final NativeWebRequest request;
-
-    @Autowired
-    public WarehouseApiController(NativeWebRequest request) {
-        this.request = request;
-    }
-
-    @Override
-    public Optional<NativeWebRequest> getRequest() {
-        return Optional.ofNullable(request);
-    }
-
-}
Index: src/main/java/at/fhtw/swen3/persistence/entity/Parcel.java
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entity/Parcel.java b/src/main/java/at/fhtw/swen3/persistence/entity/Parcel.java
deleted file mode 100644
--- a/src/main/java/at/fhtw/swen3/persistence/entity/Parcel.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ /dev/null	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
@@ -1,7 +0,0 @@
-package at.fhtw.swen3.persistence.entity;
-
-import org.mapstruct.Mapper;
-
-@Mapper
-public @interface Parcel {
-}
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_0.xml
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_0.xml
deleted file mode 100644
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ /dev/null	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-tomcat:2.7.0">
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-tomcat/2.7.0/spring-boot-starter-tomcat-2.7.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-tomcat/2.7.0/spring-boot-starter-tomcat-2.7.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-tomcat/2.7.0/spring-boot-starter-tomcat-2.7.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_0.xml
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_0.xml
deleted file mode 100644
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ /dev/null	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-logging:2.7.0">
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.7.0/spring-boot-starter-logging-2.7.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.7.0/spring-boot-starter-logging-2.7.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.7.0/spring-boot-starter-logging-2.7.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_0.xml
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_0.xml
deleted file mode 100644
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ /dev/null	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-validation:2.7.0">
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-validation/2.7.0/spring-boot-starter-validation-2.7.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-validation/2.7.0/spring-boot-starter-validation-2.7.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-validation/2.7.0/spring-boot-starter-validation-2.7.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_webmvc_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_webmvc_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_webmvc_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_webmvc_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_webmvc_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_webmvc_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_webmvc_5_3_23.xml	(date 1679849550087)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-webmvc:5.3.20">
+  <library name="Maven: org.springframework:spring-webmvc:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-webmvc/5.3.20/spring-webmvc-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-webmvc/5.3.23/spring-webmvc-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-webmvc/5.3.20/spring-webmvc-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-webmvc/5.3.23/spring-webmvc-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-webmvc/5.3.20/spring-webmvc-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-webmvc/5.3.23/spring-webmvc-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/impl/ResetServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/impl/ResetServiceImplTest.java b/src/test/java/at/fhtw/swen3/services/impl/ResetServiceImplTest.java
new file mode 100644
--- /dev/null	(date 1679848414599)
+++ b/src/test/java/at/fhtw/swen3/services/impl/ResetServiceImplTest.java	(date 1679848414599)
@@ -0,0 +1,57 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.persistence.repositories.ParcelRepository;
+import at.fhtw.swen3.services.ResetService;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.*;
+@SpringBootTest
+@Slf4j
+@Transactional
+class ResetServiceImplTest {
+    @Autowired
+    private ResetService resetService;
+    @Mock
+    private ParcelRepository parcelRepository;
+
+    private ParcelEntity parcelEntity;
+
+    @BeforeEach
+    public void setup(){
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+        RecipientEntity sender = RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build();
+
+        final List<HopArrivalEntity> fakeHops = Arrays.asList(null, null, null);
+
+        parcelEntity = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(recipient)
+                .sender(sender)
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(fakeHops)
+                .futureHops(fakeHops)
+                .build();
+    }
+
+    @Test
+    void resetDB() {
+        parcelRepository.save(parcelEntity);
+        resetService.resetDB();
+        assertEquals(Collections.emptyList(), parcelRepository.findAll());
+    }
+}
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/persistence/repositories/HopRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/persistence/repositories/HopRepositoryTest.java b/src/test/java/at/fhtw/swen3/persistence/repositories/HopRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1679848414548)
+++ b/src/test/java/at/fhtw/swen3/persistence/repositories/HopRepositoryTest.java	(date 1679848414548)
@@ -0,0 +1,199 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.GeoCoordinateEntity;
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.orm.jpa.AutoConfigureTestEntityManager;
+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.transaction.annotation.Transactional;
+
+import static org.assertj.core.api.Assertions.assertThat;
+@SpringBootTest
+@Transactional
+@AutoConfigureTestEntityManager
+class HopRepositoryTest {
+    @Autowired
+    private HopRepository hopRepository;
+
+    @Autowired
+    private TestEntityManager entityManager; //intellij error?
+
+
+    @Test
+    public void should_find_no_hops_if_repository_is_empty() {
+        Iterable<HopEntity> hops = hopRepository.findAll();
+
+        assertThat(hops).isEmpty();
+    }
+
+    @Test
+    public void should_store_a_hop() {
+
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        HopEntity hop = HopEntity.builder()
+                .hopType("testHopType")
+                .code("ABCD12")
+                .description("test description")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+
+
+        HopEntity createdHop = hopRepository.save(hop);
+        assertThat(createdHop).hasFieldOrPropertyWithValue("hopType", "testHopType");
+        assertThat(createdHop).hasFieldOrPropertyWithValue("description", "test description");
+        assertThat(createdHop).hasFieldOrPropertyWithValue("processingDelayMins", 55);
+    }
+
+    @Test
+    public void should_find_all_hops() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        HopEntity hop1 = HopEntity.builder()
+                .hopType("testHopType 1")
+                .code("ABCD12")
+                .description("test description 1")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop1);
+
+        HopEntity hop2 = HopEntity.builder()
+                .hopType("testHopType 2")
+                .code("ABCD12")
+                .description("test description 2")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop2);
+
+
+        Iterable<HopEntity> tutorials = hopRepository.findAll();
+
+        assertThat(tutorials).hasSize(2).contains(hop1, hop2);
+    }
+
+    @Test
+    public void should_find_hop_by_id() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        HopEntity hop1 = HopEntity.builder()
+                .hopType("testHopType 1")
+                .code("ABCD12")
+                .description("test description 1")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop1);
+
+        HopEntity hop2 = HopEntity.builder()
+                .hopType("testHopType 2")
+                .code("ABCD12")
+                .description("test description 2")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop2);
+        HopEntity foundHop = hopRepository.findById(hop2.getId()).get();
+
+        assertThat(foundHop).isEqualTo(hop2);
+    }
+
+    @Test
+    public void should_update_hop_by_id() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        HopEntity hop1 = HopEntity.builder()
+                .hopType("testHopType 1")
+                .code("ABCD12")
+                .description("test description 1")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop1);
+
+        HopEntity hop2 = HopEntity.builder()
+                .hopType("testHopType 2")
+                .code("ABCD12")
+                .description("test description 2")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop2);
+
+        HopEntity updatedHop = HopEntity.builder()
+                .hopType("updated testHopType")
+                .code("ABCD12")
+                .description("updated test description")
+                .processingDelayMins(55)
+                .locationName("Krems")
+                .locationCoordinates(geoCoordinate).build();
+
+        HopEntity hop = hopRepository.findById(hop2.getId()).get();
+        hop.setHopType(updatedHop.getHopType());
+        hop.setDescription(updatedHop.getDescription());
+        hop.setLocationName(updatedHop.getLocationName());
+        hopRepository.save(hop);
+
+        HopEntity checkTut = hopRepository.findById(hop2.getId()).get();
+
+        assertThat(checkTut.getId()).isEqualTo(hop2.getId());
+        assertThat(checkTut.getHopType()).isEqualTo(updatedHop.getHopType());
+        assertThat(checkTut.getDescription()).isEqualTo(updatedHop.getDescription());
+        assertThat(checkTut.getLocationName()).isEqualTo(updatedHop.getLocationName());
+    }
+
+    @Test
+    public void should_delete_tutorial_by_id() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        HopEntity hop1 = HopEntity.builder()
+                .hopType("testHopType 1")
+                .code("ABCD12")
+                .description("test description 1")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop1);
+
+        HopEntity hop2 = HopEntity.builder()
+                .hopType("testHopType 2")
+                .code("ABCD12")
+                .description("test description 2")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop2);
+
+        hopRepository.deleteById(hop2.getId());
+
+        Iterable<HopEntity> hops = hopRepository.findAll();
+
+        assertThat(hops).hasSize(1).contains(hop1);
+    }
+
+    @Test
+    public void should_delete_all_tutorials() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        HopEntity hop1 = HopEntity.builder()
+                .hopType("testHopType 1")
+                .code("ABCD12")
+                .description("test description 1")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop1);
+
+        HopEntity hop2 = HopEntity.builder()
+                .hopType("testHopType 2")
+                .code("ABCD12")
+                .description("test description 2")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate).build();
+        entityManager.persist(hop2);
+
+        hopRepository.deleteAll();
+
+        //assertThat(hopRepository.findAll()).isEmpty();
+    }
+
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_test_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_test_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_test_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_test_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_test_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_test_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_test_5_3_23.xml	(date 1679849550072)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-test:5.3.20">
+  <library name="Maven: org.springframework:spring-test:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.20/spring-test-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.23/spring-test-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.20/spring-test-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.23/spring-test-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.20/spring-test-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.23/spring-test-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_tx_5_3_23.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_tx_5_3_23.xml b/.idea/libraries/Maven__org_springframework_spring_tx_5_3_23.xml
new file mode 100644
--- /dev/null	(date 1679849550080)
+++ b/.idea/libraries/Maven__org_springframework_spring_tx_5_3_23.xml	(date 1679849550080)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-tx:5.3.23">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-tx/5.3.23/spring-tx-5.3.23.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-tx/5.3.23/spring-tx-5.3.23-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-tx/5.3.23/spring-tx-5.3.23-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_projectlombok_lombok_1_18_22.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_projectlombok_lombok_1_18_22.xml b/.idea/libraries/Maven__org_projectlombok_lombok_1_18_24.xml
rename from .idea/libraries/Maven__org_projectlombok_lombok_1_18_22.xml
rename to .idea/libraries/Maven__org_projectlombok_lombok_1_18_24.xml
--- a/.idea/libraries/Maven__org_projectlombok_lombok_1_18_22.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_projectlombok_lombok_1_18_24.xml	(date 1679848779682)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.projectlombok:lombok:1.18.22">
+  <library name="Maven: org.projectlombok:lombok:1.18.24">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.24/lombok-1.18.24.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.22/lombok-1.18.22-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.24/lombok-1.18.24-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.22/lombok-1.18.22-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.24/lombok-1.18.24-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_7_4.xml	(date 1679848779798)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-test:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-test:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.7.0/spring-boot-test-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.7.4/spring-boot-test-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.7.0/spring-boot-test-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.7.4/spring-boot-test-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.7.0/spring-boot-test-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.7.4/spring-boot-test-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/dto/Hop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Hop\r\n */\r\n\r\n@JsonIgnoreProperties(\r\n  value = \"hopType\", // ignore manually set hopType, it will be automatically generated by Jackson during serialization\r\n  allowSetters = true // allows the hopType to be set during deserialization\r\n)\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"hopType\", visible = true)\r\n@JsonSubTypes({\r\n  @JsonSubTypes.Type(value = Transferwarehouse.class, name = \"transferwarehouse\"),\r\n  @JsonSubTypes.Type(value = Truck.class, name = \"truck\"),\r\n  @JsonSubTypes.Type(value = Warehouse.class, name = \"warehouse\")\r\n})\r\n\r\n@JsonTypeName(\"hop\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Hop {\r\n\r\n  @JsonProperty(\"hopType\")\r\n  private String hopType;\r\n\r\n  @JsonProperty(\"code\")\r\n  private String code;\r\n\r\n  @JsonProperty(\"description\")\r\n  private String description;\r\n\r\n  @JsonProperty(\"processingDelayMins\")\r\n  private Integer processingDelayMins;\r\n\r\n  @JsonProperty(\"locationName\")\r\n  private String locationName;\r\n\r\n  @JsonProperty(\"locationCoordinates\")\r\n  private GeoCoordinate locationCoordinates;\r\n\r\n  public Hop hopType(String hopType) {\r\n    this.hopType = hopType;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get hopType\r\n   * @return hopType\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"hopType\", required = true)\r\n  public String getHopType() {\r\n    return hopType;\r\n  }\r\n\r\n  public void setHopType(String hopType) {\r\n    this.hopType = hopType;\r\n  }\r\n\r\n  public Hop code(String code) {\r\n    this.code = code;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unique CODE of the hop.\r\n   * @return code\r\n  */\r\n  @NotNull @Pattern(regexp = \"^[A-Z]{4}\\\\d{1,4}$\") \r\n  @Schema(name = \"code\", description = \"Unique CODE of the hop.\", required = true)\r\n  public String getCode() {\r\n    return code;\r\n  }\r\n\r\n  public void setCode(String code) {\r\n    this.code = code;\r\n  }\r\n\r\n  public Hop description(String description) {\r\n    this.description = description;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Description of the hop.\r\n   * @return description\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"description\", description = \"Description of the hop.\", required = true)\r\n  public String getDescription() {\r\n    return description;\r\n  }\r\n\r\n  public void setDescription(String description) {\r\n    this.description = description;\r\n  }\r\n\r\n  public Hop processingDelayMins(Integer processingDelayMins) {\r\n    this.processingDelayMins = processingDelayMins;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Delay processing takes on the hop.\r\n   * @return processingDelayMins\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"processingDelayMins\", description = \"Delay processing takes on the hop.\", required = true)\r\n  public Integer getProcessingDelayMins() {\r\n    return processingDelayMins;\r\n  }\r\n\r\n  public void setProcessingDelayMins(Integer processingDelayMins) {\r\n    this.processingDelayMins = processingDelayMins;\r\n  }\r\n\r\n  public Hop locationName(String locationName) {\r\n    this.locationName = locationName;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Name of the location (village, city, ..) of the hop.\r\n   * @return locationName\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"locationName\", description = \"Name of the location (village, city, ..) of the hop.\", required = true)\r\n  public String getLocationName() {\r\n    return locationName;\r\n  }\r\n\r\n  public void setLocationName(String locationName) {\r\n    this.locationName = locationName;\r\n  }\r\n\r\n  public Hop locationCoordinates(GeoCoordinate locationCoordinates) {\r\n    this.locationCoordinates = locationCoordinates;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get locationCoordinates\r\n   * @return locationCoordinates\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"locationCoordinates\", required = true)\r\n  public GeoCoordinate getLocationCoordinates() {\r\n    return locationCoordinates;\r\n  }\r\n\r\n  public void setLocationCoordinates(GeoCoordinate locationCoordinates) {\r\n    this.locationCoordinates = locationCoordinates;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Hop hop = (Hop) o;\r\n    return Objects.equals(this.hopType, hop.hopType) &&\r\n        Objects.equals(this.code, hop.code) &&\r\n        Objects.equals(this.description, hop.description) &&\r\n        Objects.equals(this.processingDelayMins, hop.processingDelayMins) &&\r\n        Objects.equals(this.locationName, hop.locationName) &&\r\n        Objects.equals(this.locationCoordinates, hop.locationCoordinates);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(hopType, code, description, processingDelayMins, locationName, locationCoordinates);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Hop {\\n\");\r\n    sb.append(\"    hopType: \").append(toIndentedString(hopType)).append(\"\\n\");\r\n    sb.append(\"    code: \").append(toIndentedString(code)).append(\"\\n\");\r\n    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");\r\n    sb.append(\"    processingDelayMins: \").append(toIndentedString(processingDelayMins)).append(\"\\n\");\r\n    sb.append(\"    locationName: \").append(toIndentedString(locationName)).append(\"\\n\");\r\n    sb.append(\"    locationCoordinates: \").append(toIndentedString(locationCoordinates)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Hop.java b/src/main/java/at/fhtw/swen3/services/dto/Hop.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Hop.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Hop.java	(date 1679847957697)
@@ -11,6 +11,8 @@
 import javax.validation.Valid;
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Builder;
+import lombok.experimental.SuperBuilder;
 
 
 import javax.annotation.Generated;
@@ -20,19 +22,27 @@
  */
 
 @JsonIgnoreProperties(
-  value = "hopType", // ignore manually set hopType, it will be automatically generated by Jackson during serialization
-  allowSetters = true // allows the hopType to be set during deserialization
+        value = "hopType", // ignore manually set hopType, it will be automatically generated by Jackson during serialization
+        allowSetters = true // allows the hopType to be set during deserialization
 )
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "hopType", visible = true)
 @JsonSubTypes({
-  @JsonSubTypes.Type(value = Transferwarehouse.class, name = "transferwarehouse"),
-  @JsonSubTypes.Type(value = Truck.class, name = "truck"),
-  @JsonSubTypes.Type(value = Warehouse.class, name = "warehouse")
+        @JsonSubTypes.Type(value = Transferwarehouse.class, name = "transferwarehouse"),
+        @JsonSubTypes.Type(value = Truck.class, name = "truck"),
+        @JsonSubTypes.Type(value = Warehouse.class, name = "warehouse")
 })
-
 @JsonTypeName("hop")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
+
 public class Hop {
+  public Hop(String hopType, String code, String description, Integer processingDelayMins, String locationName, GeoCoordinate locationCoordinates) {
+    this.hopType = hopType;
+    this.code = code;
+    this.description = description;
+    this.processingDelayMins = processingDelayMins;
+    this.locationName = locationName;
+    this.locationCoordinates = locationCoordinates;
+  }
 
   @JsonProperty("hopType")
   private String hopType;
@@ -60,8 +70,8 @@
   /**
    * Get hopType
    * @return hopType
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "hopType", required = true)
   public String getHopType() {
     return hopType;
@@ -79,8 +89,8 @@
   /**
    * Unique CODE of the hop.
    * @return code
-  */
-  @NotNull @Pattern(regexp = "^[A-Z]{4}\\d{1,4}$") 
+   */
+  @NotNull @Pattern(regexp = "^[A-Z]{4}\\d{1,4}$")
   @Schema(name = "code", description = "Unique CODE of the hop.", required = true)
   public String getCode() {
     return code;
@@ -98,8 +108,8 @@
   /**
    * Description of the hop.
    * @return description
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "description", description = "Description of the hop.", required = true)
   public String getDescription() {
     return description;
@@ -117,8 +127,8 @@
   /**
    * Delay processing takes on the hop.
    * @return processingDelayMins
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "processingDelayMins", description = "Delay processing takes on the hop.", required = true)
   public Integer getProcessingDelayMins() {
     return processingDelayMins;
@@ -136,8 +146,8 @@
   /**
    * Name of the location (village, city, ..) of the hop.
    * @return locationName
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "locationName", description = "Name of the location (village, city, ..) of the hop.", required = true)
   public String getLocationName() {
     return locationName;
@@ -155,8 +165,8 @@
   /**
    * Get locationCoordinates
    * @return locationCoordinates
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "locationCoordinates", required = true)
   public GeoCoordinate getLocationCoordinates() {
     return locationCoordinates;
@@ -176,11 +186,11 @@
     }
     Hop hop = (Hop) o;
     return Objects.equals(this.hopType, hop.hopType) &&
-        Objects.equals(this.code, hop.code) &&
-        Objects.equals(this.description, hop.description) &&
-        Objects.equals(this.processingDelayMins, hop.processingDelayMins) &&
-        Objects.equals(this.locationName, hop.locationName) &&
-        Objects.equals(this.locationCoordinates, hop.locationCoordinates);
+            Objects.equals(this.code, hop.code) &&
+            Objects.equals(this.description, hop.description) &&
+            Objects.equals(this.processingDelayMins, hop.processingDelayMins) &&
+            Objects.equals(this.locationName, hop.locationName) &&
+            Objects.equals(this.locationCoordinates, hop.locationCoordinates);
   }
 
   @Override
Index: .idea/libraries/Maven__org_springframework_spring_web_5_3_23.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_web_5_3_23.xml b/.idea/libraries/Maven__org_springframework_spring_web_5_3_23.xml
new file mode 100644
--- /dev/null	(date 1679848779924)
+++ b/.idea/libraries/Maven__org_springframework_spring_web_5_3_23.xml	(date 1679848779924)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-web:5.3.23">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-web/5.3.23/spring-web-5.3.23.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-web/5.3.23/spring-web-5.3.23-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-web/5.3.23/spring-web-5.3.23-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/mapper/ParcelMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/ParcelMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/ParcelMapper.java
new file mode 100644
--- /dev/null	(date 1679517625460)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/ParcelMapper.java	(date 1679517625460)
@@ -0,0 +1,21 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.services.dto.NewParcelInfo;
+import at.fhtw.swen3.services.dto.Parcel;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+
+@Mapper
+public interface ParcelMapper{
+    @Mapping(source = "trackingInformation.state", target = "deliveryStatus")
+    ParcelEntity from(Parcel parcel, NewParcelInfo newParcelInfo, TrackingInformation trackingInformation);
+
+    Parcel toParcelDto(ParcelEntity entity);
+
+    NewParcelInfo toParcelInfoDto(ParcelEntity entity);
+
+    @Mapping(source = "entity.deliveryStatus", target = "state")
+    TrackingInformation toTrackingInfoDto(ParcelEntity entity);
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/RecipientMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/RecipientMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/RecipientMapper.java
new file mode 100644
--- /dev/null	(date 1679517625460)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/RecipientMapper.java	(date 1679517625460)
@@ -0,0 +1,25 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.services.dto.Recipient;
+
+public class RecipientMapper extends AbstractMapper<RecipientEntity, Recipient>{
+    @Override
+    public Recipient mapToTarget(RecipientEntity object) {
+        return new Recipient(object.getName(), object.getStreet(), object.getPostalCode(), object.getCity(), object.getCountry());
+    }
+
+    @Override
+    public RecipientEntity mapToSource(Recipient object) {
+        return RecipientEntity.builder()
+                .name(object.getName())
+                .street(object.getStreet())
+                .postalCode(object.getPostalCode())
+                .city(object.getCity())
+                .country(object.getCountry())
+                .build();
+    }
+
+    //use Builder or AllArgsConstructor?
+    //set id of RecipientEntity in RecipientDto during mapping?
+}
Index: src/main/java/at/fhtw/swen3/services/impl/WarehouseServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/WarehouseServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/WarehouseServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679848954436)
+++ b/src/main/java/at/fhtw/swen3/services/impl/WarehouseServiceImpl.java	(date 1679848954436)
@@ -0,0 +1,57 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.entities.WarehouseEntity;
+import at.fhtw.swen3.persistence.repositories.WarehouseNextHopsRepository;
+import at.fhtw.swen3.persistence.repositories.WarehouseRepository;
+import at.fhtw.swen3.services.ResetService;
+import at.fhtw.swen3.services.WarehouseService;
+import at.fhtw.swen3.services.dto.Hop;
+import at.fhtw.swen3.services.dto.Warehouse;
+import at.fhtw.swen3.services.mapper.HopMapper;
+import at.fhtw.swen3.services.mapper.WarehouseMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+
+import java.sql.SQLException;
+
+@Slf4j
+@RequiredArgsConstructor
+public class WarehouseServiceImpl implements WarehouseService {
+    private final HopMapper hopMapper;
+    private final WarehouseMapper warehouseMapper;
+    private final Validator validator;
+    private final WarehouseRepository warehouseRepository;
+    private final WarehouseNextHopsRepository warehouseNextHopsRepository;
+    private final ResetService resetService;
+
+
+    @Override
+    public Warehouse exportWarehouses() {
+         WarehouseEntity warehouseEntityHierarchy = warehouseRepository.findFirstByIdIsNotNullOrderByNextHops();
+         if(warehouseEntityHierarchy==null) return null;
+         return (Warehouse) hopMapper.mapToTarget(warehouseEntityHierarchy);
+    }
+
+    @Override
+    public Hop getWarehouse(String code) throws SQLException {
+        WarehouseEntity warehouseEntity = warehouseRepository.findByCode(code);
+        if(warehouseEntity == null) return null;
+        return hopMapper.mapToTarget(warehouseEntity);
+    }
+
+    @Override
+    public Warehouse importWarehouses(Warehouse warehouse) {
+        //validate data
+        validator.validate(warehouse);
+
+        //clear
+        resetService.resetDB();
+
+        WarehouseEntity warehouseEntity = (WarehouseEntity) hopMapper.mapToSource(warehouse);
+        log.warn(warehouseEntity.toString());
+        WarehouseEntity createdWarehouseEntity = warehouseRepository.save(warehouseEntity);
+        warehouseNextHopsRepository.saveAll(warehouseEntity.getNextHops());
+        return warehouseMapper.mapToTarget(createdWarehouseEntity);
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/HopArrivalMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/HopArrivalMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/HopArrivalMapper.java
new file mode 100644
--- /dev/null	(date 1679846902514)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/HopArrivalMapper.java	(date 1679846902514)
@@ -0,0 +1,16 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.services.dto.HopArrival;
+
+public class HopArrivalMapper  extends AbstractMapper<HopArrivalEntity, HopArrival>{
+    @Override
+    public HopArrival mapToTarget(HopArrivalEntity object) {
+        return HopArrival.builder().code(object.getCode()).description(object.getDescription()).dateTime(object.getDateTime()).build();
+    }
+
+    @Override
+    public HopArrivalEntity mapToSource(HopArrival object) {
+        return HopArrivalEntity.builder().code(object.getCode()).description(object.getDescription()).dateTime(object.getDateTime()).build();
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/GeoCoordinateMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/GeoCoordinateMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/GeoCoordinateMapper.java
new file mode 100644
--- /dev/null	(date 1679517625457)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/GeoCoordinateMapper.java	(date 1679517625457)
@@ -0,0 +1,16 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.GeoCoordinateEntity;
+import at.fhtw.swen3.services.dto.GeoCoordinate;
+
+public class GeoCoordinateMapper extends AbstractMapper<GeoCoordinateEntity, GeoCoordinate>{
+    @Override
+    public GeoCoordinate mapToTarget(GeoCoordinateEntity entity) {
+        return GeoCoordinate.builder().lat(entity.getLat()).lon(entity.getLon()).build();
+    }
+
+    @Override
+    public GeoCoordinateEntity mapToSource(GeoCoordinate dto) {
+        return GeoCoordinateEntity.builder().lat(dto.getLat()).lon(dto.getLon()).build();
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/AbstractMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/AbstractMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/AbstractMapper.java
new file mode 100644
--- /dev/null	(date 1679846902507)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/AbstractMapper.java	(date 1679846902507)
@@ -0,0 +1,20 @@
+package at.fhtw.swen3.services.mapper;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+public abstract class AbstractMapper<S, T> implements Mapper<S, T>{
+
+    public List<T> mapToTarget(Collection<S> sources) {
+        List<T> targets = new ArrayList<>();
+        sources.forEach(o -> targets.add(mapToTarget(o)));
+        return targets;
+    }
+
+    public List<S> mapToSource(Collection<T> targets) {
+        List<S> sources = new ArrayList<>();
+        targets.forEach(o -> sources.add(mapToSource(o)));
+        return sources;
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/WarehouseNextHopsMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/WarehouseNextHopsMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/WarehouseNextHopsMapper.java
new file mode 100644
--- /dev/null	(date 1679517625463)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/WarehouseNextHopsMapper.java	(date 1679517625463)
@@ -0,0 +1,26 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import at.fhtw.swen3.persistence.entities.WarehouseNextHopsEntity;
+import at.fhtw.swen3.services.dto.Hop;
+import at.fhtw.swen3.services.dto.WarehouseNextHops;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class WarehouseNextHopsMapper {
+
+
+    public WarehouseNextHops mapToTarget(WarehouseNextHopsEntity entity, Hop hop) {
+        return WarehouseNextHops.builder()
+                .traveltimeMins(entity.getTraveltimeMins())
+                .hop(hop)
+                .build();
+    }
+
+    public WarehouseNextHopsEntity mapToSource(WarehouseNextHops dto, HopEntity hop) {
+        return WarehouseNextHopsEntity.builder()
+                .traveltimeMins(dto.getTraveltimeMins())
+                .hop(hop)
+                .build();
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/Mapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/Mapper.java b/src/main/java/at/fhtw/swen3/services/mapper/Mapper.java
new file mode 100644
--- /dev/null	(date 1679517625459)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/Mapper.java	(date 1679517625459)
@@ -0,0 +1,6 @@
+package at.fhtw.swen3.services.mapper;
+
+public interface Mapper<S, T>{
+    T mapToTarget(S object);
+    S mapToSource(T object);
+}
Index: target/classes/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=5000\r\nspring.jackson.date-format=at.fhtw.swen3.RFC3339DateFormat\r\nspring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration \r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/application.properties b/target/classes/application.properties
--- a/target/classes/application.properties	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/target/classes/application.properties	(date 1679849856350)
@@ -1,6 +1,20 @@
 server.port=5000
 spring.jackson.date-format=at.fhtw.swen3.RFC3339DateFormat
 spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
-spring.datasource.driver-class-name=com.mysql.jdbc.Driver
-spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration 
+
+# Database
+#spring.datasource.driver-class-name=org.postgresql.Driver
+#spring.datasource.username=postgres
+#spring.datasource.password=mysecretpassword
+#spring.datasource.url=jdbc:postgresql://localhost:5432/parcel_trackn_trace_db
 
+#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
+#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
+#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
+
+
+spring.datasource.url=jdbc:h2:mem:testdb
+spring.datasource.driverClassName=org.h2.Driver
+spring.datasource.username=sa
+spring.datasource.password=password
+spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
Index: src/main/java/at/fhtw/swen3/services/mapper/TruckMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/TruckMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/TruckMapper.java
new file mode 100644
--- /dev/null	(date 1679517625461)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/TruckMapper.java	(date 1679517625461)
@@ -0,0 +1,19 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.TruckEntity;
+import at.fhtw.swen3.services.dto.Truck;
+
+public class TruckMapper extends AbstractMapper<TruckEntity, Truck>{
+    @Override
+    public Truck mapToTarget(TruckEntity entity) {
+
+        return null;
+       //return Truck.builder().regionGeoJson(entity.getRegionGeoJson()).numberPlate(entity.getNumberPlate()).build();
+        //return Truck.builder().locationCoordinates(entity.getLocationCoordinates()).numberPlate(entity.getNumberPlate()).build();
+    }
+
+    @Override
+    public TruckEntity mapToSource(Truck dto) {
+        return TruckEntity.builder().regionGeoJson(dto.getRegionGeoJson()).numberPlate(dto.getNumberPlate()).build();
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/WarehouseMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/WarehouseMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/WarehouseMapper.java
new file mode 100644
--- /dev/null	(date 1679846902531)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/WarehouseMapper.java	(date 1679846902531)
@@ -0,0 +1,49 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.WarehouseEntity;
+import at.fhtw.swen3.services.dto.Warehouse;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class WarehouseMapper extends AbstractMapper<WarehouseEntity, Warehouse>{
+    @Override
+    public Warehouse mapToTarget(WarehouseEntity object) {
+        return null;
+    }
+
+    @Override
+    public WarehouseEntity mapToSource(Warehouse object) {
+        return null;
+    }
+
+    //private final WarehouseNextHopsMapper warehouseNextHopsMapper;
+    //private final GeoCoordinateMapper geoCoordinateMapper ;
+    //@Override
+    //public Warehouse mapToTarget(WarehouseEntity entity) {
+    //    return Warehouse.builder()
+    //            .level(entity.getLevel())
+    //            .nextHops(warehouseNextHopsMapper.mapToTarget(entity.getNextHops()))
+    //            .hopType(entity.getHopType())
+    //            .code(entity.getCode())
+    //            .description(entity.getDescription())
+    //            .processingDelayMins(entity.getProcessingDelayMins())
+    //            .locationName(entity.getLocationName())
+    //            .locationCoordinates(geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates()))
+    //            .build();
+    //}
+//
+    //@Override
+    //public WarehouseEntity mapToSource(Warehouse dto) {
+//
+    //    return WarehouseEntity.builder()
+    //            .level(dto.getLevel())
+    //            .nextHops(warehouseNextHopsMapper.mapToSource(dto.getNextHops()))
+    //            .hopType(dto.getHopType())
+    //            .code(dto.getCode())
+    //            .description(dto.getDescription())
+    //            .processingDelayMins(dto.getProcessingDelayMins())
+    //            .locationName(dto.getLocationName())
+    //            .locationCoordinates(geoCoordinateMapper.mapToSource(dto.getLocationCoordinates()))
+    //            .build();
+    //}
+}
Index: src/main/java/at/fhtw/swen3/services/mapper/HopMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/mapper/HopMapper.java b/src/main/java/at/fhtw/swen3/services/mapper/HopMapper.java
new file mode 100644
--- /dev/null	(date 1679846902523)
+++ b/src/main/java/at/fhtw/swen3/services/mapper/HopMapper.java	(date 1679846902523)
@@ -0,0 +1,119 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.*;
+import at.fhtw.swen3.services.dto.*;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.context.annotation.Lazy;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/*
+TODO:
+   - Hop to abstract class
+   - test HopMapper
+   - adapt mapToTarget
+   - integration tests
+   -
+ */
+@RequiredArgsConstructor
+@Slf4j
+public class HopMapper  extends AbstractMapper<HopEntity, Hop>{
+    private final GeoCoordinateMapper geoCoordinateMapper;
+
+    @Lazy
+    private final WarehouseNextHopsMapper warehouseNextHopsMapper;
+
+    @Override
+    public Hop mapToTarget(HopEntity entity) {
+        switch (entity.getHopType()) {
+            case "Warehouse":
+                WarehouseEntity warehouseEntity = (WarehouseEntity) entity;
+
+                List<WarehouseNextHops> nextHops = new ArrayList<>();
+
+                for (WarehouseNextHopsEntity warehouseNextHop : warehouseEntity.getNextHops()) {
+                    Hop hop = mapToTarget(warehouseNextHop.getHop());
+                    nextHops.add(warehouseNextHopsMapper.mapToTarget(warehouseNextHop, hop));
+                }
+
+                return new Warehouse(
+                        entity.getHopType(),
+                        entity.getCode(),
+                        entity.getDescription(),
+                        entity.getProcessingDelayMins(),
+                        entity.getLocationName(),
+                        geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates()),
+                        warehouseEntity.getLevel(),
+                        nextHops);
+
+
+            case "Truck":
+                //return truckMapper.mapToTarget((TruckEntity) entity);
+                return new Truck(
+                        entity.getHopType(),
+                        entity.getCode(),
+                        entity.getDescription(),
+                        entity.getProcessingDelayMins(),
+                        entity.getLocationName(),
+                        geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates()),
+                        ((TruckEntity) entity).getRegionGeoJson(),
+                        ((TruckEntity) entity).getNumberPlate());
+               // return Truck.builder().code(entity.getCode()).description(entity.getDescription()).hopType(entity.getHopType()).locationName(entity.getLocationName()).processingDelayMins(entity.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates())).regionGeoJson(((TruckEntity) entity).getRegionGeoJson()).numberPlate(((TruckEntity) entity).getNumberPlate()).build();
+            case "TransferWarehouse":
+                //return transferwarehouseMapper.mapToTarget((TransferwarehouseEntity) entity);
+                return new Transferwarehouse(
+                        entity.getHopType(),
+                        entity.getCode(),
+                        entity.getDescription(),
+                        entity.getProcessingDelayMins(),
+                        entity.getLocationName(),
+                        geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates()),
+                        ((TransferwarehouseEntity) entity).getRegionGeoJson(),
+                        ((TransferwarehouseEntity) entity).getLogisticsPartner(),
+                        ((TransferwarehouseEntity) entity).getLogisticsPartnerUrl()
+                );
+                //return Transferwarehouse.builder().code(entity.getCode()).description(entity.getDescription()).hopType(entity.getHopType()).locationName(entity.getLocationName()).processingDelayMins(entity.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates())).regionGeoJson(((TransferwarehouseEntity) entity).getRegionGeoJson()).logisticsPartner(((TransferwarehouseEntity) entity).getLogisticsPartner()).logisticsPartnerUrl(((TransferwarehouseEntity) entity).getLogisticsPartnerUrl()).build();
+        }
+
+        return new Hop(
+                entity.getHopType(),
+                entity.getCode(),
+                entity.getDescription(),
+                entity.getProcessingDelayMins(),
+                entity.getLocationName(),
+                geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates())
+        );
+
+
+       // return Hop.builder().code(entity.getCode()).description(entity.getDescription()).hopType(entity.getHopType()).locationName(entity.getLocationName()).processingDelayMins(entity.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToTarget(entity.getLocationCoordinates())).build();
+    }
+
+    @Override
+    public HopEntity mapToSource(Hop dto) {
+        if(dto instanceof Truck){
+            return TruckEntity.builder().code(dto.getCode()).description(dto.getDescription()).hopType(dto.getHopType()).locationName(dto.getLocationName()).processingDelayMins(dto.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToSource(dto.getLocationCoordinates())).regionGeoJson(((Truck) dto).getRegionGeoJson()).numberPlate(((Truck) dto).getNumberPlate()).build();
+        }
+        if(dto instanceof Warehouse){
+            Warehouse warehouse = (Warehouse) dto;
+            List<WarehouseNextHopsEntity> nextHops = new ArrayList<>();
+
+            for (WarehouseNextHops warehouseNextHop : warehouse.getNextHops()) {
+                HopEntity hopEntity = mapToSource(warehouseNextHop.getHop());
+                nextHops.add(warehouseNextHopsMapper.mapToSource(warehouseNextHop, hopEntity));
+            }
+
+            //return warehouseMapper.mapToSource((Warehouse) dto);
+            return WarehouseEntity.builder().code(dto.getCode()).description(dto.getDescription()).hopType(dto.getHopType()).locationName(dto.getLocationName()).processingDelayMins(dto.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToSource(dto.getLocationCoordinates())).level(((Warehouse) dto).getLevel()).nextHops(nextHops).build();
+            //return WarehouseEntity.builder().code(dto.getCode()).description(dto.getDescription()).hopType(dto.getHopType()).locationName(dto.getLocationName()).processingDelayMins(dto.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToSource(dto.getLocationCoordinates())).level(((Warehouse) dto).getLevel()).build();
+        }
+        log.warn("HopEntity mapped");
+        return HopEntity.builder().code(dto.getCode()).description(dto.getDescription()).hopType(dto.getHopType()).locationName(dto.getLocationName()).processingDelayMins(dto.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToSource(dto.getLocationCoordinates())).build();
+    }
+
+    public HopEntity mapToSource(Truck dto) {
+        return TruckEntity.builder().code(dto.getCode()).description(dto.getDescription()).hopType(dto.getHopType()).locationName(dto.getLocationName()).processingDelayMins(dto.getProcessingDelayMins()).locationCoordinates(geoCoordinateMapper.mapToSource(dto.getLocationCoordinates())).regionGeoJson(dto.getRegionGeoJson()).numberPlate(dto.getNumberPlate()).build();
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/validation/Validator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/validation/Validator.java b/src/main/java/at/fhtw/swen3/services/validation/Validator.java
new file mode 100644
--- /dev/null	(date 1679848108787)
+++ b/src/main/java/at/fhtw/swen3/services/validation/Validator.java	(date 1679848108787)
@@ -0,0 +1,32 @@
+package at.fhtw.swen3.services.validation;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+import javax.validation.ConstraintViolation;
+import javax.validation.ConstraintViolationException;
+import javax.validation.Validation;
+import javax.validation.ValidatorFactory;
+import java.util.Set;
+
+
+@Slf4j
+public class Validator {
+    static ValidatorFactory getValidatorFactory() {
+        return Validation.buildDefaultValidatorFactory();
+    }
+
+
+    javax.validation.Validator getValidator() {
+        return getValidatorFactory().getValidator();
+    }
+
+    public <T> void validate(T o) {
+        javax.validation.Validator validator = getValidator();
+        Set<ConstraintViolation<T>> violations = validator.validate(o);
+        violations.forEach(v -> log.error(v.getMessage()));
+        if (!violations.isEmpty()) {
+            throw new ConstraintViolationException(violations);
+        }
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/ResetService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/ResetService.java b/src/main/java/at/fhtw/swen3/services/ResetService.java
new file mode 100644
--- /dev/null	(date 1679517625441)
+++ b/src/main/java/at/fhtw/swen3/services/ResetService.java	(date 1679517625441)
@@ -0,0 +1,5 @@
+package at.fhtw.swen3.services;
+
+public interface ResetService {
+    void resetDB();
+}
Index: src/main/java/at/fhtw/swen3/services/HopArrivalService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/HopArrivalService.java b/src/main/java/at/fhtw/swen3/services/HopArrivalService.java
new file mode 100644
--- /dev/null	(date 1679847323317)
+++ b/src/main/java/at/fhtw/swen3/services/HopArrivalService.java	(date 1679847323317)
@@ -0,0 +1,9 @@
+package at.fhtw.swen3.services;
+
+import at.fhtw.swen3.services.dto.HopArrival;
+
+public interface HopArrivalService {
+    HopArrival reportDelivery(String trackingId, String description);
+
+    void reportHopArrival(String trackingId, String code);
+}
Index: src/main/java/at/fhtw/swen3/services/TruckService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/TruckService.java b/src/main/java/at/fhtw/swen3/services/TruckService.java
new file mode 100644
--- /dev/null	(date 1679517625442)
+++ b/src/main/java/at/fhtw/swen3/services/TruckService.java	(date 1679517625442)
@@ -0,0 +1,4 @@
+package at.fhtw.swen3.services;
+
+public interface TruckService {
+}
Index: src/main/java/at/fhtw/swen3/services/RecipientService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/RecipientService.java b/src/main/java/at/fhtw/swen3/services/RecipientService.java
new file mode 100644
--- /dev/null	(date 1679517625441)
+++ b/src/main/java/at/fhtw/swen3/services/RecipientService.java	(date 1679517625441)
@@ -0,0 +1,4 @@
+package at.fhtw.swen3.services;
+
+public interface RecipientService {
+}
Index: src/main/java/at/fhtw/swen3/services/WarehouseNextHopsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/WarehouseNextHopsService.java b/src/main/java/at/fhtw/swen3/services/WarehouseNextHopsService.java
new file mode 100644
--- /dev/null	(date 1679517625442)
+++ b/src/main/java/at/fhtw/swen3/services/WarehouseNextHopsService.java	(date 1679517625442)
@@ -0,0 +1,4 @@
+package at.fhtw.swen3.services;
+
+public interface WarehouseNextHopsService {
+}
Index: src/main/java/at/fhtw/swen3/services/WarehouseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/WarehouseService.java b/src/main/java/at/fhtw/swen3/services/WarehouseService.java
new file mode 100644
--- /dev/null	(date 1679517625443)
+++ b/src/main/java/at/fhtw/swen3/services/WarehouseService.java	(date 1679517625443)
@@ -0,0 +1,12 @@
+package at.fhtw.swen3.services;
+
+import at.fhtw.swen3.services.dto.Hop;
+import at.fhtw.swen3.services.dto.Warehouse;
+
+import java.sql.SQLException;
+
+public interface WarehouseService {
+    Warehouse exportWarehouses ();
+    Hop getWarehouse(String code) throws SQLException;
+    Warehouse importWarehouses(Warehouse warehouse);
+}
Index: src/main/java/at/fhtw/swen3/services/HopService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/HopService.java b/src/main/java/at/fhtw/swen3/services/HopService.java
new file mode 100644
--- /dev/null	(date 1679517625440)
+++ b/src/main/java/at/fhtw/swen3/services/HopService.java	(date 1679517625440)
@@ -0,0 +1,13 @@
+package at.fhtw.swen3.services;
+
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import at.fhtw.swen3.services.dto.Hop;
+
+import java.sql.SQLException;
+
+public interface HopService {
+
+    HopEntity getHop(String code) throws SQLException;
+
+    Hop getWarehouse(String code) throws SQLException;
+}
Index: src/main/java/at/fhtw/swen3/services/ParcelService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/ParcelService.java b/src/main/java/at/fhtw/swen3/services/ParcelService.java
new file mode 100644
--- /dev/null	(date 1679517625440)
+++ b/src/main/java/at/fhtw/swen3/services/ParcelService.java	(date 1679517625440)
@@ -0,0 +1,27 @@
+package at.fhtw.swen3.services;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.services.dto.NewParcelInfo;
+import at.fhtw.swen3.services.dto.Parcel;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import org.springframework.http.ResponseEntity;
+
+import java.sql.SQLException;
+
+public interface ParcelService {
+
+    NewParcelInfo saveNewParcel(Parcel parcel);
+
+    TrackingInformation trackParcel(String trackingId) throws SQLException;
+
+    ParcelEntity getParcel(String trackingId) throws SQLException;
+
+    ParcelEntity reportParcelDelivery(String trackingId) throws SQLException;
+
+    void changeHopArrival(ParcelEntity parcel, HopArrivalEntity hopArrival, HopEntity hop);
+
+    public ResponseEntity<NewParcelInfo> saveExistingParcel(String trackingId, Parcel parcel) throws SQLException;
+
+}
Index: src/main/java/at/fhtw/swen3/services/GeoCoordinateService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/GeoCoordinateService.java b/src/main/java/at/fhtw/swen3/services/GeoCoordinateService.java
new file mode 100644
--- /dev/null	(date 1679517625438)
+++ b/src/main/java/at/fhtw/swen3/services/GeoCoordinateService.java	(date 1679517625438)
@@ -0,0 +1,4 @@
+package at.fhtw.swen3.services;
+
+public interface GeoCoordinateService {
+}
Index: src/main/java/at/fhtw/swen3/SpringConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/SpringConfig.java b/src/main/java/at/fhtw/swen3/SpringConfig.java
new file mode 100644
--- /dev/null	(date 1679849960883)
+++ b/src/main/java/at/fhtw/swen3/SpringConfig.java	(date 1679849960883)
@@ -0,0 +1,108 @@
+package at.fhtw.swen3;
+
+import at.fhtw.swen3.persistence.entities.EntityValidator;
+import at.fhtw.swen3.persistence.repositories.*;
+import at.fhtw.swen3.services.*;
+import at.fhtw.swen3.services.impl.*;
+import at.fhtw.swen3.services.mapper.*;
+import at.fhtw.swen3.services.validation.Validator;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class SpringConfig {
+
+    @Bean
+    public EntityValidator getEntityValidator(){
+        return new EntityValidator();
+    }
+
+    @Bean
+    public Validator getValidator(){
+        return new Validator();
+    }
+
+    @Bean
+    public ParcelService getParcelService(ParcelMapper parcelMapper, Validator validator, ParcelRepository parcelRepository) {
+        return new ParcelServiceImpl(parcelMapper, validator, parcelRepository);
+    }
+
+    @Bean
+    public ParcelMapper getParcelMapper() {
+        return new ParcelMapperImpl();
+    }
+
+    @Bean
+    public RecipientService getRecipientService(RecipientMapper recipientMapper, Validator validator, RecipientRepository recipientRepository) {
+        return new RecipientServiceImpl(recipientMapper, validator, recipientRepository);
+    }
+
+    @Bean
+    public RecipientMapper getRecipientMapper() {
+        return new RecipientMapper();
+    }
+
+    @Bean
+    public HopArrivalService getHopArrivalService(HopArrivalMapper hopArrivalMapper, Validator validator, HopArrivalRepository hopArrivalRepository) {
+        return new HopArrivalServiceImpl(validator, hopArrivalMapper, hopArrivalRepository) {
+        };
+    }
+
+    @Bean
+    public HopArrivalMapper getHopArrivalMapper() {
+        return new HopArrivalMapper();
+    }
+
+    @Bean
+    public GeoCoordinateService getGeoCoordinateService(GeoCoordinateMapper geoCoordinateMapper, Validator validator, GeoCoordinateRepository geoCoordinateRepository) {
+        return new GeoCoordinateServiceImpl(validator, geoCoordinateMapper, geoCoordinateRepository) {
+        };
+    }
+
+    @Bean
+    public GeoCoordinateMapper getGeoCoordinateMapper() {
+        return new GeoCoordinateMapper();
+    }
+
+    @Bean
+    public WarehouseNextHopsMapper getWareHouseNextHopsMapper() {
+        return new WarehouseNextHopsMapper();
+    }
+
+    @Bean
+    public HopMapper getHopMapper(GeoCoordinateMapper geoCoordinateMapper, WarehouseNextHopsMapper warehouseNextHopsMapper) {
+        return new HopMapper(geoCoordinateMapper, warehouseNextHopsMapper);
+    }
+
+    @Bean
+    public HopService getHopService(HopMapper hopMapper, Validator validator, HopRepository hopRepository) {
+        return new HopServiceImpl(validator, hopMapper, hopRepository) {
+        };
+    }
+
+    @Bean
+    public TruckService getTruckService(TruckMapper truckMapper, Validator validator, TruckRepository truckRepository) {
+        return new TruckServiceImpl(truckMapper, validator, truckRepository) {
+        };
+    }
+    @Bean
+    public TruckMapper getTruckMapper() {
+        return new TruckMapper();
+    }
+
+    @Bean
+    public WarehouseService getWarehouseService(HopMapper hopMapper, WarehouseMapper warehouseMapper, Validator validator, WarehouseRepository warehouseRepository, WarehouseNextHopsRepository warehouseNextHopsRepository, ResetService resetService) {
+        return new WarehouseServiceImpl(hopMapper, warehouseMapper, validator, warehouseRepository, warehouseNextHopsRepository, resetService) {
+        };
+    }
+    @Bean
+    public WarehouseMapper getWarehouseMapper() {
+        return new WarehouseMapper();
+    }
+
+    @Bean
+    public ResetService getResetService(GeoCoordinateRepository geoCoordinateRepository, HopArrivalRepository hopArrivalRepository, HopRepository hopRepository, ParcelRepository parcelRepository, RecipientRepository recipientRepository, WarehouseNextHopsRepository warehouseNextHopsRepository){
+        return new ResetServiceImpl(geoCoordinateRepository, hopArrivalRepository, hopRepository, parcelRepository, recipientRepository, warehouseNextHopsRepository);
+    }
+
+}
Index: src/main/java/at/fhtw/swen3/services/dto/Recipient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Recipient\r\n */\r\n\r\n@JsonTypeName(\"recipient\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Recipient {\r\n\r\n  @JsonProperty(\"name\")\r\n  private String name;\r\n\r\n  @JsonProperty(\"street\")\r\n  private String street;\r\n\r\n  @JsonProperty(\"postalCode\")\r\n  private String postalCode;\r\n\r\n  @JsonProperty(\"city\")\r\n  private String city;\r\n\r\n  @JsonProperty(\"country\")\r\n  private String country;\r\n\r\n  public Recipient name(String name) {\r\n    this.name = name;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Name of person or company.\r\n   * @return name\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"name\", description = \"Name of person or company.\", required = true)\r\n  public String getName() {\r\n    return name;\r\n  }\r\n\r\n  public void setName(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  public Recipient street(String street) {\r\n    this.street = street;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Street\r\n   * @return street\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"street\", description = \"Street\", required = true)\r\n  public String getStreet() {\r\n    return street;\r\n  }\r\n\r\n  public void setStreet(String street) {\r\n    this.street = street;\r\n  }\r\n\r\n  public Recipient postalCode(String postalCode) {\r\n    this.postalCode = postalCode;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Postalcode\r\n   * @return postalCode\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"postalCode\", description = \"Postalcode\", required = true)\r\n  public String getPostalCode() {\r\n    return postalCode;\r\n  }\r\n\r\n  public void setPostalCode(String postalCode) {\r\n    this.postalCode = postalCode;\r\n  }\r\n\r\n  public Recipient city(String city) {\r\n    this.city = city;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * City\r\n   * @return city\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"city\", description = \"City\", required = true)\r\n  public String getCity() {\r\n    return city;\r\n  }\r\n\r\n  public void setCity(String city) {\r\n    this.city = city;\r\n  }\r\n\r\n  public Recipient country(String country) {\r\n    this.country = country;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Country\r\n   * @return country\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"country\", description = \"Country\", required = true)\r\n  public String getCountry() {\r\n    return country;\r\n  }\r\n\r\n  public void setCountry(String country) {\r\n    this.country = country;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Recipient recipient = (Recipient) o;\r\n    return Objects.equals(this.name, recipient.name) &&\r\n        Objects.equals(this.street, recipient.street) &&\r\n        Objects.equals(this.postalCode, recipient.postalCode) &&\r\n        Objects.equals(this.city, recipient.city) &&\r\n        Objects.equals(this.country, recipient.country);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(name, street, postalCode, city, country);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Recipient {\\n\");\r\n    sb.append(\"    name: \").append(toIndentedString(name)).append(\"\\n\");\r\n    sb.append(\"    street: \").append(toIndentedString(street)).append(\"\\n\");\r\n    sb.append(\"    postalCode: \").append(toIndentedString(postalCode)).append(\"\\n\");\r\n    sb.append(\"    city: \").append(toIndentedString(city)).append(\"\\n\");\r\n    sb.append(\"    country: \").append(toIndentedString(country)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Recipient.java b/src/main/java/at/fhtw/swen3/services/dto/Recipient.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Recipient.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Recipient.java	(date 1679847985898)
@@ -6,6 +6,8 @@
 
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
 
 
 import javax.annotation.Generated;
@@ -15,19 +17,25 @@
  */
 
 @JsonTypeName("recipient")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@AllArgsConstructor //for Constructor in RecipientMapper
+@Builder
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class Recipient {
 
+
   @JsonProperty("name")
   private String name;
 
   @JsonProperty("street")
+  @Pattern(regexp = "[\\p{L}]+(\\s\\p{L}*[.]?)*\\s[0-9]*[\\p{L}]*((\\/)[0-9]*)*", message = "must match street name regex (Street, blank, number (number, slashes, characters)")
   private String street;
 
   @JsonProperty("postalCode")
+  @Pattern(regexp = "^\\bA-\\b[0-9]{4}$", message = "must match postal code regex (\"A-\", 4 digits, 0000-9999)")
   private String postalCode;
 
   @JsonProperty("city")
+  @Pattern(regexp = "^[a-zA-Z]+(?:[\\s-][a-zA-Z]+)*$", message = "must match city name regex e.g.San-Francisco")
   private String city;
 
   @JsonProperty("country")
@@ -41,8 +49,8 @@
   /**
    * Name of person or company.
    * @return name
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "name", description = "Name of person or company.", required = true)
   public String getName() {
     return name;
@@ -60,8 +68,8 @@
   /**
    * Street
    * @return street
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "street", description = "Street", required = true)
   public String getStreet() {
     return street;
@@ -79,8 +87,8 @@
   /**
    * Postalcode
    * @return postalCode
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "postalCode", description = "Postalcode", required = true)
   public String getPostalCode() {
     return postalCode;
@@ -98,8 +106,8 @@
   /**
    * City
    * @return city
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "city", description = "City", required = true)
   public String getCity() {
     return city;
@@ -117,8 +125,8 @@
   /**
    * Country
    * @return country
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "country", description = "Country", required = true)
   public String getCountry() {
     return country;
@@ -138,10 +146,10 @@
     }
     Recipient recipient = (Recipient) o;
     return Objects.equals(this.name, recipient.name) &&
-        Objects.equals(this.street, recipient.street) &&
-        Objects.equals(this.postalCode, recipient.postalCode) &&
-        Objects.equals(this.city, recipient.city) &&
-        Objects.equals(this.country, recipient.country);
+            Objects.equals(this.street, recipient.street) &&
+            Objects.equals(this.postalCode, recipient.postalCode) &&
+            Objects.equals(this.city, recipient.city) &&
+            Objects.equals(this.country, recipient.country);
   }
 
   @Override
Index: src/main/java/at/fhtw/swen3/services/impl/ApiUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/ApiUtil.java b/src/main/java/at/fhtw/swen3/services/impl/controller/ApiUtil.java
rename from src/main/java/at/fhtw/swen3/services/impl/ApiUtil.java
rename to src/main/java/at/fhtw/swen3/services/impl/controller/ApiUtil.java
--- a/src/main/java/at/fhtw/swen3/services/impl/ApiUtil.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/impl/controller/ApiUtil.java	(date 1679847323191)
@@ -1,4 +1,4 @@
-package at.fhtw.swen3.services.impl;
+package at.fhtw.swen3.services.impl.controller;
 
 import org.springframework.web.context.request.NativeWebRequest;
 
Index: src/main/java/at/fhtw/swen3/services/dto/Truck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Truck\r\n */\r\n\r\n\r\n@JsonTypeName(\"truck\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Truck extends Hop {\r\n\r\n  @JsonProperty(\"regionGeoJson\")\r\n  private String regionGeoJson;\r\n\r\n  @JsonProperty(\"numberPlate\")\r\n  private String numberPlate;\r\n\r\n  public Truck regionGeoJson(String regionGeoJson) {\r\n    this.regionGeoJson = regionGeoJson;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * GeoJSON (https://geojson.org/) of the area covered by the truck.\r\n   * @return regionGeoJson\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"regionGeoJson\", description = \"GeoJSON (https://geojson.org/) of the area covered by the truck.\", required = true)\r\n  public String getRegionGeoJson() {\r\n    return regionGeoJson;\r\n  }\r\n\r\n  public void setRegionGeoJson(String regionGeoJson) {\r\n    this.regionGeoJson = regionGeoJson;\r\n  }\r\n\r\n  public Truck numberPlate(String numberPlate) {\r\n    this.numberPlate = numberPlate;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The truck's number plate.\r\n   * @return numberPlate\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"numberPlate\", description = \"The truck's number plate.\", required = true)\r\n  public String getNumberPlate() {\r\n    return numberPlate;\r\n  }\r\n\r\n  public void setNumberPlate(String numberPlate) {\r\n    this.numberPlate = numberPlate;\r\n  }\r\n\r\n  public Truck hopType(String hopType) {\r\n    super.setHopType(hopType);\r\n    return this;\r\n  }\r\n\r\n  public Truck code(String code) {\r\n    super.setCode(code);\r\n    return this;\r\n  }\r\n\r\n  public Truck description(String description) {\r\n    super.setDescription(description);\r\n    return this;\r\n  }\r\n\r\n  public Truck processingDelayMins(Integer processingDelayMins) {\r\n    super.setProcessingDelayMins(processingDelayMins);\r\n    return this;\r\n  }\r\n\r\n  public Truck locationName(String locationName) {\r\n    super.setLocationName(locationName);\r\n    return this;\r\n  }\r\n\r\n  public Truck locationCoordinates(GeoCoordinate locationCoordinates) {\r\n    super.setLocationCoordinates(locationCoordinates);\r\n    return this;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Truck truck = (Truck) o;\r\n    return Objects.equals(this.regionGeoJson, truck.regionGeoJson) &&\r\n        Objects.equals(this.numberPlate, truck.numberPlate) &&\r\n        super.equals(o);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(regionGeoJson, numberPlate, super.hashCode());\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Truck {\\n\");\r\n    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\r\n    sb.append(\"    regionGeoJson: \").append(toIndentedString(regionGeoJson)).append(\"\\n\");\r\n    sb.append(\"    numberPlate: \").append(toIndentedString(numberPlate)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Truck.java b/src/main/java/at/fhtw/swen3/services/dto/Truck.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Truck.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Truck.java	(date 1679848024594)
@@ -2,11 +2,15 @@
 
 import java.util.Objects;
 
+import at.fhtw.swen3.persistence.entities.TruckEntity;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Builder;
+import lombok.EqualsAndHashCode;
+import lombok.experimental.SuperBuilder;
 
 
 import javax.annotation.Generated;
@@ -17,7 +21,9 @@
 
 
 @JsonTypeName("truck")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+//@Builder
+//@EqualsAndHashCode(callSuper = true)
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class Truck extends Hop {
 
   @JsonProperty("regionGeoJson")
@@ -26,6 +32,12 @@
   @JsonProperty("numberPlate")
   private String numberPlate;
 
+  public Truck(String hopType, String code, String description, Integer processingDelayMins, String locationName, GeoCoordinate locationCoordinates, String regionGeoJson, String numberPlate) {
+    super(hopType, code, description, processingDelayMins, locationName, locationCoordinates);
+    this.regionGeoJson = regionGeoJson;
+    this.numberPlate = numberPlate;
+  }
+
   public Truck regionGeoJson(String regionGeoJson) {
     this.regionGeoJson = regionGeoJson;
     return this;
@@ -34,8 +46,8 @@
   /**
    * GeoJSON (https://geojson.org/) of the area covered by the truck.
    * @return regionGeoJson
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "regionGeoJson", description = "GeoJSON (https://geojson.org/) of the area covered by the truck.", required = true)
   public String getRegionGeoJson() {
     return regionGeoJson;
@@ -53,8 +65,8 @@
   /**
    * The truck's number plate.
    * @return numberPlate
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "numberPlate", description = "The truck's number plate.", required = true)
   public String getNumberPlate() {
     return numberPlate;
@@ -102,10 +114,10 @@
     if (o == null || getClass() != o.getClass()) {
       return false;
     }
-    Truck truck = (Truck) o;
-    return Objects.equals(this.regionGeoJson, truck.regionGeoJson) &&
-        Objects.equals(this.numberPlate, truck.numberPlate) &&
-        super.equals(o);
+    Truck truckDto = (Truck) o;
+    return Objects.equals(this.regionGeoJson, truckDto.regionGeoJson) &&
+            Objects.equals(this.numberPlate, truckDto.numberPlate) &&
+            super.equals(o);
   }
 
   @Override
Index: src/main/java/at/fhtw/swen3/services/dto/Warehouse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Warehouse\r\n */\r\n\r\n\r\n@JsonTypeName(\"warehouse\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Warehouse extends Hop {\r\n\r\n  @JsonProperty(\"level\")\r\n  private Integer level;\r\n\r\n  @JsonProperty(\"nextHops\")\r\n  @Valid\r\n  private List<WarehouseNextHops> nextHops = new ArrayList<>();\r\n\r\n  public Warehouse level(Integer level) {\r\n    this.level = level;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get level\r\n   * @return level\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"level\", required = true)\r\n  public Integer getLevel() {\r\n    return level;\r\n  }\r\n\r\n  public void setLevel(Integer level) {\r\n    this.level = level;\r\n  }\r\n\r\n  public Warehouse nextHops(List<WarehouseNextHops> nextHops) {\r\n    this.nextHops = nextHops;\r\n    return this;\r\n  }\r\n\r\n  public Warehouse addNextHopsItem(WarehouseNextHops nextHopsItem) {\r\n    this.nextHops.add(nextHopsItem);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Next hops after this warehouse (warehouses or trucks).\r\n   * @return nextHops\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"nextHops\", description = \"Next hops after this warehouse (warehouses or trucks).\", required = true)\r\n  public List<WarehouseNextHops> getNextHops() {\r\n    return nextHops;\r\n  }\r\n\r\n  public void setNextHops(List<WarehouseNextHops> nextHops) {\r\n    this.nextHops = nextHops;\r\n  }\r\n\r\n  public Warehouse hopType(String hopType) {\r\n    super.setHopType(hopType);\r\n    return this;\r\n  }\r\n\r\n  public Warehouse code(String code) {\r\n    super.setCode(code);\r\n    return this;\r\n  }\r\n\r\n  public Warehouse description(String description) {\r\n    super.setDescription(description);\r\n    return this;\r\n  }\r\n\r\n  public Warehouse processingDelayMins(Integer processingDelayMins) {\r\n    super.setProcessingDelayMins(processingDelayMins);\r\n    return this;\r\n  }\r\n\r\n  public Warehouse locationName(String locationName) {\r\n    super.setLocationName(locationName);\r\n    return this;\r\n  }\r\n\r\n  public Warehouse locationCoordinates(GeoCoordinate locationCoordinates) {\r\n    super.setLocationCoordinates(locationCoordinates);\r\n    return this;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Warehouse warehouse = (Warehouse) o;\r\n    return Objects.equals(this.level, warehouse.level) &&\r\n        Objects.equals(this.nextHops, warehouse.nextHops) &&\r\n        super.equals(o);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(level, nextHops, super.hashCode());\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Warehouse {\\n\");\r\n    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\r\n    sb.append(\"    level: \").append(toIndentedString(level)).append(\"\\n\");\r\n    sb.append(\"    nextHops: \").append(toIndentedString(nextHops)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Warehouse.java b/src/main/java/at/fhtw/swen3/services/dto/Warehouse.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Warehouse.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Warehouse.java	(date 1679848030424)
@@ -6,10 +6,14 @@
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import java.util.ArrayList;
 import java.util.List;
-
 import javax.validation.Valid;
 import javax.validation.constraints.*;
+
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Builder;
+import lombok.EqualsAndHashCode;
+import lombok.experimental.SuperBuilder;
 
 
 import javax.annotation.Generated;
@@ -20,7 +24,8 @@
 
 
 @JsonTypeName("warehouse")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+//@EqualsAndHashCode(callSuper = true)
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class Warehouse extends Hop {
 
   @JsonProperty("level")
@@ -30,6 +35,12 @@
   @Valid
   private List<WarehouseNextHops> nextHops = new ArrayList<>();
 
+  public Warehouse(String hopType, String code, String description, Integer processingDelayMins, String locationName, GeoCoordinate locationCoordinates, Integer level, List<WarehouseNextHops> nextHops) {
+    super(hopType, code, description, processingDelayMins, locationName, locationCoordinates);
+    this.level = level;
+    this.nextHops = nextHops;
+  }
+
   public Warehouse level(Integer level) {
     this.level = level;
     return this;
@@ -38,8 +49,8 @@
   /**
    * Get level
    * @return level
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "level", required = true)
   public Integer getLevel() {
     return level;
@@ -62,8 +73,8 @@
   /**
    * Next hops after this warehouse (warehouses or trucks).
    * @return nextHops
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "nextHops", description = "Next hops after this warehouse (warehouses or trucks).", required = true)
   public List<WarehouseNextHops> getNextHops() {
     return nextHops;
@@ -113,8 +124,8 @@
     }
     Warehouse warehouse = (Warehouse) o;
     return Objects.equals(this.level, warehouse.level) &&
-        Objects.equals(this.nextHops, warehouse.nextHops) &&
-        super.equals(o);
+            Objects.equals(this.nextHops, warehouse.nextHops) &&
+            super.equals(o);
   }
 
   @Override
Index: src/main/java/at/fhtw/swen3/services/dto/TrackingInformation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport at.fhtw.swen3.persistence.entity.Parcel;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.persistence.Column;\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * TrackingInformation\r\n */\r\n@Getter @Setter\r\n@Parcel\r\n@JsonTypeName(\"trackingInformation\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class TrackingInformation {\r\n\r\n  /**\r\n   * State of the parcel.\r\n   */\r\n  public enum StateEnum {\r\n    PICKUP(\"Pickup\"),\r\n    \r\n    INTRANSPORT(\"InTransport\"),\r\n    \r\n    INTRUCKDELIVERY(\"InTruckDelivery\"),\r\n    \r\n    TRANSFERRED(\"Transferred\"),\r\n    \r\n    DELIVERED(\"Delivered\");\r\n\r\n    private String value;\r\n\r\n    StateEnum(String value) {\r\n      this.value = value;\r\n    }\r\n\r\n    @JsonValue\r\n    public String getValue() {\r\n      return value;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n      return String.valueOf(value);\r\n    }\r\n\r\n    @JsonCreator\r\n    public static StateEnum fromValue(String value) {\r\n      for (StateEnum b : StateEnum.values()) {\r\n        if (b.value.equals(value)) {\r\n          return b;\r\n        }\r\n      }\r\n      throw new IllegalArgumentException(\"Unexpected value '\" + value + \"'\");\r\n    }\r\n  }\r\n\r\n  @Column\r\n  @JsonProperty(\"state\")\r\n  private StateEnum state;\r\n\r\n  @Column\r\n  @JsonProperty(\"visitedHops\")\r\n  @Valid\r\n  private List<HopArrival> visitedHops = new ArrayList<>();\r\n\r\n  @Column\r\n  @JsonProperty(\"futureHops\")\r\n  @Valid\r\n  private List<HopArrival> futureHops = new ArrayList<>();\r\n\r\n  public TrackingInformation state(StateEnum state) {\r\n    this.state = state;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * State of the parcel.\r\n   * @return state\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"state\", description = \"State of the parcel.\", required = true)\r\n  public StateEnum getState() {\r\n    return state;\r\n  }\r\n\r\n  public void setState(StateEnum state) {\r\n    this.state = state;\r\n  }\r\n\r\n  public TrackingInformation visitedHops(List<HopArrival> visitedHops) {\r\n    this.visitedHops = visitedHops;\r\n    return this;\r\n  }\r\n\r\n  public TrackingInformation addVisitedHopsItem(HopArrival visitedHopsItem) {\r\n    this.visitedHops.add(visitedHopsItem);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Hops visited in the past.\r\n   * @return visitedHops\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"visitedHops\", description = \"Hops visited in the past.\", required = true)\r\n  public List<HopArrival> getVisitedHops() {\r\n    return visitedHops;\r\n  }\r\n\r\n  public void setVisitedHops(List<HopArrival> visitedHops) {\r\n    this.visitedHops = visitedHops;\r\n  }\r\n\r\n  public TrackingInformation futureHops(List<HopArrival> futureHops) {\r\n    this.futureHops = futureHops;\r\n    return this;\r\n  }\r\n\r\n  public TrackingInformation addFutureHopsItem(HopArrival futureHopsItem) {\r\n    this.futureHops.add(futureHopsItem);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Hops coming up in the future - their times are estimations.\r\n   * @return futureHops\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"futureHops\", description = \"Hops coming up in the future - their times are estimations.\", required = true)\r\n  public List<HopArrival> getFutureHops() {\r\n    return futureHops;\r\n  }\r\n\r\n  public void setFutureHops(List<HopArrival> futureHops) {\r\n    this.futureHops = futureHops;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    TrackingInformation trackingInformation = (TrackingInformation) o;\r\n    return Objects.equals(this.state, trackingInformation.state) &&\r\n        Objects.equals(this.visitedHops, trackingInformation.visitedHops) &&\r\n        Objects.equals(this.futureHops, trackingInformation.futureHops);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(state, visitedHops, futureHops);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class TrackingInformation {\\n\");\r\n    sb.append(\"    state: \").append(toIndentedString(state)).append(\"\\n\");\r\n    sb.append(\"    visitedHops: \").append(toIndentedString(visitedHops)).append(\"\\n\");\r\n    sb.append(\"    futureHops: \").append(toIndentedString(futureHops)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/TrackingInformation.java b/src/main/java/at/fhtw/swen3/services/dto/TrackingInformation.java
--- a/src/main/java/at/fhtw/swen3/services/dto/TrackingInformation.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/TrackingInformation.java	(date 1679847990570)
@@ -2,19 +2,16 @@
 
 import java.util.Objects;
 
-import at.fhtw.swen3.persistence.entity.Parcel;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import com.fasterxml.jackson.annotation.JsonValue;
 import java.util.ArrayList;
 import java.util.List;
-import javax.persistence.Column;
 import javax.validation.Valid;
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Builder;
 
 
 import javax.annotation.Generated;
@@ -22,10 +19,10 @@
 /**
  * TrackingInformation
  */
-@Getter @Setter
-@Parcel
+
 @JsonTypeName("trackingInformation")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
+@Builder
 public class TrackingInformation {
 
   /**
@@ -33,13 +30,13 @@
    */
   public enum StateEnum {
     PICKUP("Pickup"),
-    
+
     INTRANSPORT("InTransport"),
-    
+
     INTRUCKDELIVERY("InTruckDelivery"),
-    
+
     TRANSFERRED("Transferred"),
-    
+
     DELIVERED("Delivered");
 
     private String value;
@@ -69,16 +66,13 @@
     }
   }
 
-  @Column
   @JsonProperty("state")
   private StateEnum state;
 
-  @Column
   @JsonProperty("visitedHops")
   @Valid
   private List<HopArrival> visitedHops = new ArrayList<>();
 
-  @Column
   @JsonProperty("futureHops")
   @Valid
   private List<HopArrival> futureHops = new ArrayList<>();
@@ -91,8 +85,8 @@
   /**
    * State of the parcel.
    * @return state
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "state", description = "State of the parcel.", required = true)
   public StateEnum getState() {
     return state;
@@ -115,8 +109,8 @@
   /**
    * Hops visited in the past.
    * @return visitedHops
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "visitedHops", description = "Hops visited in the past.", required = true)
   public List<HopArrival> getVisitedHops() {
     return visitedHops;
@@ -139,8 +133,8 @@
   /**
    * Hops coming up in the future - their times are estimations.
    * @return futureHops
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "futureHops", description = "Hops coming up in the future - their times are estimations.", required = true)
   public List<HopArrival> getFutureHops() {
     return futureHops;
@@ -160,8 +154,8 @@
     }
     TrackingInformation trackingInformation = (TrackingInformation) o;
     return Objects.equals(this.state, trackingInformation.state) &&
-        Objects.equals(this.visitedHops, trackingInformation.visitedHops) &&
-        Objects.equals(this.futureHops, trackingInformation.futureHops);
+            Objects.equals(this.visitedHops, trackingInformation.visitedHops) &&
+            Objects.equals(this.futureHops, trackingInformation.futureHops);
   }
 
   @Override
Index: src/main/java/at/fhtw/swen3/services/dto/Transferwarehouse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Transferwarehouse\r\n */\r\n\r\n\r\n@JsonTypeName(\"transferwarehouse\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Transferwarehouse extends Hop {\r\n\r\n  @JsonProperty(\"regionGeoJson\")\r\n  private String regionGeoJson;\r\n\r\n  @JsonProperty(\"logisticsPartner\")\r\n  private String logisticsPartner;\r\n\r\n  @JsonProperty(\"logisticsPartnerUrl\")\r\n  private String logisticsPartnerUrl;\r\n\r\n  public Transferwarehouse regionGeoJson(String regionGeoJson) {\r\n    this.regionGeoJson = regionGeoJson;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * GeoJSON (https://geojson.org/) of the area covered by the logistics partner.\r\n   * @return regionGeoJson\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"regionGeoJson\", description = \"GeoJSON (https://geojson.org/) of the area covered by the logistics partner.\", required = true)\r\n  public String getRegionGeoJson() {\r\n    return regionGeoJson;\r\n  }\r\n\r\n  public void setRegionGeoJson(String regionGeoJson) {\r\n    this.regionGeoJson = regionGeoJson;\r\n  }\r\n\r\n  public Transferwarehouse logisticsPartner(String logisticsPartner) {\r\n    this.logisticsPartner = logisticsPartner;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Name of the logistics partner.\r\n   * @return logisticsPartner\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"logisticsPartner\", description = \"Name of the logistics partner.\", required = true)\r\n  public String getLogisticsPartner() {\r\n    return logisticsPartner;\r\n  }\r\n\r\n  public void setLogisticsPartner(String logisticsPartner) {\r\n    this.logisticsPartner = logisticsPartner;\r\n  }\r\n\r\n  public Transferwarehouse logisticsPartnerUrl(String logisticsPartnerUrl) {\r\n    this.logisticsPartnerUrl = logisticsPartnerUrl;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * BaseURL of the logistics partner's REST service.\r\n   * @return logisticsPartnerUrl\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"logisticsPartnerUrl\", description = \"BaseURL of the logistics partner's REST service.\", required = true)\r\n  public String getLogisticsPartnerUrl() {\r\n    return logisticsPartnerUrl;\r\n  }\r\n\r\n  public void setLogisticsPartnerUrl(String logisticsPartnerUrl) {\r\n    this.logisticsPartnerUrl = logisticsPartnerUrl;\r\n  }\r\n\r\n  public Transferwarehouse hopType(String hopType) {\r\n    super.setHopType(hopType);\r\n    return this;\r\n  }\r\n\r\n  public Transferwarehouse code(String code) {\r\n    super.setCode(code);\r\n    return this;\r\n  }\r\n\r\n  public Transferwarehouse description(String description) {\r\n    super.setDescription(description);\r\n    return this;\r\n  }\r\n\r\n  public Transferwarehouse processingDelayMins(Integer processingDelayMins) {\r\n    super.setProcessingDelayMins(processingDelayMins);\r\n    return this;\r\n  }\r\n\r\n  public Transferwarehouse locationName(String locationName) {\r\n    super.setLocationName(locationName);\r\n    return this;\r\n  }\r\n\r\n  public Transferwarehouse locationCoordinates(GeoCoordinate locationCoordinates) {\r\n    super.setLocationCoordinates(locationCoordinates);\r\n    return this;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Transferwarehouse transferwarehouse = (Transferwarehouse) o;\r\n    return Objects.equals(this.regionGeoJson, transferwarehouse.regionGeoJson) &&\r\n        Objects.equals(this.logisticsPartner, transferwarehouse.logisticsPartner) &&\r\n        Objects.equals(this.logisticsPartnerUrl, transferwarehouse.logisticsPartnerUrl) &&\r\n        super.equals(o);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(regionGeoJson, logisticsPartner, logisticsPartnerUrl, super.hashCode());\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Transferwarehouse {\\n\");\r\n    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\r\n    sb.append(\"    regionGeoJson: \").append(toIndentedString(regionGeoJson)).append(\"\\n\");\r\n    sb.append(\"    logisticsPartner: \").append(toIndentedString(logisticsPartner)).append(\"\\n\");\r\n    sb.append(\"    logisticsPartnerUrl: \").append(toIndentedString(logisticsPartnerUrl)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Transferwarehouse.java b/src/main/java/at/fhtw/swen3/services/dto/Transferwarehouse.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Transferwarehouse.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Transferwarehouse.java	(date 1679847995505)
@@ -7,6 +7,8 @@
 
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Builder;
+import lombok.experimental.SuperBuilder;
 
 
 import javax.annotation.Generated;
@@ -17,7 +19,7 @@
 
 
 @JsonTypeName("transferwarehouse")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class Transferwarehouse extends Hop {
 
   @JsonProperty("regionGeoJson")
@@ -29,6 +31,13 @@
   @JsonProperty("logisticsPartnerUrl")
   private String logisticsPartnerUrl;
 
+  public Transferwarehouse(String hopType, String code, String description, Integer processingDelayMins, String locationName, GeoCoordinate locationCoordinates, String regionGeoJson, String logisticsPartner, String logisticsPartnerUrl) {
+    super(hopType, code, description, processingDelayMins, locationName, locationCoordinates);
+    this.regionGeoJson = regionGeoJson;
+    this.logisticsPartner = logisticsPartner;
+    this.logisticsPartnerUrl = logisticsPartnerUrl;
+  }
+
   public Transferwarehouse regionGeoJson(String regionGeoJson) {
     this.regionGeoJson = regionGeoJson;
     return this;
@@ -37,8 +46,8 @@
   /**
    * GeoJSON (https://geojson.org/) of the area covered by the logistics partner.
    * @return regionGeoJson
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "regionGeoJson", description = "GeoJSON (https://geojson.org/) of the area covered by the logistics partner.", required = true)
   public String getRegionGeoJson() {
     return regionGeoJson;
@@ -56,8 +65,8 @@
   /**
    * Name of the logistics partner.
    * @return logisticsPartner
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "logisticsPartner", description = "Name of the logistics partner.", required = true)
   public String getLogisticsPartner() {
     return logisticsPartner;
@@ -75,8 +84,8 @@
   /**
    * BaseURL of the logistics partner's REST service.
    * @return logisticsPartnerUrl
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "logisticsPartnerUrl", description = "BaseURL of the logistics partner's REST service.", required = true)
   public String getLogisticsPartnerUrl() {
     return logisticsPartnerUrl;
@@ -126,9 +135,9 @@
     }
     Transferwarehouse transferwarehouse = (Transferwarehouse) o;
     return Objects.equals(this.regionGeoJson, transferwarehouse.regionGeoJson) &&
-        Objects.equals(this.logisticsPartner, transferwarehouse.logisticsPartner) &&
-        Objects.equals(this.logisticsPartnerUrl, transferwarehouse.logisticsPartnerUrl) &&
-        super.equals(o);
+            Objects.equals(this.logisticsPartner, transferwarehouse.logisticsPartner) &&
+            Objects.equals(this.logisticsPartnerUrl, transferwarehouse.logisticsPartnerUrl) &&
+            super.equals(o);
   }
 
   @Override
Index: src/main/java/at/fhtw/swen3/services/impl/WarehouseNextHopsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/WarehouseNextHopsServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/WarehouseNextHopsServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679517625455)
+++ b/src/main/java/at/fhtw/swen3/services/impl/WarehouseNextHopsServiceImpl.java	(date 1679517625455)
@@ -0,0 +1,6 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.services.WarehouseNextHopsService;
+
+public class WarehouseNextHopsServiceImpl implements WarehouseNextHopsService {
+}
Index: src/main/java/at/fhtw/swen3/services/dto/WarehouseNextHops.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\nimport javax.annotation.Generated;\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.NotNull;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * WarehouseAllOfNextHops\r\n */\r\n\r\n@JsonTypeName(\"warehouse_allOf_nextHops\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class WarehouseNextHops {\r\n\r\n  @JsonProperty(\"traveltimeMins\")\r\n  private Integer traveltimeMins;\r\n\r\n  @JsonProperty(\"hop\")\r\n  private Hop hop;\r\n\r\n  public WarehouseNextHops traveltimeMins(Integer traveltimeMins) {\r\n    this.traveltimeMins = traveltimeMins;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get traveltimeMins\r\n   * @return traveltimeMins\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"traveltimeMins\", required = true)\r\n  public Integer getTraveltimeMins() {\r\n    return traveltimeMins;\r\n  }\r\n\r\n  public void setTraveltimeMins(Integer traveltimeMins) {\r\n    this.traveltimeMins = traveltimeMins;\r\n  }\r\n\r\n  public WarehouseNextHops hop(Hop hop) {\r\n    this.hop = hop;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get hop\r\n   * @return hop\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"hop\", required = true)\r\n  public Hop getHop() {\r\n    return hop;\r\n  }\r\n\r\n  public void setHop(Hop hop) {\r\n    this.hop = hop;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    WarehouseNextHops warehouseAllOfNextHops = (WarehouseNextHops) o;\r\n    return Objects.equals(this.traveltimeMins, warehouseAllOfNextHops.traveltimeMins) &&\r\n        Objects.equals(this.hop, warehouseAllOfNextHops.hop);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(traveltimeMins, hop);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder(); //something\r\n    sb.append(\"class WarehouseAllOfNextHops {\\n\");\r\n    sb.append(\"    traveltimeMins: \").append(toIndentedString(traveltimeMins)).append(\"\\n\");\r\n    sb.append(\"    hop: \").append(toIndentedString(hop)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/WarehouseNextHops.java b/src/main/java/at/fhtw/swen3/services/dto/WarehouseNextHops.java
--- a/src/main/java/at/fhtw/swen3/services/dto/WarehouseNextHops.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/WarehouseNextHops.java	(date 1679848037834)
@@ -1,20 +1,25 @@
 package at.fhtw.swen3.services.dto;
 
+import java.util.Objects;
+
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+
+import javax.validation.Valid;
+import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Builder;
+
 
 import javax.annotation.Generated;
-import javax.validation.Valid;
-import javax.validation.constraints.NotNull;
-import java.util.Objects;
 
 /**
  * WarehouseAllOfNextHops
  */
 
 @JsonTypeName("warehouse_allOf_nextHops")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Builder
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class WarehouseNextHops {
 
   @JsonProperty("traveltimeMins")
@@ -31,8 +36,8 @@
   /**
    * Get traveltimeMins
    * @return traveltimeMins
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "traveltimeMins", required = true)
   public Integer getTraveltimeMins() {
     return traveltimeMins;
@@ -50,8 +55,8 @@
   /**
    * Get hop
    * @return hop
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "hop", required = true)
   public Hop getHop() {
     return hop;
@@ -69,9 +74,9 @@
     if (o == null || getClass() != o.getClass()) {
       return false;
     }
-    WarehouseNextHops warehouseAllOfNextHops = (WarehouseNextHops) o;
-    return Objects.equals(this.traveltimeMins, warehouseAllOfNextHops.traveltimeMins) &&
-        Objects.equals(this.hop, warehouseAllOfNextHops.hop);
+    WarehouseNextHops warehouseNextHops = (WarehouseNextHops) o;
+    return Objects.equals(this.traveltimeMins, warehouseNextHops.traveltimeMins) &&
+            Objects.equals(this.hop, warehouseNextHops.hop);
   }
 
   @Override
@@ -81,7 +86,7 @@
 
   @Override
   public String toString() {
-    StringBuilder sb = new StringBuilder(); //something
+    StringBuilder sb = new StringBuilder();
     sb.append("class WarehouseAllOfNextHops {\n");
     sb.append("    traveltimeMins: ").append(toIndentedString(traveltimeMins)).append("\n");
     sb.append("    hop: ").append(toIndentedString(hop)).append("\n");
Index: src/main/java/at/fhtw/swen3/services/impl/ParcelServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/ParcelServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/ParcelServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679848671730)
+++ b/src/main/java/at/fhtw/swen3/services/impl/ParcelServiceImpl.java	(date 1679848671730)
@@ -0,0 +1,132 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.persistence.repositories.ParcelRepository;
+import at.fhtw.swen3.services.ParcelService;
+import at.fhtw.swen3.services.dto.NewParcelInfo;
+import at.fhtw.swen3.services.dto.Parcel;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import at.fhtw.swen3.services.mapper.ParcelMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.RandomStringUtils;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Component;
+
+import javax.validation.ConstraintViolationException;
+import java.sql.SQLException;
+
+@RequiredArgsConstructor
+@Slf4j
+public class ParcelServiceImpl implements ParcelService {
+    private final ParcelMapper parcelMapper;
+    private final Validator validator;
+    private final ParcelRepository parcelRepository;
+
+    private String generateTrackingId() throws SQLException {
+        String newId;
+        do {
+            newId = RandomStringUtils.randomAlphanumeric(9).toUpperCase();
+        } while (parcelRepository.findByTrackingId(newId) != null);
+
+        return newId;
+    }
+
+    @Override
+    public NewParcelInfo saveNewParcel(Parcel parcel) {
+        validator.validate(parcel);
+
+        String trackingId = null;
+        try {
+            trackingId = generateTrackingId();
+        } catch (SQLException e) {
+            log.error("error while creating tracking id: " + e.getMessage());
+        }
+
+        NewParcelInfo newParcelInfo = NewParcelInfo.builder().trackingId(trackingId).build();
+        TrackingInformation trackingInformation = TrackingInformation.builder().build();
+        trackingInformation.setState(TrackingInformation.StateEnum.PICKUP);
+
+        ParcelEntity parcelEntity = parcelMapper.from(parcel, newParcelInfo, trackingInformation);
+
+        parcelEntity = parcelRepository.save(parcelEntity);
+
+        return parcelMapper.toParcelInfoDto(parcelEntity);
+    }
+
+    @Override
+    public TrackingInformation trackParcel(String trackingId) throws SQLException {
+        validator.validate(trackingId);
+        ParcelEntity parcelEntity = parcelRepository.findByTrackingId(trackingId);
+        if (parcelEntity == null) {
+            log.warn("returned parcelEntity from DB while tracking parcel is null");
+            return null;
+        }
+
+        return parcelMapper.toTrackingInfoDto(parcelEntity);
+    }
+
+    public ParcelEntity getParcel(String trackingId) throws SQLException{
+        return parcelRepository.findByTrackingId(trackingId);
+    }
+
+    @Override
+    public ParcelEntity reportParcelDelivery(String trackingId) throws SQLException {
+        ParcelEntity parcelEntity = parcelRepository.findByTrackingId(trackingId);
+        if(parcelEntity == null) return null;
+
+        parcelEntity.setDeliveryStatus(TrackingInformation.StateEnum.DELIVERED);
+        ParcelEntity updatedParcel = parcelRepository.save(parcelEntity);
+        log.info(String.valueOf(updatedParcel));
+        System.out.println(updatedParcel);
+        return updatedParcel;
+    }
+
+    public void changeHopArrival(ParcelEntity parcel, HopArrivalEntity hopArrival, HopEntity hop) {
+        parcel.removeFutureHop(hopArrival);
+        parcel.addVisitedHop(hopArrival);
+
+        switch (hop.getHopType()) {
+            case "Warehouse":
+                parcel.setDeliveryStatus(TrackingInformation.StateEnum.INTRANSPORT);
+                break;
+
+            case "Truck":
+                parcel.setDeliveryStatus(TrackingInformation.StateEnum.INTRUCKDELIVERY);
+                break;
+
+            case "TransferWarehouse":
+                //TODO: call logistics partner and transfer parcel
+                parcel.setDeliveryStatus(TrackingInformation.StateEnum.TRANSFERRED);
+                break;
+        }
+
+        parcelRepository.save(parcel);
+    }
+
+    public ResponseEntity<NewParcelInfo> saveExistingParcel(String trackingId, Parcel parcel) throws SQLException {
+        NewParcelInfo newParcelInfo = NewParcelInfo.builder().trackingId(trackingId).build();
+        try {
+            validator.validate(newParcelInfo);
+            validator.validate(parcel);
+        } catch (ConstraintViolationException e) {
+            log.warn(e.getMessage());
+            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
+        }
+
+        ParcelEntity parcelEntity = parcelRepository.findByTrackingId(trackingId);
+        if (parcelEntity != null) {
+            return new ResponseEntity<>(null, HttpStatus.CONFLICT);
+        }
+
+        parcelEntity = parcelMapper.from(parcel, newParcelInfo, TrackingInformation.builder().state(TrackingInformation.StateEnum.PICKUP).build());
+
+        parcelRepository.save(parcelEntity);
+        return new ResponseEntity<>(newParcelInfo, HttpStatus.OK);
+    }
+
+}
Index: src/main/java/at/fhtw/swen3/services/impl/RecipientServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/RecipientServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/RecipientServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679517625454)
+++ b/src/main/java/at/fhtw/swen3/services/impl/RecipientServiceImpl.java	(date 1679517625454)
@@ -0,0 +1,14 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.repositories.RecipientRepository;
+import at.fhtw.swen3.services.RecipientService;
+import at.fhtw.swen3.services.mapper.RecipientMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class RecipientServiceImpl implements RecipientService {
+    private final RecipientMapper recipientMapper;
+    private final Validator validator;
+    private final RecipientRepository recipientRepository;
+}
Index: src/main/java/at/fhtw/swen3/services/impl/ResetServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/ResetServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/ResetServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679517625454)
+++ b/src/main/java/at/fhtw/swen3/services/impl/ResetServiceImpl.java	(date 1679517625454)
@@ -0,0 +1,25 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.repositories.*;
+import at.fhtw.swen3.services.ResetService;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class ResetServiceImpl implements ResetService {
+    private final GeoCoordinateRepository geoCoordinateRepository;
+    private final HopArrivalRepository hopArrivalRepository;
+    private final HopRepository hopRepository;
+    private final ParcelRepository parcelRepository;
+    private final RecipientRepository recipientRepository;
+    private final WarehouseNextHopsRepository warehouseNextHopsRepository;
+
+    @Override
+    public void resetDB() {
+        hopArrivalRepository.deleteAll();
+        recipientRepository.deleteAll();
+        parcelRepository.deleteAll();
+        warehouseNextHopsRepository.deleteAll();
+        hopRepository.deleteAll();
+        geoCoordinateRepository.deleteAll();
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/impl/GeoCoordinateServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/GeoCoordinateServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/GeoCoordinateServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679517625451)
+++ b/src/main/java/at/fhtw/swen3/services/impl/GeoCoordinateServiceImpl.java	(date 1679517625451)
@@ -0,0 +1,16 @@
+package at.fhtw.swen3.services.impl;
+
+
+import at.fhtw.swen3.persistence.repositories.GeoCoordinateRepository;
+import at.fhtw.swen3.services.GeoCoordinateService;
+import at.fhtw.swen3.services.mapper.GeoCoordinateMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class GeoCoordinateServiceImpl implements GeoCoordinateService {
+    private final Validator validator;
+    private final GeoCoordinateMapper geoCoordinateMapper;
+    private final GeoCoordinateRepository geoCoordinateRepository;
+
+}
Index: src/main/java/at/fhtw/swen3/services/impl/HopArrivalServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/HopArrivalServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/HopArrivalServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679847323302)
+++ b/src/main/java/at/fhtw/swen3/services/impl/HopArrivalServiceImpl.java	(date 1679847323302)
@@ -0,0 +1,34 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.repositories.HopArrivalRepository;
+import at.fhtw.swen3.services.HopArrivalService;
+import at.fhtw.swen3.services.dto.HopArrival;
+import at.fhtw.swen3.services.mapper.HopArrivalMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+
+import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
+
+@RequiredArgsConstructor
+public class HopArrivalServiceImpl implements HopArrivalService {
+    private final Validator validator;
+    private final HopArrivalMapper hopArrivalMapper;
+    private final HopArrivalRepository hopArrivalRepository;
+
+
+    @Override
+    public HopArrival reportDelivery(String code, String description) {
+        HopArrivalEntity hopArrivalEntity = HopArrivalEntity.builder().code(code).description(description).dateTime(OffsetDateTime.from(LocalDateTime.now())).build();
+        validator.validate(hopArrivalEntity);
+        return hopArrivalMapper.mapToTarget(hopArrivalRepository.save(hopArrivalEntity));
+    }
+
+    @Override
+    public void reportHopArrival(String trackingId, String code) {
+
+    }
+
+
+}
Index: src/main/java/at/fhtw/swen3/services/impl/TruckServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/TruckServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/TruckServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679847866729)
+++ b/src/main/java/at/fhtw/swen3/services/impl/TruckServiceImpl.java	(date 1679847866729)
@@ -0,0 +1,15 @@
+package at.fhtw.swen3.services.impl;
+
+import at.fhtw.swen3.persistence.repositories.TruckRepository;
+import at.fhtw.swen3.services.TruckService;
+import at.fhtw.swen3.services.mapper.TruckMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class TruckServiceImpl implements TruckService {
+    private final TruckMapper truckMapper;
+    private final Validator validator;
+    private final TruckRepository truckRepository;
+
+}
Index: src/main/java/at/fhtw/swen3/services/impl/HopServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/HopServiceImpl.java b/src/main/java/at/fhtw/swen3/services/impl/HopServiceImpl.java
new file mode 100644
--- /dev/null	(date 1679517625453)
+++ b/src/main/java/at/fhtw/swen3/services/impl/HopServiceImpl.java	(date 1679517625453)
@@ -0,0 +1,33 @@
+package at.fhtw.swen3.services.impl;
+
+
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import at.fhtw.swen3.persistence.repositories.HopRepository;
+import at.fhtw.swen3.services.HopService;
+import at.fhtw.swen3.services.dto.Hop;
+import at.fhtw.swen3.services.mapper.HopMapper;
+import at.fhtw.swen3.services.validation.Validator;
+import lombok.RequiredArgsConstructor;
+
+import java.sql.SQLException;
+
+@RequiredArgsConstructor
+public class HopServiceImpl implements HopService {
+    private final Validator validator;
+    private final HopMapper hopMapper;
+    private final HopRepository hopRepository;
+
+    @Override
+    public HopEntity getHop(String code) throws SQLException {
+        return hopRepository.findByCode(code);
+    }
+
+    @Override
+    public Hop getWarehouse(String code) throws SQLException {
+        HopEntity hopEntity = hopRepository.findByCode(code);
+        if(hopEntity == null) return null;
+        return hopMapper.mapToTarget(hopEntity);
+    }
+
+
+}
Index: src/main/java/at/fhtw/swen3/services/WarehouseApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/WarehouseApi.java b/src/main/java/at/fhtw/swen3/services/impl/controller/WarehouseApi.java
rename from src/main/java/at/fhtw/swen3/services/WarehouseApi.java
rename to src/main/java/at/fhtw/swen3/services/impl/controller/WarehouseApi.java
--- a/src/main/java/at/fhtw/swen3/services/WarehouseApi.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/impl/controller/WarehouseApi.java	(date 1679847829327)
@@ -3,12 +3,11 @@
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
-package at.fhtw.swen3.services;
+package at.fhtw.swen3.services.impl.controller;
 
 import at.fhtw.swen3.services.dto.Error;
 import at.fhtw.swen3.services.dto.Hop;
 import at.fhtw.swen3.services.dto.Warehouse;
-import at.fhtw.swen3.services.impl.ApiUtil;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Content;
@@ -21,13 +20,12 @@
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.context.request.NativeWebRequest;
-import org.springframework.web.multipart.MultipartFile;
 
 import javax.validation.Valid;
 import java.util.Optional;
 import javax.annotation.Generated;
 
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 @Validated
 @Tag(name = "warehouse", description = "Operations for the warehouse management.")
 @RequestMapping("${openapi.parcelLogisticsService.base-path:}")
@@ -38,33 +36,33 @@
     }
 
     /**
-     * GET /warehouse : Exports the hierarchy of Warehouse and Truck objects. 
+     * GET /warehouse : Exports the hierarchy of Warehouse and Truck objects.
      *
      * @return Successful response (status code 200)
-     *         or The operation failed due to an error. (status code 400)
-     *         or No hierarchy loaded yet. (status code 404)
+     * or The operation failed due to an error. (status code 400)
+     * or No hierarchy loaded yet. (status code 404)
      */
     @Operation(
-        operationId = "exportWarehouses",
-        summary = "Exports the hierarchy of Warehouse and Truck objects. ",
-        tags = { "warehouse-management" },
-        responses = {
-            @ApiResponse(responseCode = "200", description = "Successful response", content = {
-                @Content(mediaType = "application/json", schema = @Schema(implementation = Warehouse.class))
-            }),
-            @ApiResponse(responseCode = "400", description = "The operation failed due to an error.", content = {
-                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
-            }),
-            @ApiResponse(responseCode = "404", description = "No hierarchy loaded yet.")
-        }
+            operationId = "exportWarehouses",
+            summary = "Exports the hierarchy of Warehouse and Truck objects. ",
+            tags = { "warehouse-management" },
+            responses = {
+                    @ApiResponse(responseCode = "200", description = "Successful response", content = {
+                            @Content(mediaType = "application/json", schema = @Schema(implementation = Warehouse.class))
+                    }),
+                    @ApiResponse(responseCode = "400", description = "The operation failed due to an error.", content = {
+                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
+                    }),
+                    @ApiResponse(responseCode = "404", description = "No hierarchy loaded yet.")
+            }
     )
     @RequestMapping(
-        method = RequestMethod.GET,
-        value = "/warehouse",
-        produces = { "application/json" }
+            method = RequestMethod.GET,
+            value = "/warehouse",
+            produces = { "application/json" }
     )
     default ResponseEntity<Warehouse> exportWarehouses(
-        
+
     ) {
         getRequest().ifPresent(request -> {
             for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
@@ -89,26 +87,26 @@
      *         or No hop with the specified id could be found. (status code 404)
      */
     @Operation(
-        operationId = "getWarehouse",
-        summary = "Get a certain warehouse or truck by code",
-        tags = { "warehouse-management" },
-        responses = {
-            @ApiResponse(responseCode = "200", description = "Successful response", content = {
-                @Content(mediaType = "application/json", schema = @Schema(implementation = Hop.class))
-            }),
-            @ApiResponse(responseCode = "400", description = "The operation failed due to an error.", content = {
-                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
-            }),
-            @ApiResponse(responseCode = "404", description = "No hop with the specified id could be found.")
-        }
+            operationId = "getWarehouse",
+            summary = "Get a certain warehouse or truck by code",
+            tags = { "warehouse-management" },
+            responses = {
+                    @ApiResponse(responseCode = "200", description = "Successful response", content = {
+                            @Content(mediaType = "application/json", schema = @Schema(implementation = Hop.class))
+                    }),
+                    @ApiResponse(responseCode = "400", description = "The operation failed due to an error.", content = {
+                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
+                    }),
+                    @ApiResponse(responseCode = "404", description = "No hop with the specified id could be found.")
+            }
     )
     @RequestMapping(
-        method = RequestMethod.GET,
-        value = "/warehouse/{code}",
-        produces = { "application/json" }
+            method = RequestMethod.GET,
+            value = "/warehouse/{code}",
+            produces = { "application/json" }
     )
     default ResponseEntity<Hop> getWarehouse(
-        @Parameter(name = "code", description = "", required = true) @PathVariable("code") String code
+            @Parameter(name = "code", description = "", required = true) @PathVariable("code") String code
     ) {
         getRequest().ifPresent(request -> {
             for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
@@ -125,31 +123,31 @@
 
 
     /**
-     * POST /warehouse : Imports a hierarchy of Warehouse and Truck objects. 
+     * POST /warehouse : Imports a hierarchy of Warehouse and Truck objects.
      *
      * @param warehouse  (required)
      * @return Successfully loaded. (status code 200)
      *         or The operation failed due to an error. (status code 400)
      */
     @Operation(
-        operationId = "importWarehouses",
-        summary = "Imports a hierarchy of Warehouse and Truck objects. ",
-        tags = { "warehouse-management" },
-        responses = {
-            @ApiResponse(responseCode = "200", description = "Successfully loaded."),
-            @ApiResponse(responseCode = "400", description = "The operation failed due to an error.", content = {
-                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
-            })
-        }
+            operationId = "importWarehouses",
+            summary = "Imports a hierarchy of Warehouse and Truck objects. ",
+            tags = { "warehouse-management" },
+            responses = {
+                    @ApiResponse(responseCode = "200", description = "Successfully loaded."),
+                    @ApiResponse(responseCode = "400", description = "The operation failed due to an error.", content = {
+                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
+                    })
+            }
     )
     @RequestMapping(
-        method = RequestMethod.POST,
-        value = "/warehouse",
-        produces = { "application/json" },
-        consumes = { "application/json" }
+            method = RequestMethod.POST,
+            value = "/warehouse",
+            produces = { "application/json" },
+            consumes = { "application/json" }
     )
     default ResponseEntity<Void> importWarehouses(
-        @Parameter(name = "Warehouse", description = "", required = true) @Valid @RequestBody Warehouse warehouse
+            @Parameter(name = "Warehouse", description = "", required = true) @Valid @RequestBody Warehouse warehouse
     ) {
         return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
 
Index: .idea/springbootInWindows.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_8\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.projectlombok:lombok:1.18.22\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mapstruct:mapstruct:1.5.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mapstruct:mapstruct-processor:1.5.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-data-jpa:2.7.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-aop:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-aop:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.aspectj:aspectjweaver:1.9.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-jdbc:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.zaxxer:HikariCP:4.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-jdbc:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.transaction:jakarta.transaction-api:1.3.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.persistence:jakarta.persistence-api:2.2.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate:hibernate-core:5.6.9.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss.logging:jboss-logging:3.4.3.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: net.bytebuddy:byte-buddy:1.12.10\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: antlr:antlr:2.7.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss:jandex:2.4.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml:classmate:1.5.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate.common:hibernate-commons-annotations:5.1.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jaxb:jaxb-runtime:2.3.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jaxb:txw2:2.3.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.sun.istack:istack-commons-runtime:3.0.12\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: com.sun.activation:jakarta.activation:1.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.data:spring-data-jpa:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-orm:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-context:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-tx:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-aspects:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-web:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-autoconfigure:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-logging:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ch.qos.logback:logback-classic:1.2.11\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ch.qos.logback:logback-core:1.2.11\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.logging.log4j:log4j-to-slf4j:2.17.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.logging.log4j:log4j-api:2.17.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:jul-to-slf4j:1.7.36\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.annotation:jakarta.annotation-api:1.3.5\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-json:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-tomcat:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.63\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.63\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-web:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-webmvc:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-expression:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.data:spring-data-commons:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-core:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-jcl:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-beans:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:slf4j-api:1.7.36\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springdoc:springdoc-openapi-ui:1.6.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springdoc:springdoc-openapi-webmvc-core:1.6.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springdoc:springdoc-openapi-common:1.6.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.swagger.core.v3:swagger-core:2.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.commons:commons-lang3:3.12.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.swagger.core.v3:swagger-annotations:2.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.swagger.core.v3:swagger-models:2.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.webjars:swagger-ui:4.10.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.webjars:webjars-locator-core:0.50\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.github.classgraph:classgraph:4.8.143\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.findbugs:jsr305:3.0.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.yaml:snakeyaml:1.30\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-core:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openapitools:jackson-databind-nullable:0.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-validation:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.63\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate.validator:hibernate-validator:6.2.3.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.validation:jakarta.validation-api:2.0.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-databind:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-starter-test:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-test:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: com.jayway.jsonpath:json-path:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.minidev:json-smart:2.4.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.minidev:accessors-smart:2.4.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.ow2.asm:asm:9.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.activation:jakarta.activation-api:1.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.assertj:assertj-core:3.22.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest:2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter:5.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-api:5.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.opentest4j:opentest4j:1.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.platform:junit-platform-commons:1.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.apiguardian:apiguardian-api:1.1.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-params:5.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-engine:5.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.platform:junit-platform-engine:1.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-core:4.5.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.bytebuddy:byte-buddy-agent:1.12.10\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.objenesis:objenesis:3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-junit-jupiter:4.5.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.skyscreamer:jsonassert:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework:spring-test:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.xmlunit:xmlunit-core:2.9.0\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/springbootInWindows.iml b/.idea/springbootInWindows.iml
--- a/.idea/springbootInWindows.iml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/springbootInWindows.iml	(date 1679849854835)
@@ -7,62 +7,43 @@
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" generated="true" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="Maven: org.projectlombok:lombok:1.18.22" level="project" />
-    <orderEntry type="library" name="Maven: org.mapstruct:mapstruct:1.5.2.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.mapstruct:mapstruct-processor:1.5.2.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-data-jpa:2.7.4" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-aop:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-aop:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.aspectj:aspectjweaver:1.9.7" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-jdbc:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: com.zaxxer:HikariCP:4.0.3" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-jdbc:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: jakarta.transaction:jakarta.transaction-api:1.3.3" level="project" />
-    <orderEntry type="library" name="Maven: jakarta.persistence:jakarta.persistence-api:2.2.3" level="project" />
-    <orderEntry type="library" name="Maven: org.hibernate:hibernate-core:5.6.9.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.jboss.logging:jboss-logging:3.4.3.Final" level="project" />
-    <orderEntry type="library" name="Maven: net.bytebuddy:byte-buddy:1.12.10" level="project" />
-    <orderEntry type="library" name="Maven: antlr:antlr:2.7.7" level="project" />
-    <orderEntry type="library" name="Maven: org.jboss:jandex:2.4.2.Final" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml:classmate:1.5.1" level="project" />
-    <orderEntry type="library" name="Maven: org.hibernate.common:hibernate-commons-annotations:5.1.2.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.glassfish.jaxb:jaxb-runtime:2.3.6" level="project" />
-    <orderEntry type="library" name="Maven: org.glassfish.jaxb:txw2:2.3.6" level="project" />
-    <orderEntry type="library" name="Maven: com.sun.istack:istack-commons-runtime:3.0.12" level="project" />
-    <orderEntry type="library" scope="RUNTIME" name="Maven: com.sun.activation:jakarta.activation:1.2.2" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-jpa:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-orm:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-context:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-tx:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-aspects:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-web:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-autoconfigure:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-logging:2.7.0" level="project" />
+    <orderEntry type="library" name="Maven: org.testng:testng:6.1.1" level="project" />
+    <orderEntry type="library" name="Maven: junit:junit:4.13.2" level="project" />
+    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest-core:2.2" level="project" />
+    <orderEntry type="library" name="Maven: org.beanshell:bsh:2.0b4" level="project" />
+    <orderEntry type="library" name="Maven: com.beust:jcommander:1.12" level="project" />
+    <orderEntry type="library" name="Maven: org.yaml:snakeyaml:1.30" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-web:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-autoconfigure:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-logging:2.7.4" level="project" />
     <orderEntry type="library" name="Maven: ch.qos.logback:logback-classic:1.2.11" level="project" />
     <orderEntry type="library" name="Maven: ch.qos.logback:logback-core:1.2.11" level="project" />
     <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-to-slf4j:2.17.2" level="project" />
     <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-api:2.17.2" level="project" />
     <orderEntry type="library" name="Maven: org.slf4j:jul-to-slf4j:1.7.36" level="project" />
     <orderEntry type="library" name="Maven: jakarta.annotation:jakarta.annotation-api:1.3.5" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-json:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.3" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.3" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-tomcat:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.63" level="project" />
-    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.63" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-web:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-webmvc:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-expression:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-commons:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-core:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-jcl:5.3.20" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework:spring-beans:5.3.20" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-json:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-tomcat:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.65" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.65" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-web:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-webmvc:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-aop:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-context:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-expression:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-commons:2.7.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-core:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-jcl:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-beans:5.3.23" level="project" />
     <orderEntry type="library" name="Maven: org.slf4j:slf4j-api:1.7.36" level="project" />
     <orderEntry type="library" name="Maven: org.springdoc:springdoc-openapi-ui:1.6.8" level="project" />
     <orderEntry type="library" name="Maven: org.springdoc:springdoc-openapi-webmvc-core:1.6.8" level="project" />
@@ -71,24 +52,21 @@
     <orderEntry type="library" name="Maven: org.apache.commons:commons-lang3:3.12.0" level="project" />
     <orderEntry type="library" name="Maven: io.swagger.core.v3:swagger-annotations:2.2.0" level="project" />
     <orderEntry type="library" name="Maven: io.swagger.core.v3:swagger-models:2.2.0" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.validation:jakarta.validation-api:2.0.2" level="project" />
     <orderEntry type="library" name="Maven: org.webjars:swagger-ui:4.10.3" level="project" />
     <orderEntry type="library" name="Maven: org.webjars:webjars-locator-core:0.50" level="project" />
     <orderEntry type="library" name="Maven: io.github.classgraph:classgraph:4.8.143" level="project" />
     <orderEntry type="library" name="Maven: com.google.code.findbugs:jsr305:3.0.2" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3" level="project" />
-    <orderEntry type="library" name="Maven: org.yaml:snakeyaml:1.30" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-core:2.13.3" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.3" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-core:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.4" level="project" />
     <orderEntry type="library" name="Maven: org.openapitools:jackson-databind-nullable:0.2.2" level="project" />
-    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-validation:2.7.0" level="project" />
-    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.63" level="project" />
-    <orderEntry type="library" name="Maven: org.hibernate.validator:hibernate-validator:6.2.3.Final" level="project" />
-    <orderEntry type="library" name="Maven: jakarta.validation:jakarta.validation-api:2.0.2" level="project" />
-    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-databind:2.13.3" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-starter-test:2.7.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test:2.7.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.7.0" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-validation:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.65" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-starter-test:2.7.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test:2.7.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.7.4" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: com.jayway.jsonpath:json-path:2.7.0" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: net.minidev:json-smart:2.4.8" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: net.minidev:accessors-smart:2.4.8" level="project" />
@@ -96,7 +74,7 @@
     <orderEntry type="library" name="Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3" level="project" />
     <orderEntry type="library" name="Maven: jakarta.activation:jakarta.activation-api:1.2.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.assertj:assertj-core:3.22.0" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest:2.2" level="project" />
+    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest:2.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter:5.8.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.8.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.opentest4j:opentest4j:1.2.0" level="project" />
@@ -106,12 +84,48 @@
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-engine:5.8.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-engine:1.8.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-core:4.5.1" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: net.bytebuddy:byte-buddy-agent:1.12.10" level="project" />
+    <orderEntry type="library" name="Maven: net.bytebuddy:byte-buddy:1.12.17" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: net.bytebuddy:byte-buddy-agent:1.12.17" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.objenesis:objenesis:3.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-junit-jupiter:4.5.1" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.skyscreamer:jsonassert:1.5.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.skyscreamer:jsonassert:1.5.1" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.springframework:spring-test:5.3.20" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework:spring-test:5.3.23" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.xmlunit:xmlunit-core:2.9.0" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-data-jpa:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-aop:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.aspectj:aspectjweaver:1.9.7" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-jdbc:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: com.zaxxer:HikariCP:4.0.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-jdbc:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.transaction:jakarta.transaction-api:1.3.3" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.persistence:jakarta.persistence-api:2.2.3" level="project" />
+    <orderEntry type="library" name="Maven: org.hibernate:hibernate-core:5.6.11.Final" level="project" />
+    <orderEntry type="library" name="Maven: antlr:antlr:2.7.7" level="project" />
+    <orderEntry type="library" name="Maven: org.jboss:jandex:2.4.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.hibernate.common:hibernate-commons-annotations:5.1.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.glassfish.jaxb:jaxb-runtime:2.3.6" level="project" />
+    <orderEntry type="library" name="Maven: org.glassfish.jaxb:txw2:2.3.6" level="project" />
+    <orderEntry type="library" name="Maven: com.sun.istack:istack-commons-runtime:3.0.12" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: com.sun.activation:jakarta.activation:1.2.2" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-jpa:2.7.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-orm:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-tx:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-aspects:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.projectlombok:lombok:1.18.24" level="project" />
+    <orderEntry type="library" name="Maven: org.mapstruct:mapstruct-processor:1.5.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.mapstruct:mapstruct:1.5.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: javax.validation:validation-api:2.0.1.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.hibernate.validator:hibernate-validator:6.0.20.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.jboss.logging:jboss-logging:3.4.3.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml:classmate:1.5.1" level="project" />
+    <orderEntry type="library" name="Maven: org.glassfish:javax.el:3.0.0" level="project" />
+    <orderEntry type="library" name="Maven: org.postgresql:postgresql:42.5.0" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: org.checkerframework:checker-qual:3.5.0" level="project" />
+    <orderEntry type="library" name="Maven: com.h2database:h2:2.1.214" level="project" />
+    <orderEntry type="library" name="Maven: org.json:json:20220924" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-databind:2.13.3" level="project" />
+    <orderEntry type="library" name="Maven: com.mapbox.mapboxsdk:mapbox-sdk-geojson:3.0.1" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.gson:gson:2.9.1" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/ParcelApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/ParcelApi.java b/src/main/java/at/fhtw/swen3/services/impl/controller/ParcelApi.java
rename from src/main/java/at/fhtw/swen3/services/ParcelApi.java
rename to src/main/java/at/fhtw/swen3/services/impl/controller/ParcelApi.java
--- a/src/main/java/at/fhtw/swen3/services/ParcelApi.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/impl/controller/ParcelApi.java	(date 1679519676328)
@@ -3,38 +3,43 @@
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
-package at.fhtw.swen3.services;
+package at.fhtw.swen3.services.impl.controller;
 
 import at.fhtw.swen3.services.dto.Error;
 import at.fhtw.swen3.services.dto.NewParcelInfo;
 import at.fhtw.swen3.services.dto.Parcel;
 import at.fhtw.swen3.services.dto.TrackingInformation;
-import at.fhtw.swen3.services.impl.ApiUtil;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Content;
 import io.swagger.v3.oas.annotations.media.Schema;
 import io.swagger.v3.oas.annotations.responses.ApiResponse;
 import io.swagger.v3.oas.annotations.tags.Tag;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.validation.annotation.Validated;
-import org.springframework.web.bind.annotation.*;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.context.request.NativeWebRequest;
-import org.springframework.web.multipart.MultipartFile;
 
+import javax.annotation.Generated;
 import javax.validation.Valid;
-import javax.validation.constraints.*;
+import javax.validation.constraints.Pattern;
 import java.util.Optional;
-import javax.annotation.Generated;
 
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 @Validated
 @Tag(name = "parcel", description = "Operations for the logistics staff.")
 @RequestMapping("${openapi.parcelLogisticsService.base-path:}")
 public interface ParcelApi {
 
+    @Autowired
+    //private HopArrivalService hopArrivalservice;
+
     default Optional<NativeWebRequest> getRequest() {
         return Optional.empty();
     }
@@ -67,8 +72,8 @@
     default ResponseEntity<Void> reportParcelDelivery(
         @Pattern(regexp = "^[A-Z0-9]{9}$") @Parameter(name = "trackingId", description = "The tracking ID of the parcel. E.g. PYJRB4HZ6 ", required = true) @PathVariable("trackingId") String trackingId
     ) {
-        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
-
+        //hopArrivalService.reportDelivery(trackingId, "trackingId");
+        return new ResponseEntity<>(HttpStatus.CREATED);
     }
 
 
@@ -143,6 +148,7 @@
         getRequest().ifPresent(request -> {
             for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                 if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
+
                     String exampleString = "{ \"trackingId\" : \"PYJRB4HZ6\" }";
                     ApiUtil.setExampleResponse(request, "application/json", exampleString);
                     break;
Index: src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseRepository.java
new file mode 100644
--- /dev/null	(date 1679847739729)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseRepository.java	(date 1679847739729)
@@ -0,0 +1,13 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.WarehouseEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.sql.SQLException;
+
+@Repository
+public interface WarehouseRepository extends JpaRepository<WarehouseEntity, Long> {
+    WarehouseEntity findByCode(String code) throws SQLException;
+    WarehouseEntity findFirstByIdIsNotNullOrderByNextHops();
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/HopRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/HopRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/HopRepository.java
new file mode 100644
--- /dev/null	(date 1679517625408)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/HopRepository.java	(date 1679517625408)
@@ -0,0 +1,13 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.HopEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.sql.SQLException;
+
+@Repository
+public interface HopRepository extends JpaRepository<HopEntity, Long> {
+    HopEntity findByCode (String code) throws SQLException;
+
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/RecipientRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/RecipientRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/RecipientRepository.java
new file mode 100644
--- /dev/null	(date 1679517625409)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/RecipientRepository.java	(date 1679517625409)
@@ -0,0 +1,12 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface RecipientRepository extends JpaRepository<RecipientEntity, Long> {
+    List<RecipientEntity> findByName(String name);
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/ParcelRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/ParcelRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/ParcelRepository.java
new file mode 100644
--- /dev/null	(date 1679517625408)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/ParcelRepository.java	(date 1679517625408)
@@ -0,0 +1,11 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.sql.SQLException;
+
+
+public interface ParcelRepository extends JpaRepository<ParcelEntity, Long> {
+    ParcelEntity findByTrackingId(String trackingId) throws SQLException;
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/TransferwarehouseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/TransferwarehouseRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/TransferwarehouseRepository.java
new file mode 100644
--- /dev/null	(date 1679517625409)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/TransferwarehouseRepository.java	(date 1679517625409)
@@ -0,0 +1,7 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.TransferwarehouseEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface TransferwarehouseRepository extends JpaRepository<TransferwarehouseEntity, Long> {
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/TruckRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/TruckRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/TruckRepository.java
new file mode 100644
--- /dev/null	(date 1679517625409)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/TruckRepository.java	(date 1679517625409)
@@ -0,0 +1,9 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.TruckEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface TruckRepository extends JpaRepository<TruckEntity, Long> {
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/HopArrivalRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/HopArrivalRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/HopArrivalRepository.java
new file mode 100644
--- /dev/null	(date 1679517625407)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/HopArrivalRepository.java	(date 1679517625407)
@@ -0,0 +1,9 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface HopArrivalRepository extends JpaRepository<HopArrivalEntity, Long> {
+}
Index: src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepository.java
new file mode 100644
--- /dev/null	(date 1679517625410)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepository.java	(date 1679517625410)
@@ -0,0 +1,9 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.WarehouseNextHopsEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface WarehouseNextHopsRepository extends JpaRepository<WarehouseNextHopsEntity, Long> {
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/HopEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/HopEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/HopEntity.java
new file mode 100644
--- /dev/null	(date 1679848190544)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/HopEntity.java	(date 1679848190544)
@@ -0,0 +1,49 @@
+package at.fhtw.swen3.persistence.entities;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.SuperBuilder;
+
+import javax.persistence.*;
+import javax.validation.Valid;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Pattern;
+import java.util.ArrayList;
+import java.util.List;
+
+@Data
+@SuperBuilder
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "hop")
+@Inheritance
+public class HopEntity {
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long id;
+
+    @Column
+    private String hopType;
+
+    @Column
+    @NotNull @Pattern(regexp = "^[A-Z]{4}\\d{1,4}$")
+    private String code;
+
+    @Column
+    private String description;
+
+    @Column
+    private Integer processingDelayMins;
+
+    @Column
+    private String locationName;
+
+    @OneToOne(cascade = CascadeType.ALL)
+    @NotNull @Valid
+    private GeoCoordinateEntity locationCoordinates;
+
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/RecipientEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/RecipientEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/RecipientEntity.java
new file mode 100644
--- /dev/null	(date 1679517625404)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/RecipientEntity.java	(date 1679517625404)
@@ -0,0 +1,41 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import javax.validation.constraints.Pattern;
+
+
+/**
+ * Recipient
+ */
+
+@Data
+@Entity
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+@Table(name = "recipient")
+public class RecipientEntity {
+
+  @Id @GeneratedValue(strategy = GenerationType.AUTO)
+  @Column
+  private Long id;
+  @Column
+  private String name;
+  @Column
+  @Pattern(regexp = "[\\p{L}]+(\\s\\p{L}*[.]?)*\\s[0-9]*[\\p{L}]*((\\/)[0-9]*)*", message = "must match street name regex (Street, blank, number (number, slashes, characters)")
+  private String street;
+  @Column
+  @Pattern(regexp = "^\\bA-\\b[0-9]{4}$", message = "must match postal code regex (\"A-\", 4 digits, 0000-9999)")
+  private String postalCode;
+  @Column
+  @Pattern(regexp = "^[a-zA-Z]+(?:[\\s-][a-zA-Z]+)*$", message = "must match city name regex e.g.San-Francisco")
+  private String city;
+  @Column
+  private String country;
+}
+
Index: src/main/java/at/fhtw/swen3/persistence/repositories/GeoCoordinateRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/repositories/GeoCoordinateRepository.java b/src/main/java/at/fhtw/swen3/persistence/repositories/GeoCoordinateRepository.java
new file mode 100644
--- /dev/null	(date 1679517625407)
+++ b/src/main/java/at/fhtw/swen3/persistence/repositories/GeoCoordinateRepository.java	(date 1679517625407)
@@ -0,0 +1,9 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.GeoCoordinateEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface GeoCoordinateRepository extends JpaRepository<GeoCoordinateEntity, Long> {
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/EntityValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/EntityValidator.java b/src/main/java/at/fhtw/swen3/persistence/entities/EntityValidator.java
new file mode 100644
--- /dev/null	(date 1679848510578)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/EntityValidator.java	(date 1679848510578)
@@ -0,0 +1,32 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+
+import javax.validation.*;
+import java.util.Set;
+
+@Slf4j
+public class EntityValidator {
+
+    static ValidatorFactory getValidatorFactory() {
+        return Validation.buildDefaultValidatorFactory();
+    }
+
+
+    Validator getValidator() {
+        return getValidatorFactory().getValidator();
+    }
+
+    <T> void validate(T o) {
+        Validator validator = getValidator();
+        Set<ConstraintViolation<T>> violations = validator.validate(o);
+        for (ConstraintViolation<T> v : violations) {
+            log.error(v.getMessage());
+        }
+        if (!violations.isEmpty()) {
+            throw new ConstraintViolationException(violations);
+        }
+    }
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/HopArrivalEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/HopArrivalEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/HopArrivalEntity.java
new file mode 100644
--- /dev/null	(date 1679848190550)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/HopArrivalEntity.java	(date 1679848190550)
@@ -0,0 +1,37 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.*;
+
+
+import javax.persistence.*;
+import javax.validation.constraints.Pattern;
+import java.time.OffsetDateTime;
+
+/**
+ * HopArrival
+ */
+
+
+@Data
+@Entity
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+@Table(name = "hop_arrival")
+public class HopArrivalEntity {
+  @Id
+  @GeneratedValue(strategy = GenerationType.AUTO)
+  @Column
+  private Long id;
+  @Column
+  @Pattern(regexp = " ^[A-Z]{4}\\d{1,4}$", message = "must match postal code regex")
+  private String code;
+  @Column
+  @Pattern(regexp = " ^[A-Za-z0-9\\s\\-]$", message = "must match postal code regex")
+  private String description;
+  @Column
+  private OffsetDateTime dateTime;
+  @ManyToOne
+  private ParcelEntity parcel;
+}
+
Index: src/main/java/at/fhtw/swen3/persistence/entities/GeoCoordinateEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/GeoCoordinateEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/GeoCoordinateEntity.java
new file mode 100644
--- /dev/null	(date 1679517625402)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/GeoCoordinateEntity.java	(date 1679517625402)
@@ -0,0 +1,26 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "geo_coordinate")
+public class GeoCoordinateEntity {
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long id;
+
+    @Column
+    private Double lat;
+
+    @Column
+    private Double lon;
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/WarehouseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/WarehouseEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/WarehouseEntity.java
new file mode 100644
--- /dev/null	(date 1679848224158)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/WarehouseEntity.java	(date 1679848224158)
@@ -0,0 +1,23 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.*;
+import lombok.experimental.SuperBuilder;
+
+import javax.persistence.*;
+import java.util.ArrayList;
+import java.util.List;
+
+@Data
+@EqualsAndHashCode(callSuper = true)    //for extending HopEntity
+@Entity
+@SuperBuilder
+@AllArgsConstructor
+@NoArgsConstructor
+public class WarehouseEntity extends HopEntity {
+    @Column
+    private Integer level;
+
+    @OneToMany
+    @JoinColumn(name="fk_warehouse")
+    private List<WarehouseNextHopsEntity> nextHops = new ArrayList<>();
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/TruckEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/TruckEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/TruckEntity.java
new file mode 100644
--- /dev/null	(date 1679848214899)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/TruckEntity.java	(date 1679848214899)
@@ -0,0 +1,19 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.*;
+import lombok.experimental.SuperBuilder;
+
+import javax.persistence.*;
+
+@Data
+@EqualsAndHashCode(callSuper = true)    //for extending HopEntity
+@SuperBuilder
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+public class TruckEntity extends HopEntity{
+    @Column
+    private String regionGeoJson;
+    @Column
+    private String numberPlate;
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/ParcelEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/ParcelEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/ParcelEntity.java
new file mode 100644
--- /dev/null	(date 1679848196172)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/ParcelEntity.java	(date 1679848196172)
@@ -0,0 +1,54 @@
+package at.fhtw.swen3.persistence.entities;
+
+
+import at.fhtw.swen3.persistence.repositories.HopArrivalRepository;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import javax.validation.constraints.DecimalMin;
+import javax.validation.constraints.NotNull;
+import java.util.List;
+
+@Data
+@Entity
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "parcel")
+public class ParcelEntity {
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    @Column
+    private Long id;
+    @Column
+    @DecimalMin(value = "0.1", message = "parcel weight must be over 0.0")
+    private Float weight;
+    @OneToOne(cascade = CascadeType.ALL)
+    @JoinColumn(name="fk_recipient")
+    @NotNull
+    private RecipientEntity recipient;
+    @OneToOne(cascade = CascadeType.ALL)
+    @JoinColumn(name="fk_sender")
+    @NotNull
+    private RecipientEntity sender;
+    @Column
+    private String trackingId;
+    @Column
+    private TrackingInformation.StateEnum deliveryStatus;
+    @OneToMany
+    private List<HopArrivalEntity> visitedHops;
+    @OneToMany
+    private List<HopArrivalEntity> futureHops;
+
+    public void addVisitedHop(HopArrivalEntity hopArrival) {
+        visitedHops.add(hopArrival);
+    }
+
+    public void removeFutureHop(HopArrivalEntity hopArrival) {
+        futureHops.remove(hopArrival);
+    }
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/TransferwarehouseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/TransferwarehouseEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/TransferwarehouseEntity.java
new file mode 100644
--- /dev/null	(date 1679517625404)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/TransferwarehouseEntity.java	(date 1679517625404)
@@ -0,0 +1,28 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import lombok.experimental.SuperBuilder;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+
+@Data
+@EqualsAndHashCode(callSuper = true)    //for extending HopEntity
+@Entity
+@SuperBuilder
+@AllArgsConstructor
+@NoArgsConstructor
+public class TransferwarehouseEntity extends HopEntity{
+    @Column
+    private String regionGeoJson;
+
+    @Column
+    private String logisticsPartner;
+
+    @Column
+    private String logisticsPartnerUrl;
+
+}
Index: src/main/java/at/fhtw/swen3/persistence/entities/WarehouseNextHopsEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/persistence/entities/WarehouseNextHopsEntity.java b/src/main/java/at/fhtw/swen3/persistence/entities/WarehouseNextHopsEntity.java
new file mode 100644
--- /dev/null	(date 1679517625406)
+++ b/src/main/java/at/fhtw/swen3/persistence/entities/WarehouseNextHopsEntity.java	(date 1679517625406)
@@ -0,0 +1,28 @@
+package at.fhtw.swen3.persistence.entities;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "warehouse_next_hop")
+public class WarehouseNextHopsEntity {
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    @Column
+    private Long id;
+    @Column
+    private Integer traveltimeMins;
+    @OneToOne(cascade = CascadeType.ALL)
+    private HopEntity hop;
+    @ManyToOne
+    @JoinColumn(name="fk_warehouse", insertable = false, updatable = false)
+    private WarehouseEntity warehouseSuper;
+}
Index: src/main/java/at/fhtw/swen3/gps/service/GeoEncodingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/gps/service/GeoEncodingService.java b/src/main/java/at/fhtw/swen3/gps/service/GeoEncodingService.java
new file mode 100644
--- /dev/null	(date 1679517625400)
+++ b/src/main/java/at/fhtw/swen3/gps/service/GeoEncodingService.java	(date 1679517625400)
@@ -0,0 +1,9 @@
+package at.fhtw.swen3.gps.service;
+
+import at.fhtw.swen3.services.dto.GeoCoordinate;
+
+import java.io.UnsupportedEncodingException;
+
+public interface GeoEncodingService {
+    GeoCoordinate encodeAddress(String a) throws UnsupportedEncodingException;
+}
Index: src/main/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxy.java b/src/main/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxy.java
new file mode 100644
--- /dev/null	(date 1679517625400)
+++ b/src/main/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxy.java	(date 1679517625400)
@@ -0,0 +1,35 @@
+package at.fhtw.swen3.gps.service.impl;
+
+import at.fhtw.swen3.gps.HttpDataHandler;
+import at.fhtw.swen3.gps.service.GeoEncodingService;
+import at.fhtw.swen3.services.dto.GeoCoordinate;
+import lombok.extern.slf4j.Slf4j;
+import org.json.JSONException;
+
+import java.io.IOException;
+import java.net.URLEncoder;
+
+
+@Slf4j
+public class OpenStreetMapEncodingProxy implements GeoEncodingService {
+
+    @Override
+    public GeoCoordinate encodeAddress(String addr) {
+        try {
+            String requesturl = "https://nominatim.openstreetmap.org/search.php?q=\"" + URLEncoder.encode(addr, "UTF-8")+ "\"&format=json";
+            log.info("request url: " + requesturl);
+
+            String jsonString = HttpDataHandler.httpGetJsonString(requesturl);
+
+            double lat, lon = 0;
+            lat = HttpDataHandler.getDoubleFromJson(jsonString, "lat");
+            lon = HttpDataHandler.getDoubleFromJson(jsonString, "lon");
+            log.info("coordinates from openstreetmap json - LAT:" + lat + ", LON:" + lon);
+
+            return new GeoCoordinate(lat, lon);
+
+        } catch (JSONException | IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
Index: src/main/java/at/fhtw/swen3/gps/HttpDataHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/gps/HttpDataHandler.java b/src/main/java/at/fhtw/swen3/gps/HttpDataHandler.java
new file mode 100644
--- /dev/null	(date 1679517625399)
+++ b/src/main/java/at/fhtw/swen3/gps/HttpDataHandler.java	(date 1679517625399)
@@ -0,0 +1,51 @@
+package at.fhtw.swen3.gps;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import lombok.extern.slf4j.Slf4j;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+@Slf4j
+public class HttpDataHandler {
+    private static JsonNode getJsonObj(String json) throws JsonProcessingException {
+        ObjectMapper objectMapper = new ObjectMapper();
+        return objectMapper.readTree(json);
+    }
+
+    public static double getDoubleFromJson(String json, String gets) throws JsonProcessingException {
+        //log.info("json: " + getJsonObj(json).findParent(gets));
+        return getJsonObj(json).findParent(gets).get(gets).asDouble();
+    }
+
+    public static String httpGetJsonString(String url) throws IOException {
+        HttpURLConnection connection = null;
+        try {
+            URL realUrl = new URL(url);
+            connection = (HttpURLConnection) realUrl.openConnection();
+            connection.setRequestMethod("GET");
+            StringBuilder stringBuilder;
+
+            int status = connection.getResponseCode();
+            log.info("http response code: " + status);
+
+            try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
+                String line;
+                stringBuilder = new StringBuilder();
+                while ((line = in.readLine()) != null) {
+                    stringBuilder.append(line);
+                    stringBuilder.append(System.lineSeparator());
+                }
+            }
+            return stringBuilder.toString();
+        } finally {
+            assert connection != null;
+            connection.disconnect();
+        }
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/impl/controller/rest/WarehouseApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/impl/controller/rest/WarehouseApiController.java b/src/main/java/at/fhtw/swen3/services/impl/controller/rest/WarehouseApiController.java
new file mode 100644
--- /dev/null	(date 1679847866721)
+++ b/src/main/java/at/fhtw/swen3/services/impl/controller/rest/WarehouseApiController.java	(date 1679847866721)
@@ -0,0 +1,76 @@
+package at.fhtw.swen3.services.impl.controller.rest;
+
+
+import at.fhtw.swen3.services.HopService;
+import at.fhtw.swen3.services.WarehouseService;
+import at.fhtw.swen3.services.dto.Hop;
+import at.fhtw.swen3.services.dto.Warehouse;
+import at.fhtw.swen3.services.impl.controller.WarehouseApi;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataAccessException;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.context.request.NativeWebRequest;
+
+import javax.annotation.Generated;
+import java.sql.SQLException;
+import java.util.Optional;
+
+@RequiredArgsConstructor
+@Slf4j
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
+@Controller
+public class WarehouseApiController implements WarehouseApi {
+
+    @Autowired
+    private final WarehouseService warehouseService;
+    @Autowired
+    private final HopService hopService;
+    private final NativeWebRequest request;
+
+    @Override
+    public Optional<NativeWebRequest> getRequest() {
+        return Optional.ofNullable(request);
+    }
+
+    @Override
+    public ResponseEntity<Warehouse> exportWarehouses() {
+        Warehouse warehouseHierarchy;
+        try {
+            warehouseHierarchy = warehouseService.exportWarehouses();
+        }catch (DataAccessException e) {
+            log.warn(e.getMessage());
+            return new ResponseEntity<Warehouse>(HttpStatus.BAD_REQUEST);
+        }
+        if(warehouseHierarchy == null) return new ResponseEntity<Warehouse>(HttpStatus.NOT_FOUND);
+        return new ResponseEntity<Warehouse>(warehouseHierarchy,HttpStatus.OK);
+    }
+
+    @Override
+    public ResponseEntity<Hop> getWarehouse(String code) {
+        Hop hop = null;
+        try {
+            hop = hopService.getWarehouse(code);
+        } catch (SQLException e) {
+            log.warn(e.getSQLState(), e.getMessage());
+            return new ResponseEntity<Hop>(HttpStatus.BAD_REQUEST);
+        }
+        if(hop == null) return new ResponseEntity<Hop>(HttpStatus.NOT_FOUND);
+        return new ResponseEntity<Hop>(hop, HttpStatus.FOUND);
+    }
+
+    @Override
+    public ResponseEntity<Void> importWarehouses(Warehouse warehouse) {
+        Warehouse createdWarehouse = null;
+        try {
+            createdWarehouse = warehouseService.importWarehouses(warehouse);
+        } catch (DataAccessException e) {
+            log.warn(e.getMessage());
+            return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
+        }
+        return new ResponseEntity<Void>(HttpStatus.OK);
+    }
+}
Index: src/main/java/at/fhtw/swen3/services/dto/Parcel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.persistence.Column;\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Parcel\r\n */\r\n@Getter @Setter\r\n@at.fhtw.swen3.persistence.entity.Parcel\r\n@JsonTypeName(\"parcel\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Parcel {\r\n\r\n  @Column\r\n  @JsonProperty(\"weight\")\r\n  private Float weight;\r\n\r\n  @Column\r\n  @JsonProperty(\"recipient\")\r\n  private Recipient recipient;\r\n\r\n  @Column\r\n  @JsonProperty(\"sender\")\r\n  private Recipient sender;\r\n\r\n  public Parcel weight(Float weight) {\r\n    this.weight = weight;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get weight\r\n   * @return weight\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"weight\", required = true)\r\n  public Float getWeight() {\r\n    return weight;\r\n  }\r\n\r\n  public void setWeight(Float weight) {\r\n    this.weight = weight;\r\n  }\r\n\r\n  public Parcel recipient(Recipient recipient) {\r\n    this.recipient = recipient;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get recipient\r\n   * @return recipient\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"recipient\", required = true)\r\n  public Recipient getRecipient() {\r\n    return recipient;\r\n  }\r\n\r\n  public void setRecipient(Recipient recipient) {\r\n    this.recipient = recipient;\r\n  }\r\n\r\n  public Parcel sender(Recipient sender) {\r\n    this.sender = sender;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get sender\r\n   * @return sender\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"sender\", required = true)\r\n  public Recipient getSender() {\r\n    return sender;\r\n  }\r\n\r\n  public void setSender(Recipient sender) {\r\n    this.sender = sender;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Parcel parcel = (Parcel) o;\r\n    return Objects.equals(this.weight, parcel.weight) &&\r\n        Objects.equals(this.recipient, parcel.recipient) &&\r\n        Objects.equals(this.sender, parcel.sender);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(weight, recipient, sender);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Parcel {\\n\");\r\n    sb.append(\"    weight: \").append(toIndentedString(weight)).append(\"\\n\");\r\n    sb.append(\"    recipient: \").append(toIndentedString(recipient)).append(\"\\n\");\r\n    sb.append(\"    sender: \").append(toIndentedString(sender)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Parcel.java b/src/main/java/at/fhtw/swen3/services/dto/Parcel.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Parcel.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Parcel.java	(date 1679847978914)
@@ -5,12 +5,10 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 
-import javax.persistence.Column;
 import javax.validation.Valid;
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
-import lombok.Getter;
-import lombok.Setter;
+import lombok.Builder;
 
 
 import javax.annotation.Generated;
@@ -18,21 +16,19 @@
 /**
  * Parcel
  */
-@Getter @Setter
-@at.fhtw.swen3.persistence.entity.Parcel
+
 @JsonTypeName("parcel")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
+@Builder
 public class Parcel {
 
-  @Column
   @JsonProperty("weight")
+  @DecimalMin(value = "0.1", message = "parcel weight must be over 0.0")
   private Float weight;
 
-  @Column
   @JsonProperty("recipient")
   private Recipient recipient;
 
-  @Column
   @JsonProperty("sender")
   private Recipient sender;
 
@@ -44,8 +40,8 @@
   /**
    * Get weight
    * @return weight
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "weight", required = true)
   public Float getWeight() {
     return weight;
@@ -63,8 +59,8 @@
   /**
    * Get recipient
    * @return recipient
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "recipient", required = true)
   public Recipient getRecipient() {
     return recipient;
@@ -82,8 +78,8 @@
   /**
    * Get sender
    * @return sender
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "sender", required = true)
   public Recipient getSender() {
     return sender;
@@ -103,8 +99,8 @@
     }
     Parcel parcel = (Parcel) o;
     return Objects.equals(this.weight, parcel.weight) &&
-        Objects.equals(this.recipient, parcel.recipient) &&
-        Objects.equals(this.sender, parcel.sender);
+            Objects.equals(this.recipient, parcel.recipient) &&
+            Objects.equals(this.sender, parcel.sender);
   }
 
   @Override
Index: create.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/create.sql b/create.sql
new file mode 100644
--- /dev/null	(date 1679517625389)
+++ b/create.sql	(date 1679517625389)
@@ -0,0 +1,1617 @@
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
+create sequence hibernate_sequence start 1 increment 1;
+create table geo_coordinate (id int8 not null, lat float8, lon float8, primary key (id));
+create table hop (dtype varchar(31) not null, id int8 not null, code varchar(255) not null, description varchar(255), hop_type varchar(255), location_name varchar(255), processing_delay_mins int4, logistics_partner varchar(255), logistics_partner_url varchar(255), region_geo_json varchar(255), number_plate varchar(255), level int4, location_coordinates_id int8 not null, primary key (id));
+create table hop_arrival (id int8 not null, code varchar(255), date_time timestamp, description varchar(255), parcel_id int8, primary key (id));
+create table parcel (id int8 not null, delivery_status int4, tracking_id varchar(255), weight float4, fk_recipient int8 not null, fk_sender int8 not null, primary key (id));
+create table parcel_future_hops (parcel_entity_id int8 not null, future_hops_id int8 not null);
+create table parcel_visited_hops (parcel_entity_id int8 not null, visited_hops_id int8 not null);
+create table recipient (id int8 not null, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), street varchar(255), primary key (id));
+create table warehouse_next_hop (id int8 not null, traveltime_mins int4, hop_id int8, fk_warehouse int8, primary key (id));
+alter table if exists parcel_future_hops add constraint UK_5n3ioygccxg6y7co1loncxsib unique (future_hops_id);
+alter table if exists parcel_visited_hops add constraint UK_5ckrxkay580275dbafce4itcy unique (visited_hops_id);
+alter table if exists hop add constraint FKpg83abvdhaacpduxapkgiv5o0 foreign key (location_coordinates_id) references geo_coordinate;
+alter table if exists hop_arrival add constraint FKqtmp1ixploh586cskjcelpgyr foreign key (parcel_id) references parcel;
+alter table if exists parcel add constraint FKsrfcic9pbkl7sjsa10ppn276d foreign key (fk_recipient) references recipient;
+alter table if exists parcel add constraint FK8ymexse0blcr45s32sgeqikr5 foreign key (fk_sender) references recipient;
+alter table if exists parcel_future_hops add constraint FK5nm446utyyro698bsn3mscxku foreign key (future_hops_id) references hop_arrival;
+alter table if exists parcel_future_hops add constraint FK8y8vv3tmpull0peypaqpaku9h foreign key (parcel_entity_id) references parcel;
+alter table if exists parcel_visited_hops add constraint FKg49unpi43j8aqkmb0qc5vloii foreign key (visited_hops_id) references hop_arrival;
+alter table if exists parcel_visited_hops add constraint FKb2dsbqgyhe4quhcsdefmhsupw foreign key (parcel_entity_id) references parcel;
+alter table if exists warehouse_next_hop add constraint FKqpru1kapbquxa0xbqv11rye8p foreign key (hop_id) references hop;
+alter table if exists warehouse_next_hop add constraint FKqg8xhom480r70377mpuw0k26j foreign key (fk_warehouse) references hop;
Index: openapi-spring.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/openapi-spring.iml b/openapi-spring.iml
new file mode 100644
--- /dev/null	(date 1679517926389)
+++ b/openapi-spring.iml	(date 1679517926389)
@@ -0,0 +1,125 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-web:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-autoconfigure:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-logging:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: ch.qos.logback:logback-classic:1.2.11" level="project" />
+    <orderEntry type="library" name="Maven: ch.qos.logback:logback-core:1.2.11" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-to-slf4j:2.17.2" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.logging.log4j:log4j-api:2.17.2" level="project" />
+    <orderEntry type="library" name="Maven: org.slf4j:jul-to-slf4j:1.7.36" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.annotation:jakarta.annotation-api:1.3.5" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-json:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-tomcat:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.65" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.65" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-web:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-webmvc:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-aop:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-context:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-expression:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-commons:2.7.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-core:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-jcl:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-beans:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.slf4j:slf4j-api:1.7.36" level="project" />
+    <orderEntry type="library" name="Maven: org.springdoc:springdoc-openapi-ui:1.6.8" level="project" />
+    <orderEntry type="library" name="Maven: org.springdoc:springdoc-openapi-webmvc-core:1.6.8" level="project" />
+    <orderEntry type="library" name="Maven: org.springdoc:springdoc-openapi-common:1.6.8" level="project" />
+    <orderEntry type="library" name="Maven: io.swagger.core.v3:swagger-core:2.2.0" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.commons:commons-lang3:3.12.0" level="project" />
+    <orderEntry type="library" name="Maven: io.swagger.core.v3:swagger-annotations:2.2.0" level="project" />
+    <orderEntry type="library" name="Maven: io.swagger.core.v3:swagger-models:2.2.0" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.validation:jakarta.validation-api:2.0.2" level="project" />
+    <orderEntry type="library" name="Maven: org.webjars:swagger-ui:4.10.3" level="project" />
+    <orderEntry type="library" name="Maven: org.webjars:webjars-locator-core:0.50" level="project" />
+    <orderEntry type="library" name="Maven: io.github.classgraph:classgraph:4.8.143" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.findbugs:jsr305:3.0.2" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: org.yaml:snakeyaml:1.30" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-core:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.4" level="project" />
+    <orderEntry type="library" name="Maven: org.openapitools:jackson-databind-nullable:0.2.2" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-validation:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.65" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-starter-test:2.7.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test:2.7.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.7.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: com.jayway.jsonpath:json-path:2.7.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: net.minidev:json-smart:2.4.8" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: net.minidev:accessors-smart:2.4.8" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.ow2.asm:asm:9.1" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.activation:jakarta.activation-api:1.2.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.assertj:assertj-core:3.22.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest:2.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter:5.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.opentest4j:opentest4j:1.2.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-commons:1.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.apiguardian:apiguardian-api:1.1.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-params:5.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-engine:5.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-engine:1.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-core:4.5.1" level="project" />
+    <orderEntry type="library" name="Maven: net.bytebuddy:byte-buddy:1.12.17" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: net.bytebuddy:byte-buddy-agent:1.12.17" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.objenesis:objenesis:3.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-junit-jupiter:4.5.1" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.skyscreamer:jsonassert:1.5.1" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework:spring-test:5.3.23" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.xmlunit:xmlunit-core:2.9.0" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-data-jpa:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-aop:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: org.aspectj:aspectjweaver:1.9.7" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.boot:spring-boot-starter-jdbc:2.7.4" level="project" />
+    <orderEntry type="library" name="Maven: com.zaxxer:HikariCP:4.0.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-jdbc:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.transaction:jakarta.transaction-api:1.3.3" level="project" />
+    <orderEntry type="library" name="Maven: jakarta.persistence:jakarta.persistence-api:2.2.3" level="project" />
+    <orderEntry type="library" name="Maven: org.hibernate:hibernate-core:5.6.11.Final" level="project" />
+    <orderEntry type="library" name="Maven: antlr:antlr:2.7.7" level="project" />
+    <orderEntry type="library" name="Maven: org.jboss:jandex:2.4.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.hibernate.common:hibernate-commons-annotations:5.1.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.glassfish.jaxb:jaxb-runtime:2.3.6" level="project" />
+    <orderEntry type="library" name="Maven: org.glassfish.jaxb:txw2:2.3.6" level="project" />
+    <orderEntry type="library" name="Maven: com.sun.istack:istack-commons-runtime:3.0.12" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: com.sun.activation:jakarta.activation:1.2.2" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-jpa:2.7.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-orm:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-tx:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-aspects:5.3.23" level="project" />
+    <orderEntry type="library" name="Maven: org.projectlombok:lombok:1.18.24" level="project" />
+    <orderEntry type="library" name="Maven: org.mapstruct:mapstruct-processor:1.5.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.mapstruct:mapstruct:1.5.2.Final" level="project" />
+    <orderEntry type="library" name="Maven: javax.validation:validation-api:2.0.1.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.hibernate.validator:hibernate-validator:6.0.20.Final" level="project" />
+    <orderEntry type="library" name="Maven: org.jboss.logging:jboss-logging:3.4.3.Final" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml:classmate:1.5.1" level="project" />
+    <orderEntry type="library" name="Maven: org.glassfish:javax.el:3.0.0" level="project" />
+    <orderEntry type="library" name="Maven: org.postgresql:postgresql:42.5.0" level="project" />
+    <orderEntry type="library" scope="RUNTIME" name="Maven: org.checkerframework:checker-qual:3.5.0" level="project" />
+    <orderEntry type="library" name="Maven: com.h2database:h2:2.1.214" level="project" />
+    <orderEntry type="library" name="Maven: org.json:json:20220924" level="project" />
+    <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-databind:2.13.3" level="project" />
+    <orderEntry type="library" name="Maven: com.mapbox.mapboxsdk:mapbox-sdk-geojson:3.0.1" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.gson:gson:2.9.1" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/libraries/Maven__com_fasterxml_jackson_core_jackson_annotations_2_13_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_annotations_2_13_4.xml b/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_annotations_2_13_4.xml
new file mode 100644
--- /dev/null	(date 1679849549699)
+++ b/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_annotations_2_13_4.xml	(date 1679849549699)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-annotations/2.13.4/jackson-annotations-2.13.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-annotations/2.13.4/jackson-annotations-2.13.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-annotations/2.13.4/jackson-annotations-2.13.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_3.xml b/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_4.xml
rename from .idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_3.xml
rename to .idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_4.xml
--- a/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_3.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_13_4.xml	(date 1679849549722)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.3">
+  <library name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.3/jackson-datatype-jdk8-2.13.3.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.3/jackson-datatype-jdk8-2.13.3-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.3/jackson-datatype-jdk8-2.13.3-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_3.xml b/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_4.xml
rename from .idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_3.xml
rename to .idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_4.xml
--- a/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_3.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_13_4.xml	(date 1679849549730)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3">
+  <library name="Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.3/jackson-datatype-jsr310-2.13.3.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.3/jackson-datatype-jsr310-2.13.3-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.3/jackson-datatype-jsr310-2.13.3-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/dto/Error.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\nimport java.util.Objects;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * Error\r\n */\r\n\r\n@JsonTypeName(\"error\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class Error {\r\n\r\n  @JsonProperty(\"errorMessage\")\r\n  private String errorMessage;\r\n\r\n  public Error errorMessage(String errorMessage) {\r\n    this.errorMessage = errorMessage;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The error message.\r\n   * @return errorMessage\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"errorMessage\", description = \"The error message.\", required = true)\r\n  public String getErrorMessage() {\r\n    return errorMessage;\r\n  }\r\n\r\n  public void setErrorMessage(String errorMessage) {\r\n    this.errorMessage = errorMessage;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    Error error = (Error) o;\r\n    return Objects.equals(this.errorMessage, error.errorMessage);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(errorMessage);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Error {\\n\");\r\n    sb.append(\"    errorMessage: \").append(toIndentedString(errorMessage)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/Error.java b/src/main/java/at/fhtw/swen3/services/dto/Error.java
--- a/src/main/java/at/fhtw/swen3/services/dto/Error.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/Error.java	(date 1679847945284)
@@ -1,4 +1,5 @@
 package at.fhtw.swen3.services.dto;
+
 import java.util.Objects;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
@@ -14,7 +15,7 @@
  */
 
 @JsonTypeName("error")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class Error {
 
   @JsonProperty("errorMessage")
@@ -28,8 +29,8 @@
   /**
    * The error message.
    * @return errorMessage
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "errorMessage", description = "The error message.", required = true)
   public String getErrorMessage() {
     return errorMessage;
Index: .idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_3.xml b/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_4.xml
rename from .idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_3.xml
rename to .idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_4.xml
--- a/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_3.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_13_4.xml	(date 1679849549708)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: com.fasterxml.jackson.core:jackson-core:2.13.3">
+  <library name="Maven: com.fasterxml.jackson.core:jackson-core:2.13.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-core/2.13.3/jackson-core-2.13.3.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-core/2.13.3/jackson-core-2.13.3-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-core/2.13.3/jackson-core-2.13.3-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_3.xml b/.idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_4.xml
rename from .idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_3.xml
rename to .idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_4.xml
--- a/.idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_3.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_yaml_2_13_4.xml	(date 1679849549715)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3">
+  <library name="Maven: com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.13.3/jackson-dataformat-yaml-2.13.3.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.13.4/jackson-dataformat-yaml-2.13.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.13.3/jackson-dataformat-yaml-2.13.3-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.13.4/jackson-dataformat-yaml-2.13.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.13.3/jackson-dataformat-yaml-2.13.3-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.13.4/jackson-dataformat-yaml-2.13.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/dto/GeoCoordinate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * GeoCoordinate\r\n */\r\n\r\n@JsonTypeName(\"geoCoordinate\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class GeoCoordinate {\r\n\r\n  @JsonProperty(\"lat\")\r\n  private Double lat;\r\n\r\n  @JsonProperty(\"lon\")\r\n  private Double lon;\r\n\r\n  public GeoCoordinate lat(Double lat) {\r\n    this.lat = lat;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Latitude of the coordinate.\r\n   * @return lat\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"lat\", description = \"Latitude of the coordinate.\", required = true)\r\n  public Double getLat() {\r\n    return lat;\r\n  }\r\n\r\n  public void setLat(Double lat) {\r\n    this.lat = lat;\r\n  }\r\n\r\n  public GeoCoordinate lon(Double lon) {\r\n    this.lon = lon;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Longitude of the coordinate.\r\n   * @return lon\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"lon\", description = \"Longitude of the coordinate.\", required = true)\r\n  public Double getLon() {\r\n    return lon;\r\n  }\r\n\r\n  public void setLon(Double lon) {\r\n    this.lon = lon;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    GeoCoordinate geoCoordinate = (GeoCoordinate) o;\r\n    return Objects.equals(this.lat, geoCoordinate.lat) &&\r\n        Objects.equals(this.lon, geoCoordinate.lon);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(lat, lon);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class GeoCoordinate {\\n\");\r\n    sb.append(\"    lat: \").append(toIndentedString(lat)).append(\"\\n\");\r\n    sb.append(\"    lon: \").append(toIndentedString(lon)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/GeoCoordinate.java b/src/main/java/at/fhtw/swen3/services/dto/GeoCoordinate.java
--- a/src/main/java/at/fhtw/swen3/services/dto/GeoCoordinate.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/GeoCoordinate.java	(date 1679847950794)
@@ -7,6 +7,11 @@
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
 
+import lombok.Builder;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+
+
 
 import javax.annotation.Generated;
 
@@ -15,7 +20,10 @@
  */
 
 @JsonTypeName("geoCoordinate")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Builder
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
+@Data
+@AllArgsConstructor
 public class GeoCoordinate {
 
   @JsonProperty("lat")
@@ -32,8 +40,8 @@
   /**
    * Latitude of the coordinate.
    * @return lat
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "lat", description = "Latitude of the coordinate.", required = true)
   public Double getLat() {
     return lat;
@@ -51,8 +59,8 @@
   /**
    * Longitude of the coordinate.
    * @return lon
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "lon", description = "Longitude of the coordinate.", required = true)
   public Double getLon() {
     return lon;
@@ -72,7 +80,7 @@
     }
     GeoCoordinate geoCoordinate = (GeoCoordinate) o;
     return Objects.equals(this.lat, geoCoordinate.lat) &&
-        Objects.equals(this.lon, geoCoordinate.lon);
+            Objects.equals(this.lon, geoCoordinate.lon);
   }
 
   @Override
Index: src/main/java/at/fhtw/swen3/configuration/HomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.configuration;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\n\r\n/**\r\n * Home redirection to OpenAPI api documentation\r\n */\r\n@Controller\r\npublic class HomeController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index() {\r\n        return \"redirect:swagger-ui.html\";\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/configuration/HomeController.java b/src/main/java/at/fhtw/swen3/configuration/HomeController.java
--- a/src/main/java/at/fhtw/swen3/configuration/HomeController.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/configuration/HomeController.java	(date 1679848148298)
@@ -1,10 +1,7 @@
 package at.fhtw.swen3.configuration;
 
-import org.springframework.context.annotation.Bean;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.annotation.GetMapping;
 
 /**
  * Home redirection to OpenAPI api documentation
Index: .idea/libraries/Maven__com_h2database_h2_2_1_214.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_h2database_h2_2_1_214.xml b/.idea/libraries/Maven__com_h2database_h2_2_1_214.xml
new file mode 100644
--- /dev/null	(date 1679849549755)
+++ b/.idea/libraries/Maven__com_h2database_h2_2_1_214.xml	(date 1679849549755)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.h2database:h2:2.1.214">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/h2database/h2/2.1.214/h2-2.1.214.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/h2database/h2/2.1.214/h2-2.1.214-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/h2database/h2/2.1.214/h2-2.1.214-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_beust_jcommander_1_12.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_beust_jcommander_1_12.xml b/.idea/libraries/Maven__com_beust_jcommander_1_12.xml
new file mode 100644
--- /dev/null	(date 1679849854845)
+++ b/.idea/libraries/Maven__com_beust_jcommander_1_12.xml	(date 1679849854845)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.beust:jcommander:1.12">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/beust/jcommander/1.12/jcommander-1.12.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/beust/jcommander/1.12/jcommander-1.12-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/beust/jcommander/1.12/jcommander-1.12-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/configuration/SpringDocConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.configuration;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\nimport io.swagger.v3.oas.models.OpenAPI;\r\nimport io.swagger.v3.oas.models.info.Info;\r\nimport io.swagger.v3.oas.models.info.Contact;\r\nimport io.swagger.v3.oas.models.info.License;\r\nimport io.swagger.v3.oas.models.Components;\r\nimport io.swagger.v3.oas.models.security.SecurityScheme;\r\n\r\n@Configuration\r\npublic class SpringDocConfiguration {\r\n\r\n    @Bean\r\n    OpenAPI apiInfo() {\r\n        return new OpenAPI()\r\n                .info(\r\n                        new Info()\r\n                                .title(\"Parcel Logistics Service\")\r\n                                .description(\"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\")\r\n                                .contact(\r\n                                        new Contact()\r\n                                                .name(\"SKS\")\r\n                                                .url(\"http://www.technikum-wien.at/\")\r\n                                )\r\n                                .version(\"1.22.1\")\r\n                )\r\n        ;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/configuration/SpringDocConfiguration.java b/src/main/java/at/fhtw/swen3/configuration/SpringDocConfiguration.java
--- a/src/main/java/at/fhtw/swen3/configuration/SpringDocConfiguration.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/configuration/SpringDocConfiguration.java	(date 1679848153918)
@@ -6,9 +6,6 @@
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.info.Contact;
-import io.swagger.v3.oas.models.info.License;
-import io.swagger.v3.oas.models.Components;
-import io.swagger.v3.oas.models.security.SecurityScheme;
 
 @Configuration
 public class SpringDocConfiguration {
@@ -27,6 +24,6 @@
                                 )
                                 .version("1.22.1")
                 )
-        ;
+                ;
     }
 }
\ No newline at end of file
Index: .idea/libraries/Maven__junit_junit_4_13_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__junit_junit_4_13_2.xml b/.idea/libraries/Maven__junit_junit_4_13_2.xml
new file mode 100644
--- /dev/null	(date 1679849854854)
+++ b/.idea/libraries/Maven__junit_junit_4_13_2.xml	(date 1679849854854)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: junit:junit:4.13.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.2/junit-4.13.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.2/junit-4.13.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.2/junit-4.13.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_mapbox_mapboxsdk_mapbox_sdk_geojson_3_0_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_mapbox_mapboxsdk_mapbox_sdk_geojson_3_0_1.xml b/.idea/libraries/Maven__com_mapbox_mapboxsdk_mapbox_sdk_geojson_3_0_1.xml
new file mode 100644
--- /dev/null	(date 1679849549763)
+++ b/.idea/libraries/Maven__com_mapbox_mapboxsdk_mapbox_sdk_geojson_3_0_1.xml	(date 1679849549763)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.mapbox.mapboxsdk:mapbox-sdk-geojson:3.0.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/mapbox/mapboxsdk/mapbox-sdk-geojson/3.0.1/mapbox-sdk-geojson-3.0.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/mapbox/mapboxsdk/mapbox-sdk-geojson/3.0.1/mapbox-sdk-geojson-3.0.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/mapbox/mapboxsdk/mapbox-sdk-geojson/3.0.1/mapbox-sdk-geojson-3.0.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_3.xml b/.idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_4.xml
rename from .idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_3.xml
rename to .idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_4.xml
--- a/.idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_3.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_13_4.xml	(date 1679849549738)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.3">
+  <library name="Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.3/jackson-module-parameter-names-2.13.3.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.3/jackson-module-parameter-names-2.13.3-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.3/jackson-module-parameter-names-2.13.3-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/dto/NewParcelInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\n\r\nimport at.fhtw.swen3.persistence.entity.Parcel;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\n\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.GenerationType;\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.springframework.data.annotation.Id;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * NewParcelInfo\r\n */\r\n@Getter @Setter\r\n@Parcel\r\n@JsonTypeName(\"newParcelInfo\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class NewParcelInfo {\r\n  @Id @GeneratedValue(strategy = GenerationType.IDENTITY, generator = \"native\")\r\n\r\n  @JsonProperty(\"trackingId\")\r\n  @Column\r\n  private String trackingId;\r\n\r\n  public NewParcelInfo trackingId(String trackingId) {\r\n    this.trackingId = trackingId;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The tracking ID of the parcel. \r\n   * @return trackingId\r\n  */\r\n  @Pattern(regexp = \"^[A-Z0-9]{9}$\") \r\n  @Schema(name = \"trackingId\", example = \"PYJRB4HZ6\", description = \"The tracking ID of the parcel. \", required = false)\r\n  public String getTrackingId() {\r\n    return trackingId;\r\n  }\r\n  public void setTrackingId(String trackingId) {\r\n    this.trackingId = trackingId;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    NewParcelInfo newParcelInfo = (NewParcelInfo) o;\r\n    return Objects.equals(this.trackingId, newParcelInfo.trackingId);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(trackingId);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class NewParcelInfo {\\n\");\r\n    sb.append(\"    trackingId: \").append(toIndentedString(trackingId)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/NewParcelInfo.java b/src/main/java/at/fhtw/swen3/services/dto/NewParcelInfo.java
--- a/src/main/java/at/fhtw/swen3/services/dto/NewParcelInfo.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/NewParcelInfo.java	(date 1679847970266)
@@ -1,20 +1,12 @@
 package at.fhtw.swen3.services.dto;
 
 import java.util.Objects;
-
-import at.fhtw.swen3.persistence.entity.Parcel;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
 import javax.validation.constraints.*;
 import io.swagger.v3.oas.annotations.media.Schema;
-import lombok.Getter;
-import lombok.Setter;
-import org.springframework.data.annotation.Id;
+import lombok.Builder;
 
 
 import javax.annotation.Generated;
@@ -22,15 +14,14 @@
 /**
  * NewParcelInfo
  */
-@Getter @Setter
-@Parcel
+
 @JsonTypeName("newParcelInfo")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
+@Builder
 public class NewParcelInfo {
-  @Id @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "native")
 
   @JsonProperty("trackingId")
-  @Column
+  @Pattern(regexp = "^[A-Z0-9]{9}$", message = "must match regex (9 digits: upper case and numbers)")
   private String trackingId;
 
   public NewParcelInfo trackingId(String trackingId) {
@@ -39,14 +30,15 @@
   }
 
   /**
-   * The tracking ID of the parcel. 
+   * The tracking ID of the parcel.
    * @return trackingId
-  */
-  @Pattern(regexp = "^[A-Z0-9]{9}$") 
+   */
+  @Pattern(regexp = "^[A-Z0-9]{9}$")
   @Schema(name = "trackingId", example = "PYJRB4HZ6", description = "The tracking ID of the parcel. ", required = false)
   public String getTrackingId() {
     return trackingId;
   }
+
   public void setTrackingId(String trackingId) {
     this.trackingId = trackingId;
   }
Index: .idea/libraries/Maven__com_google_code_gson_gson_2_9_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__com_google_code_gson_gson_2_9_1.xml b/.idea/libraries/Maven__com_google_code_gson_gson_2_9_1.xml
new file mode 100644
--- /dev/null	(date 1679849549746)
+++ b/.idea/libraries/Maven__com_google_code_gson_gson_2_9_1.xml	(date 1679849549746)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.code.gson:gson:2.9.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.9.1/gson-2.9.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.9.1/gson-2.9.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.9.1/gson-2.9.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_testng_testng_6_1_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_testng_testng_6_1_1.xml b/.idea/libraries/Maven__org_testng_testng_6_1_1.xml
new file mode 100644
--- /dev/null	(date 1679849854882)
+++ b/.idea/libraries/Maven__org_testng_testng_6_1_1.xml	(date 1679849854882)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.testng:testng:6.1.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/testng/testng/6.1.1/testng-6.1.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/testng/testng/6.1.1/testng-6.1.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/testng/testng/6.1.1/testng-6.1.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_10.xml b/.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_17.xml
rename from .idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_10.xml
rename to .idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_17.xml
--- a/.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_10.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_12_17.xml	(date 1679849549789)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: net.bytebuddy:byte-buddy-agent:1.12.10">
+  <library name="Maven: net.bytebuddy:byte-buddy-agent:1.12.17">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.12.10/byte-buddy-agent-1.12.10.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.12.17/byte-buddy-agent-1.12.17.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.12.10/byte-buddy-agent-1.12.10-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.12.17/byte-buddy-agent-1.12.17-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.12.10/byte-buddy-agent-1.12.10-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.12.17/byte-buddy-agent-1.12.17-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_core_9_0_65.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_core_9_0_65.xml b/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_core_9_0_65.xml
new file mode 100644
--- /dev/null	(date 1679849549798)
+++ b/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_core_9_0_65.xml	(date 1679849549798)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.65">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-core/9.0.65/tomcat-embed-core-9.0.65.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-core/9.0.65/tomcat-embed-core-9.0.65-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-core/9.0.65/tomcat-embed-core-9.0.65-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__javax_validation_validation_api_2_0_1_Final.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__javax_validation_validation_api_2_0_1_Final.xml b/.idea/libraries/Maven__javax_validation_validation_api_2_0_1_Final.xml
new file mode 100644
--- /dev/null	(date 1679849549771)
+++ b/.idea/libraries/Maven__javax_validation_validation_api_2_0_1_Final.xml	(date 1679849549771)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: javax.validation:validation-api:2.0.1.Final">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_beanshell_bsh_2_0b4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_beanshell_bsh_2_0b4.xml b/.idea/libraries/Maven__org_beanshell_bsh_2_0b4.xml
new file mode 100644
--- /dev/null	(date 1679849854863)
+++ b/.idea/libraries/Maven__org_beanshell_bsh_2_0b4.xml	(date 1679849854863)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.beanshell:bsh:2.0b4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/beanshell/bsh/2.0b4/bsh-2.0b4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/beanshell/bsh/2.0b4/bsh-2.0b4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/beanshell/bsh/2.0b4/bsh-2.0b4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_hamcrest_hamcrest_core_2_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_hamcrest_hamcrest_core_2_2.xml b/.idea/libraries/Maven__org_hamcrest_hamcrest_core_2_2.xml
new file mode 100644
--- /dev/null	(date 1679849854873)
+++ b/.idea/libraries/Maven__org_hamcrest_hamcrest_core_2_2.xml	(date 1679849854873)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.hamcrest:hamcrest-core:2.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_10.xml b/.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_17.xml
rename from .idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_10.xml
rename to .idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_17.xml
--- a/.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_10.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_12_17.xml	(date 1679849549780)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: net.bytebuddy:byte-buddy:1.12.10">
+  <library name="Maven: net.bytebuddy:byte-buddy:1.12.17">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.12.17/byte-buddy-1.12.17.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.12.17/byte-buddy-1.12.17-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.12.10/byte-buddy-1.12.10-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.12.17/byte-buddy-1.12.17-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_checkerframework_checker_qual_3_5_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_checkerframework_checker_qual_3_5_0.xml b/.idea/libraries/Maven__org_checkerframework_checker_qual_3_5_0.xml
new file mode 100644
--- /dev/null	(date 1679849549822)
+++ b/.idea/libraries/Maven__org_checkerframework_checker_qual_3_5_0.xml	(date 1679849549822)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.checkerframework:checker-qual:3.5.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_glassfish_javax_el_3_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_glassfish_javax_el_3_0_0.xml b/.idea/libraries/Maven__org_glassfish_javax_el_3_0_0.xml
new file mode 100644
--- /dev/null	(date 1679849549831)
+++ b/.idea/libraries/Maven__org_glassfish_javax_el_3_0_0.xml	(date 1679849549831)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.glassfish:javax.el:3.0.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/glassfish/javax.el/3.0.0/javax.el-3.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/glassfish/javax.el/3.0.0/javax.el-3.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/glassfish/javax.el/3.0.0/javax.el-3.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_63.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_63.xml b/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_65.xml
rename from .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_63.xml
rename to .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_65.xml
--- a/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_63.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_65.xml	(date 1679849549805)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.63">
+  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.65">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-el/9.0.63/tomcat-embed-el-9.0.63.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-el/9.0.65/tomcat-embed-el-9.0.65.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-el/9.0.63/tomcat-embed-el-9.0.63-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-el/9.0.65/tomcat-embed-el-9.0.65-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-el/9.0.63/tomcat-embed-el-9.0.63-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-el/9.0.65/tomcat-embed-el-9.0.65-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/OpenApiGeneratorApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3;\r\n\r\nimport com.fasterxml.jackson.databind.Module;\r\nimport org.openapitools.jackson.nullable.JsonNullableModule;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ComponentScan;\r\n\r\n//hatz\r\n\r\n@SpringBootApplication\r\n@ComponentScan(basePackages = {\"org.openapitools\", \"at.fhtw.swen3.services\" , \"at.fhtw.swen3.configuration\"})\r\npublic class OpenApiGeneratorApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(OpenApiGeneratorApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public Module jsonNullableModule() {\r\n        return new JsonNullableModule();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/OpenApiGeneratorApplication.java b/src/main/java/at/fhtw/swen3/OpenApiGeneratorApplication.java
--- a/src/main/java/at/fhtw/swen3/OpenApiGeneratorApplication.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/OpenApiGeneratorApplication.java	(date 1679848116515)
@@ -5,12 +5,8 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ComponentScan;
-
-//hatz
 
 @SpringBootApplication
-@ComponentScan(basePackages = {"org.openapitools", "at.fhtw.swen3.services" , "at.fhtw.swen3.configuration"})
 public class OpenApiGeneratorApplication {
 
     public static void main(String[] args) {
Index: .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_63.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_63.xml b/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_65.xml
rename from .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_63.xml
rename to .idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_65.xml
--- a/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_63.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_65.xml	(date 1679849549814)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.63">
+  <library name="Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.65">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.63/tomcat-embed-websocket-9.0.63.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.65/tomcat-embed-websocket-9.0.65.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.63/tomcat-embed-websocket-9.0.63-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.65/tomcat-embed-websocket-9.0.65-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.63/tomcat-embed-websocket-9.0.63-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.65/tomcat-embed-websocket-9.0.65-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_json_json_20220924.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_json_json_20220924.xml b/.idea/libraries/Maven__org_json_json_20220924.xml
new file mode 100644
--- /dev/null	(date 1679849549860)
+++ b/.idea/libraries/Maven__org_json_json_20220924.xml	(date 1679849549860)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.json:json:20220924">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/json/json/20220924/json-20220924.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/json/json/20220924/json-20220924-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/json/json/20220924/json-20220924-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_postgresql_postgresql_42_5_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_postgresql_postgresql_42_5_0.xml b/.idea/libraries/Maven__org_postgresql_postgresql_42_5_0.xml
new file mode 100644
--- /dev/null	(date 1679849549869)
+++ b/.idea/libraries/Maven__org_postgresql_postgresql_42_5_0.xml	(date 1679849549869)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.postgresql:postgresql:42.5.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/postgresql/postgresql/42.5.0/postgresql-42.5.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/postgresql/postgresql/42.5.0/postgresql-42.5.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/postgresql/postgresql/42.5.0/postgresql-42.5.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_hibernate_hibernate_core_5_6_9_Final.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_hibernate_hibernate_core_5_6_9_Final.xml b/.idea/libraries/Maven__org_hibernate_hibernate_core_5_6_11_Final.xml
rename from .idea/libraries/Maven__org_hibernate_hibernate_core_5_6_9_Final.xml
rename to .idea/libraries/Maven__org_hibernate_hibernate_core_5_6_11_Final.xml
--- a/.idea/libraries/Maven__org_hibernate_hibernate_core_5_6_9_Final.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_hibernate_hibernate_core_5_6_11_Final.xml	(date 1679849549839)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.hibernate:hibernate-core:5.6.9.Final">
+  <library name="Maven: org.hibernate:hibernate-core:5.6.11.Final">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/hibernate-core/5.6.9.Final/hibernate-core-5.6.9.Final.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/hibernate-core/5.6.11.Final/hibernate-core-5.6.11.Final.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/hibernate-core/5.6.9.Final/hibernate-core-5.6.9.Final-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/hibernate-core/5.6.11.Final/hibernate-core-5.6.11.Final-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/hibernate-core/5.6.9.Final/hibernate-core-5.6.9.Final-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/hibernate-core/5.6.11.Final/hibernate-core-5.6.11.Final-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_2_3_Final.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_2_3_Final.xml b/.idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_0_20_Final.xml
rename from .idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_2_3_Final.xml
rename to .idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_0_20_Final.xml
--- a/.idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_2_3_Final.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_hibernate_validator_hibernate_validator_6_0_20_Final.xml	(date 1679849549850)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.hibernate.validator:hibernate-validator:6.2.3.Final">
+  <library name="Maven: org.hibernate.validator:hibernate-validator:6.0.20.Final">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/validator/hibernate-validator/6.2.3.Final/hibernate-validator-6.2.3.Final.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/validator/hibernate-validator/6.0.20.Final/hibernate-validator-6.0.20.Final.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/validator/hibernate-validator/6.2.3.Final/hibernate-validator-6.2.3.Final-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/validator/hibernate-validator/6.0.20.Final/hibernate-validator-6.0.20.Final-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/validator/hibernate-validator/6.2.3.Final/hibernate-validator-6.2.3.Final-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/hibernate/validator/hibernate-validator/6.0.20.Final/hibernate-validator-6.0.20.Final-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_7_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_7_4.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_7_4.xml
new file mode 100644
--- /dev/null	(date 1679849549893)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_7_4.xml	(date 1679849549893)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-autoconfigure:2.7.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-autoconfigure/2.7.4/spring-boot-autoconfigure-2.7.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-autoconfigure/2.7.4/spring-boot-autoconfigure-2.7.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-autoconfigure/2.7.4/spring-boot-autoconfigure-2.7.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/persistence/repositories/RecipientRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/persistence/repositories/RecipientRepositoryTest.java b/src/test/java/at/fhtw/swen3/persistence/repositories/RecipientRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1679517625473)
+++ b/src/test/java/at/fhtw/swen3/persistence/repositories/RecipientRepositoryTest.java	(date 1679517625473)
@@ -0,0 +1,59 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+
+@SpringBootTest
+@Transactional
+class RecipientRepositoryTest {
+    @Autowired
+    private RecipientRepository recipientRepository;
+
+    @Test
+    public void should_store_a_recipient() {
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+
+        RecipientEntity createdRecipient = recipientRepository.save(recipient);
+
+        assertThat(createdRecipient).hasFieldOrPropertyWithValue("name", "recipientname");
+        assertEquals(recipientRepository.count(), 1);
+    }
+
+    @Test
+    void should_find_recipient_by_name() {
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+        RecipientEntity sender = RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build();
+        RecipientEntity sender2 = RecipientEntity.builder().name("sendername").street("Handelskai 300a").postalCode("A-1020").city("Wien").country("Austria").build();
+        recipientRepository.save(recipient);
+        recipientRepository.save(sender);
+        recipientRepository.save(sender2);
+        List<RecipientEntity> senders = new ArrayList<>();
+        senders.add(sender);
+        senders.add(sender2);
+
+        List<RecipientEntity> foundRecipient = recipientRepository.findByName("sendername");
+
+        assertThat(foundRecipient).isEqualTo(senders);
+    }
+
+    @Test
+    public void should_delete_all_recipients() {
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+        RecipientEntity sender = RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build();
+        RecipientEntity sender2 = RecipientEntity.builder().name("sendername").street("Handelskai 300a").postalCode("A-1020").city("Wien").country("Austria").build();
+
+        recipientRepository.deleteAll();
+        assertThat(recipientRepository.findAll()).isEmpty();
+    }
+
+
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_7_4.xml	(date 1679849549902)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-starter:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.7.0/spring-boot-starter-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.7.4/spring-boot-starter-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.7.0/spring-boot-starter-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.7.4/spring-boot-starter-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.7.0/spring-boot-starter-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.7.4/spring-boot-starter-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/persistence/repositories/TruckRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/persistence/repositories/TruckRepositoryTest.java b/src/test/java/at/fhtw/swen3/persistence/repositories/TruckRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1679517625474)
+++ b/src/test/java/at/fhtw/swen3/persistence/repositories/TruckRepositoryTest.java	(date 1679517625474)
@@ -0,0 +1,56 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.GeoCoordinateEntity;
+import at.fhtw.swen3.persistence.entities.TruckEntity;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.transaction.annotation.Transactional;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+
+@SpringBootTest
+@Transactional
+class TruckRepositoryTest {
+    @Autowired
+    private TruckRepository truckRepository;
+
+    @Test
+    public void should_find_no_trucks_if_repository_is_empty() {
+        Iterable<TruckEntity> hops = truckRepository.findAll();
+
+        assertThat(hops).isEmpty();
+    }
+
+    @Test
+    public void should_store_a_truck() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        TruckEntity truck = TruckEntity.builder()
+                //attributes from superclass hop:
+                .hopType("truck")
+                .code("EFGH34")
+                .description("test description")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate)
+                .regionGeoJson("GeoJsonString").numberPlate("W-747200").build();    //from truckentity itself
+
+        TruckEntity createdTruck = truckRepository.save(truck);
+        assertThat(createdTruck).hasFieldOrPropertyWithValue("regionGeoJson", "GeoJsonString");
+        assertThat(createdTruck).hasFieldOrPropertyWithValue("numberPlate", "W-747200");
+        assertEquals(truckRepository.count(),1);
+    }
+
+    @Test
+    public void should_find_truck_by_id() {
+        TruckEntity truck1 = TruckEntity.builder().regionGeoJson("GeoJsonString 1").numberPlate("W-747200").build();
+        TruckEntity truck2 = TruckEntity.builder().regionGeoJson("GeoJsonString 2").numberPlate("W-747201").build();
+        truckRepository.save(truck1);
+        truckRepository.save(truck2);
+
+        TruckEntity foundTruck = truckRepository.findById(truck2.getId()).get();
+        assertThat(foundTruck).isEqualTo(truck2);
+    }
+
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml b/.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_1.xml
rename from .idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml
rename to .idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_1.xml
--- a/.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_1.xml	(date 1679849549878)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.skyscreamer:jsonassert:1.5.0">
+  <library name="Maven: org.skyscreamer:jsonassert:1.5.1">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=5000\r\nspring.jackson.date-format=at.fhtw.swen3.RFC3339DateFormat\r\nspring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration \r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/resources/application.properties	(date 1679849081877)
@@ -1,6 +1,20 @@
 server.port=5000
 spring.jackson.date-format=at.fhtw.swen3.RFC3339DateFormat
 spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
-spring.datasource.driver-class-name=com.mysql.jdbc.Driver
-spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration 
+
+# Database
+#spring.datasource.driver-class-name=org.postgresql.Driver
+#spring.datasource.username=postgres
+#spring.datasource.password=mysecretpassword
+#spring.datasource.url=jdbc:postgresql://localhost:5432/parcel_trackn_trace_db
 
+#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
+#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
+#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
+
+
+spring.datasource.url=jdbc:h2:mem:testdb
+spring.datasource.driverClassName=org.h2.Driver
+spring.datasource.username=sa
+spring.datasource.password=password
+spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_2_7_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_2_7_4.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_2_7_4.xml
new file mode 100644
--- /dev/null	(date 1679849549886)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_2_7_4.xml	(date 1679849549886)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot:2.7.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot/2.7.4/spring-boot-2.7.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot/2.7.4/spring-boot-2.7.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot/2.7.4/spring-boot-2.7.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseRepositoryTest.java b/src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1679517625475)
+++ b/src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseRepositoryTest.java	(date 1679517625475)
@@ -0,0 +1,87 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.GeoCoordinateEntity;
+import at.fhtw.swen3.persistence.entities.WarehouseEntity;
+import at.fhtw.swen3.persistence.entities.WarehouseNextHopsEntity;
+import org.junit.jupiter.api.Test;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+@SpringBootTest
+@Transactional
+class WarehouseRepositoryTest {
+    @Autowired
+    private WarehouseRepository warehouseRepository;
+    private @Mock WarehouseNextHopsEntity warehouseNextHop;
+    private final List<WarehouseNextHopsEntity> nextHops = Arrays.asList(warehouseNextHop, warehouseNextHop, warehouseNextHop);
+
+    @Test
+    public void should_find_no_warehouse_if_repository_is_empty() {
+        Iterable<WarehouseEntity> warehouses = warehouseRepository.findAll();
+
+        assertThat(warehouses).isEmpty();
+    }
+
+    @Test
+    public void should_store_a_warehouse() {
+        //WarehouseEntity warehouse = WarehouseEntity.builder().level(2).nextHops(nextHops).build();
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        WarehouseEntity warehouse = WarehouseEntity.builder()
+                //attributes from superclass hop:
+                .hopType("warehouse")
+                .code("ABCD12")
+                .description("test description")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate)
+                .level(2).nextHops(nextHops).build();   //from warehouse itself
+
+        WarehouseEntity createdWarehouse = warehouseRepository.save(warehouse);
+        assertThat(createdWarehouse).hasFieldOrPropertyWithValue("level", 2);
+        assertEquals(warehouseRepository.count(),1);
+    }
+
+    @Test
+    public void should_delete_warehouse_by_id() {
+        GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        //WarehouseEntity warehouse1 = WarehouseEntity.builder().level(5).nextHops(nextHops).build();
+        //WarehouseEntity warehouse2 = WarehouseEntity.builder().level(1).nextHops(nextHops).build();
+
+        WarehouseEntity warehouse1 = WarehouseEntity.builder()
+                //attributes from superclass hop:
+                .hopType("warehouse")
+                .code("ABCD12")
+                .description("test description")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate)
+                .level(5).nextHops(nextHops).build();   //from warehouse itself
+
+        WarehouseEntity warehouse2 = WarehouseEntity.builder()
+                //attributes from superclass hop:
+                .hopType("warehouse")
+                .code("ABCD12")
+                .description("test description")
+                .processingDelayMins(300)
+                .locationName("Wien")
+                .locationCoordinates(geoCoordinate)
+                .level(1).nextHops(nextHops).build();   //from warehouse itself
+
+        warehouseRepository.save(warehouse1);
+        warehouseRepository.save(warehouse2);
+
+        warehouseRepository.deleteById(warehouse1.getId());
+
+        Iterable<WarehouseEntity> hops = warehouseRepository.findAll();
+
+        assertThat(hops).hasSize(1).contains(warehouse2);
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_4.xml	(date 1679849549927)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-jdbc:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-json:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-jdbc/2.7.0/spring-boot-starter-jdbc-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-json/2.7.4/spring-boot-starter-json-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-jdbc/2.7.0/spring-boot-starter-jdbc-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-json/2.7.4/spring-boot-starter-json-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-jdbc/2.7.0/spring-boot-starter-jdbc-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-json/2.7.4/spring-boot-starter-json-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/test.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/java\" isTestSource=\"true\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/test.iml b/src/test/test.iml
--- a/src/test/test.iml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/test/test.iml	(date 1679849897700)
@@ -7,5 +7,28 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module" module-name="main" scope="TEST" />
+    <orderEntry type="module-library" scope="TEST">
+      <library name="testng">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/testng/testng/7.1.0/testng-7.1.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/com/beust/jcommander/1.72/jcommander-1.72.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/com/google/inject/guice/4.1.0/guice-4.1.0-no_aop.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/javax/inject/javax.inject/1/javax.inject-1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/aopalliance/aopalliance/1.0/aopalliance-1.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/19.0/guava-19.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.21/snakeyaml-1.21.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.8.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.projectlombok:lombok:1.18.24" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework:spring-beans:5.3.20" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework.boot:spring-boot-test:2.7.4" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework:spring-web:5.3.23" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.springframework:spring-tx:5.3.20" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: com.mapbox.mapboxsdk:mapbox-sdk-geojson:3.0.1" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/mapper/ParcelMapperTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/mapper/ParcelMapperTest.java b/src/test/java/at/fhtw/swen3/services/mapper/ParcelMapperTest.java
new file mode 100644
--- /dev/null	(date 1679848414578)
+++ b/src/test/java/at/fhtw/swen3/services/mapper/ParcelMapperTest.java	(date 1679848414578)
@@ -0,0 +1,108 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.services.dto.HopArrival;
+import at.fhtw.swen3.services.dto.NewParcelInfo;
+import at.fhtw.swen3.services.dto.Parcel;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import org.junit.jupiter.api.Test;
+import org.mockito.Mock;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class ParcelMapperTest {
+
+    ParcelMapperImpl parcelMapper = new ParcelMapperImpl();
+    private @Mock HopArrivalEntity hopArrival;
+    private final List<HopArrivalEntity> visitedHops = Arrays.asList(hopArrival, hopArrival, hopArrival);
+    private final List<HopArrivalEntity> futuredHops = Arrays.asList(hopArrival, hopArrival, hopArrival);
+
+    //for Test "toTrackingInfoDto", because visitedHops and futureHops are List of HopArrivals after mapping (not List of HopArrivalEntity)
+    private @Mock HopArrival hopArrivalafterMapping;
+    private final List<HopArrival> hopArrivals = Arrays.asList(hopArrivalafterMapping, hopArrivalafterMapping, hopArrivalafterMapping);
+
+    protected void setUp() throws Exception {
+    }
+
+    @Test
+    void from() {
+
+        Parcel parcel = Parcel.builder()
+                .weight(0.3f)
+                .build();
+        NewParcelInfo newParcelInfo = NewParcelInfo.builder()
+                .trackingId("PYJRB4HZ6")
+                .build();
+        TrackingInformation trackingInformation = TrackingInformation.builder()
+                .state(TrackingInformation.StateEnum.DELIVERED)
+                .build();
+
+        ParcelEntity mappedEntity = parcelMapper.from(parcel, newParcelInfo, trackingInformation);
+        assertEquals(mappedEntity.getWeight(), parcel.getWeight());
+        assertEquals(mappedEntity.getTrackingId(), newParcelInfo.getTrackingId());
+        assertEquals(mappedEntity.getDeliveryStatus(), trackingInformation.getState());
+    }
+
+    @Test
+    void toParcelDto() {
+        ParcelEntity parcelEntity = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
+                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(visitedHops)
+                .futureHops(futuredHops)
+                .build();
+
+        //DTO generated by ParcelMapper
+        Parcel mappedParcel = parcelMapper.toParcelDto(parcelEntity);
+
+        assertEquals(mappedParcel.getWeight(), parcelEntity.getWeight());
+        assertEquals(mappedParcel.getRecipient().getCity(), parcelEntity.getRecipient().getCity());
+        assertEquals(mappedParcel.getSender().getStreet(), parcelEntity.getSender().getStreet());
+    }
+
+    @Test
+    void toParcelInfoDto() {
+        ParcelEntity parcelEntity = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
+                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(visitedHops)
+                .futureHops(futuredHops)
+                .build();
+
+        //DTO generated by ParcelMapper
+        NewParcelInfo mappedParcelInfoDto = parcelMapper.toParcelInfoDto(parcelEntity);
+
+        assertEquals(mappedParcelInfoDto.getTrackingId(), parcelEntity.getTrackingId());
+    }
+
+    @Test
+    void toTrackingInfoDto() {
+        ParcelEntity parcelEntity = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
+                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(visitedHops)
+                .futureHops(futuredHops)
+                .build();
+
+        //DTO generated by ParcelMapper
+        TrackingInformation trackingInformation = parcelMapper.toTrackingInfoDto(parcelEntity);
+
+        assertEquals(trackingInformation.getState(), parcelEntity.getDeliveryStatus());
+        assertEquals(trackingInformation.getFutureHops(), hopArrivals);
+        assertEquals(trackingInformation.getVisitedHops(), hopArrivals);
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_4.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_4.xml
new file mode 100644
--- /dev/null	(date 1679849549935)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_7_4.xml	(date 1679849549935)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-logging:2.7.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.7.4/spring-boot-starter-logging-2.7.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.7.4/spring-boot-starter-logging-2.7.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.7.4/spring-boot-starter-logging-2.7.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/persistence/repositories/ParcelRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/persistence/repositories/ParcelRepositoryTest.java b/src/test/java/at/fhtw/swen3/persistence/repositories/ParcelRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1679517625473)
+++ b/src/test/java/at/fhtw/swen3/persistence/repositories/ParcelRepositoryTest.java	(date 1679517625473)
@@ -0,0 +1,51 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import org.junit.jupiter.api.Test;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+
+import javax.transaction.Transactional;
+import java.util.Arrays;
+import java.util.List;
+
+@SpringBootTest
+@Transactional
+public class ParcelRepositoryTest {
+
+    @Autowired
+    private ParcelRepository parcelRepository;
+
+
+
+    private @Mock HopArrivalEntity hopArrival;
+    private final List<HopArrivalEntity> visitedHops = Arrays.asList(hopArrival, hopArrival, hopArrival);
+    private final List<HopArrivalEntity> futuredHops = Arrays.asList(hopArrival, hopArrival, hopArrival);
+
+
+    @Test
+    public void testRecipientToParcel() {
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+        RecipientEntity sender = RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build();
+
+        ParcelEntity parcel = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(recipient)
+                .sender(sender)
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(visitedHops)
+                .futureHops(futuredHops)
+                .build();
+        parcelRepository.save(parcel);
+
+        parcel.setSender(sender);
+        parcel.setSender(recipient);
+
+        parcelRepository.findAll().forEach(System.out::println);
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_aop_2_7_4.xml	(date 1679849549910)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-aop:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-aop:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-aop/2.7.0/spring-boot-starter-aop-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-aop/2.7.4/spring-boot-starter-aop-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-aop/2.7.0/spring-boot-starter-aop-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-aop/2.7.4/spring-boot-starter-aop-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-aop/2.7.0/spring-boot-starter-aop-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-aop/2.7.4/spring-boot-starter-aop-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/main/main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/java\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.annotation:jakarta.annotation-api:1.3.5\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.validation:jakarta.validation-api:2.0.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openapitools:jackson-databind-nullable:0.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.swagger.core.v3:swagger-annotations:2.2.0\" level=\"project\" />\r\n    <orderEntry type=\"module-library\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.20/lombok-1.18.20.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.data:spring-data-commons:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.63\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.xmlunit:xmlunit-core:2.9.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.persistence:jakarta.persistence-api:2.2.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mapstruct:mapstruct-processor:1.5.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.mapstruct:mapstruct:1.5.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-context:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-web:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-autoconfigure:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot:2.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-databind:2.13.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-beans:5.3.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.swagger.core.v3:swagger-models:2.2.0\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/main.iml b/src/main/main.iml
--- a/src/main/main.iml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/main.iml	(date 1679849970773)
@@ -34,5 +34,10 @@
     <orderEntry type="library" name="Maven: com.fasterxml.jackson.core:jackson-databind:2.13.3" level="project" />
     <orderEntry type="library" name="Maven: org.springframework:spring-beans:5.3.20" level="project" />
     <orderEntry type="library" name="Maven: io.swagger.core.v3:swagger-models:2.2.0" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework.data:spring-data-jpa:2.7.0" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-tx:5.3.20" level="project" />
+    <orderEntry type="library" name="Maven: org.apache.commons:commons-lang3:3.12.0" level="project" />
+    <orderEntry type="library" name="Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1" level="project" />
+    <orderEntry type="module" module-name="springbootInWindows" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_jdbc_2_7_4.xml	(date 1679849549918)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-test:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-jdbc:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.7.0/spring-boot-starter-test-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-jdbc/2.7.4/spring-boot-starter-jdbc-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.7.0/spring-boot-starter-test-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-jdbc/2.7.4/spring-boot-starter-jdbc-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.7.0/spring-boot-starter-test-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-jdbc/2.7.4/spring-boot-starter-jdbc-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_4.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_4.xml
new file mode 100644
--- /dev/null	(date 1679849549960)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_validation_2_7_4.xml	(date 1679849549960)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-validation:2.7.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-validation/2.7.4/spring-boot-starter-validation-2.7.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-validation/2.7.4/spring-boot-starter-validation-2.7.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-validation/2.7.4/spring-boot-starter-validation-2.7.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/dto/ParcelValidatorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/dto/ParcelValidatorTest.java b/src/test/java/at/fhtw/swen3/services/dto/ParcelValidatorTest.java
new file mode 100644
--- /dev/null	(date 1679517625477)
+++ b/src/test/java/at/fhtw/swen3/services/dto/ParcelValidatorTest.java	(date 1679517625477)
@@ -0,0 +1,45 @@
+package at.fhtw.swen3.services.dto;
+
+import at.fhtw.swen3.services.validation.Validator;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+
+import javax.validation.ConstraintViolationException;
+
+@SpringBootTest
+public class ParcelValidatorTest {
+    @Autowired
+    Validator validator;
+
+    private @Mock
+    Recipient recipient;
+    private @Mock
+    Recipient senderDto;
+
+    @Test
+    void validateParcelThrow(){
+        Parcel parcel = Parcel.builder()
+                .weight(0.0f)
+                .recipient(recipient)
+                .sender(senderDto)
+                .build();
+
+        Assertions.assertThrows(ConstraintViolationException.class, () -> {
+            validator.validate(parcel);
+        });
+    }
+
+    @Test
+    void validateParcelNotThrow(){
+        Parcel parcel = Parcel.builder()
+                .weight(0.6f)
+                .recipient(Recipient.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
+                .sender(Recipient.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
+                .build();
+
+        Assertions.assertDoesNotThrow(() -> validator.validate(parcel));
+    }
+}
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_web_2_7_4.xml	(date 1679849549967)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-web:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-web:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-web/2.7.0/spring-boot-starter-web-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-web/2.7.4/spring-boot-starter-web-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-web/2.7.0/spring-boot-starter-web-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-web/2.7.4/spring-boot-starter-web-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-web/2.7.0/spring-boot-starter-web-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-web/2.7.4/spring-boot-starter-web-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_json_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_7_4.xml	(date 1679849549944)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-starter-json:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-test:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-json/2.7.0/spring-boot-starter-json-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.7.4/spring-boot-starter-test-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-json/2.7.0/spring-boot-starter-json-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.7.4/spring-boot-starter-test-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-json/2.7.0/spring-boot-starter-json-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.7.4/spring-boot-starter-test-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/ParcelServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/ParcelServiceImplTest.java b/src/test/java/at/fhtw/swen3/services/ParcelServiceImplTest.java
new file mode 100644
--- /dev/null	(date 1679517625476)
+++ b/src/test/java/at/fhtw/swen3/services/ParcelServiceImplTest.java	(date 1679517625476)
@@ -0,0 +1,114 @@
+package at.fhtw.swen3.services;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.persistence.repositories.ParcelRepository;
+import at.fhtw.swen3.services.dto.NewParcelInfo;
+import at.fhtw.swen3.services.dto.Parcel;
+import at.fhtw.swen3.services.dto.Recipient;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import at.fhtw.swen3.services.mapper.ParcelMapper;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.sql.SQLException;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+@SpringBootTest
+@Transactional
+@Slf4j
+class ParcelServiceImplTest {
+    @Autowired
+    private ParcelService parcelService;
+    @Autowired
+    private ParcelRepository parcelRepository;
+    @Autowired
+    private ParcelMapper parcelMapper;
+
+    private ParcelEntity parcelEntity;
+    private Parcel parcel;
+
+    @BeforeEach
+    public void setup(){
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+        RecipientEntity sender = RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build();
+
+        final List<HopArrivalEntity> fakeHops = Arrays.asList(null, null, null);
+
+        parcelEntity = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(recipient)
+                .sender(sender)
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(fakeHops)
+                .futureHops(fakeHops)
+                .build();
+
+        parcel = Parcel.builder()
+                .weight(0.6f)
+                .recipient(Recipient.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
+                .sender(Recipient.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
+                .build();
+    }
+
+    @Test
+    void saveNewParcel()  {
+        NewParcelInfo savedParcelInfo = parcelService.saveNewParcel(parcel);
+        ParcelEntity savedParcelEntity = null;
+        try {
+            savedParcelEntity = parcelRepository.findByTrackingId(savedParcelInfo.getTrackingId());
+        } catch (SQLException e) {
+            log.error(e.getMessage());
+        }
+
+        assert savedParcelEntity != null;
+        assertThat(savedParcelInfo.getTrackingId()).isEqualTo(savedParcelEntity.getTrackingId());
+        assertThat(parcelMapper.toParcelDto(savedParcelEntity)).isEqualTo(parcel);
+    }
+
+    @Test
+    void trackParcel() {
+        parcelRepository.save(parcelEntity);
+
+        TrackingInformation trackedParcel = null;
+        try {
+            trackedParcel = parcelService.trackParcel(parcelEntity.getTrackingId());
+        } catch (SQLException e) {
+            log.warn(e.getMessage());
+        }
+
+        assertThat(trackedParcel).isEqualTo(parcelMapper.toTrackingInfoDto(parcelEntity));
+    }
+
+    @Test
+    void saveExistingParcelTrackingIdExists() {
+        parcelRepository.save(parcelEntity);
+        try {
+            ParcelEntity parcelCheck = parcelRepository.findByTrackingId(parcelEntity.getTrackingId());
+            log.info(parcelCheck.getTrackingId());
+        } catch (SQLException e) {
+            log.error(e.getMessage());
+        }
+
+        ResponseEntity<NewParcelInfo> response = null;
+        try {
+            response = parcelService.saveExistingParcel(parcelEntity.getTrackingId(), parcel);
+        } catch (SQLException e) {
+            log.error(e.getMessage());
+        }
+
+        assertThat(response).isEqualTo(new ResponseEntity<>(null, HttpStatus.CONFLICT));
+    }
+
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_4.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_4.xml
new file mode 100644
--- /dev/null	(date 1679849549952)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_tomcat_2_7_4.xml	(date 1679849549952)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-tomcat:2.7.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-tomcat/2.7.4/spring-boot-starter-tomcat-2.7.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-tomcat/2.7.4/spring-boot-starter-tomcat-2.7.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-tomcat/2.7.4/spring-boot-starter-tomcat-2.7.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepositoryTest.java b/src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1679848414585)
+++ b/src/test/java/at/fhtw/swen3/persistence/repositories/WarehouseNextHopsRepositoryTest.java	(date 1679848414585)
@@ -0,0 +1,85 @@
+package at.fhtw.swen3.persistence.repositories;
+
+import at.fhtw.swen3.persistence.entities.GeoCoordinateEntity;
+import at.fhtw.swen3.persistence.entities.WarehouseEntity;
+import at.fhtw.swen3.persistence.entities.WarehouseNextHopsEntity;
+import lombok.extern.slf4j.Slf4j;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Arrays;
+import java.util.List;
+@SpringBootTest
+@Transactional
+@Slf4j
+class WarehouseNextHopsRepositoryTest {
+    @Autowired
+    private WarehouseNextHopsRepository warehouseNextHopRepository;
+
+    private @Mock WarehouseNextHopsEntity warehouseNextHop;
+    private final List<WarehouseNextHopsEntity> nextHops = Arrays.asList(warehouseNextHop, warehouseNextHop, warehouseNextHop);
+
+    @Autowired
+    private WarehouseRepository warehouseRepository;
+    private @Mock WarehouseEntity mockedWarehouse;
+    private @Mock GeoCoordinateEntity mockedGeoCoordinate;
+    //private @Mock HopEntity mockedHop;
+
+
+   /* @Test
+    public void should_find_all_warehouse_next_hops() {
+
+        WarehouseEntity warehouse = WarehouseEntity.builder().level(2).nextHops(nextHops).build();
+        WarehouseEntity createdWarehouse = warehouseRepository.save(warehouse);
+
+        WarehouseNextHopsEntity warehouseNextHop1 = WarehouseNextHopsEntity.builder().traveltimeMins(320).hop(mockedHop).warehouse(createdWarehouse).build();
+        warehouseNextHopRepository.save(warehouseNextHop1);
+
+        WarehouseNextHopsEntity warehouseNextHop2 = WarehouseNextHopsEntity.builder().traveltimeMins(60).hop(mockedHop).warehouse(createdWarehouse).build();
+        warehouseNextHopRepository.save(warehouseNextHop2);
+
+        WarehouseNextHopsEntity warehouseNextHop3 = WarehouseNextHopsEntity.builder().traveltimeMins(193).hop(mockedHop).warehouse(createdWarehouse).build();
+        warehouseNextHopRepository.save(warehouseNextHop3);
+
+
+        Iterable<WarehouseNextHopsEntity> nextHops = warehouseNextHopRepository.findAll();
+
+        assertThat(nextHops).hasSize(3).contains(warehouseNextHop1, warehouseNextHop2, warehouseNextHop3);
+    }*/
+
+    /*@Test
+    public void should_update_warehouse_next_hop_by_id() {
+        //GeoCoordinateEntity geoCoordinate =GeoCoordinateEntity.builder().lat(3493582346d).lon(345d).build();
+        WarehouseEntity mockedHop = WarehouseEntity.builder()
+                //attributes from superclass hop:
+                .hopType("warehouse")
+                .code("ABCD12")
+                .description("test description")
+                .processingDelayMins(55)
+                .locationName("Wien")
+                .locationCoordinates(mockedGeoCoordinate)
+                .level(2).nextHops(nextHops).build();   //from warehouse itself
+
+        WarehouseNextHopsEntity warehouseNextHop1 = WarehouseNextHopsEntity.builder().traveltimeMins(320).hop(mockedHop).build();
+        warehouseNextHopRepository.save(warehouseNextHop1);
+
+        WarehouseNextHopsEntity warehouseNextHop2 = WarehouseNextHopsEntity.builder().traveltimeMins(60).hop(mockedHop).build();
+        warehouseNextHopRepository.save(warehouseNextHop2);
+
+        WarehouseNextHopsEntity updatedWarehouseNextHop = WarehouseNextHopsEntity.builder().traveltimeMins(77).hop(mockedHop).build();
+        warehouseNextHopRepository.save(updatedWarehouseNextHop);
+
+
+        WarehouseNextHopsEntity warehouseNextHop = warehouseNextHopRepository.findById(warehouseNextHop2.getId()).get();
+        warehouseNextHop.setTraveltimeMins(updatedWarehouseNextHop.getTraveltimeMins());;
+        warehouseNextHopRepository.save(warehouseNextHop);
+
+        WarehouseNextHopsEntity checkWarehouseNextHop = warehouseNextHopRepository.findById(warehouseNextHop2.getId()).get();
+
+        assertThat(checkWarehouseNextHop.getId()).isEqualTo(warehouseNextHop2.getId());
+        assertThat(checkWarehouseNextHop.getTraveltimeMins()).isEqualTo(updatedWarehouseNextHop.getTraveltimeMins());
+    }*/
+
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_data_spring_data_jpa_2_7_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_data_spring_data_jpa_2_7_3.xml b/.idea/libraries/Maven__org_springframework_data_spring_data_jpa_2_7_3.xml
new file mode 100644
--- /dev/null	(date 1679849549991)
+++ b/.idea/libraries/Maven__org_springframework_data_spring_data_jpa_2_7_3.xml	(date 1679849549991)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.data:spring-data-jpa:2.7.3">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/data/spring-data-jpa/2.7.3/spring-data-jpa-2.7.3.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/data/spring-data-jpa/2.7.3/spring-data-jpa-2.7.3-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/data/spring-data-jpa/2.7.3/spring-data-jpa-2.7.3-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/controller/rest/ParcelApiControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/controller/rest/ParcelApiControllerTest.java b/src/test/java/at/fhtw/swen3/controller/rest/ParcelApiControllerTest.java
new file mode 100644
--- /dev/null	(date 1679849014259)
+++ b/src/test/java/at/fhtw/swen3/controller/rest/ParcelApiControllerTest.java	(date 1679849014259)
@@ -0,0 +1,106 @@
+package at.fhtw.swen3.controller.rest;
+
+import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
+import at.fhtw.swen3.persistence.entities.ParcelEntity;
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.persistence.repositories.ParcelRepository;
+import at.fhtw.swen3.services.dto.NewParcelInfo;
+import at.fhtw.swen3.services.dto.Parcel;
+import at.fhtw.swen3.services.dto.Recipient;
+import at.fhtw.swen3.services.dto.TrackingInformation;
+import at.fhtw.swen3.services.impl.controller.rest.ParcelApiController;
+import at.fhtw.swen3.services.mapper.ParcelMapper;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.sql.SQLException;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+
+@SpringBootTest
+@Transactional
+@Slf4j
+class ParcelApiControllerTest {
+    @Autowired
+    ParcelApiController parcelApiController;
+    @Autowired
+    ParcelRepository parcelRepository;
+    @Autowired
+    ParcelMapper parcelMapper;
+
+    private ParcelEntity parcelEntity;
+    private Parcel parcel;
+
+    @BeforeEach
+    void setUp() {
+        RecipientEntity recipient = RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build();
+        RecipientEntity sender = RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build();
+
+        final List<HopArrivalEntity> fakeHops = Arrays.asList(null, null, null);
+
+        parcelEntity = ParcelEntity.builder()
+                .weight(0.6f)
+                .recipient(recipient)
+                .sender(sender)
+                .trackingId("PYJRB4HZ6")
+                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
+                .visitedHops(fakeHops)
+                .futureHops(fakeHops)
+                .build();
+
+        parcel = Parcel.builder()
+                .weight(0.6f)
+                .recipient(Recipient.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
+                .sender(Recipient.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
+                .build();
+    }
+
+    @Test
+    void reportParcelDelivery() {
+        parcelApiController.transitionParcel(parcelEntity.getTrackingId(),parcelMapper.toParcelDto(parcelEntity));
+        ResponseEntity<Void> delivery = parcelApiController.reportParcelDelivery(parcelEntity.getTrackingId());
+        assertEquals(new ResponseEntity<>( HttpStatus.CREATED), delivery);
+        try {
+            assertEquals(parcelRepository.findByTrackingId(parcelEntity.getTrackingId()).getDeliveryStatus(),
+                    TrackingInformation.StateEnum.DELIVERED);
+        } catch (SQLException e) {
+            log.error(e.getMessage());
+        }
+    }
+
+
+    @Test
+    void submitParcel() {
+        ResponseEntity<NewParcelInfo> testResponse = parcelApiController.submitParcel(parcel);
+        //System.out.println(testResponse);
+        assertEquals(testResponse, new ResponseEntity<NewParcelInfo>(NewParcelInfo.builder().trackingId(testResponse.getBody().getTrackingId()).build(), HttpStatus.CREATED));
+
+    }
+
+    @Test
+    void trackParcel() {
+        ParcelEntity parcelForTracking = parcelRepository.save(parcelEntity);
+        ResponseEntity<TrackingInformation> trackParcel = parcelApiController.trackParcel(parcelForTracking.getTrackingId());
+        //System.out.println(trackParcel);
+        assertEquals(trackParcel, new ResponseEntity<TrackingInformation>(parcelMapper.toTrackingInfoDto(parcelEntity),HttpStatus.OK));
+
+    }
+
+    @Test
+    void transitionParcel() {
+        ResponseEntity<NewParcelInfo> transitionParcel = parcelApiController.transitionParcel(parcelEntity.getTrackingId(),parcelMapper.toParcelDto(parcelEntity));
+        //System.out.println(transitionParcel);
+        assertEquals(transitionParcel, new ResponseEntity<NewParcelInfo>(parcelMapper.toParcelInfoDto(parcelEntity),HttpStatus.OK));
+
+    }
+
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_orm_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_orm_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_aop_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_orm_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_aop_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_orm_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_aop_5_3_23.xml	(date 1679849549999)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-orm:5.3.20">
+  <library name="Maven: org.springframework:spring-aop:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-orm/5.3.20/spring-orm-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.23/spring-aop-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-orm/5.3.20/spring-orm-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.23/spring-aop-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-orm/5.3.20/spring-orm-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.23/spring-aop-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/mapper/RecipientMapperTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/mapper/RecipientMapperTest.java b/src/test/java/at/fhtw/swen3/services/mapper/RecipientMapperTest.java
new file mode 100644
--- /dev/null	(date 1679848414556)
+++ b/src/test/java/at/fhtw/swen3/services/mapper/RecipientMapperTest.java	(date 1679848414556)
@@ -0,0 +1,47 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.RecipientEntity;
+import at.fhtw.swen3.services.dto.Recipient;
+import org.testng.annotations.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class RecipientMapperTest {
+    RecipientMapper recipientMapper = new RecipientMapper();
+
+    @Test
+    void mapToTarget() {
+        RecipientEntity recipientEntity = RecipientEntity.builder()
+                .name("mapToTarget test name")
+                .street("Hauptstraße 12/12/12")
+                .postalCode("A-3500")
+                .city("Krems an der Donau")
+                .country("Austria")
+                .build();
+        Recipient mappedRecipient = recipientMapper.mapToTarget(recipientEntity);
+
+        assertEquals(mappedRecipient.getName(), recipientEntity.getName());
+        assertEquals(mappedRecipient.getStreet(), recipientEntity.getStreet());
+        assertEquals(mappedRecipient.getPostalCode(), recipientEntity.getPostalCode());
+        assertEquals(mappedRecipient.getCity(), recipientEntity.getCity());
+        assertEquals(mappedRecipient.getCountry(), recipientEntity.getCountry());
+    }
+
+    @Test
+    void mapToSource() {
+        Recipient recipient = Recipient.builder()
+                .name("mapToSource test name")
+                .street("Handelskai 300a")
+                .postalCode("A-1020")
+                .city("Wien")
+                .country("Austria")
+                .build();
+        RecipientEntity mappedRecipientEntity = recipientMapper.mapToSource(recipient);
+
+        assertEquals(mappedRecipientEntity.getName(), recipient.getName());
+        assertEquals(mappedRecipientEntity.getStreet(), recipient.getStreet());
+        assertEquals(mappedRecipientEntity.getPostalCode(), recipient.getPostalCode());
+        assertEquals(mappedRecipientEntity.getCity(), recipient.getCity());
+        assertEquals(mappedRecipientEntity.getCountry(), recipient.getCountry());
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_0.xml b/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_4.xml
rename from .idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_0.xml
rename to .idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_4.xml
--- a/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_0.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_7_4.xml	(date 1679849549975)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.7.0">
+  <library name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.7.4">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.7.0/spring-boot-test-autoconfigure-2.7.0.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.7.4/spring-boot-test-autoconfigure-2.7.4.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.7.0/spring-boot-test-autoconfigure-2.7.0-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.7.4/spring-boot-test-autoconfigure-2.7.4-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.7.0/spring-boot-test-autoconfigure-2.7.0-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.7.4/spring-boot-test-autoconfigure-2.7.4-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_data_spring_data_commons_2_7_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_data_spring_data_commons_2_7_3.xml b/.idea/libraries/Maven__org_springframework_data_spring_data_commons_2_7_3.xml
new file mode 100644
--- /dev/null	(date 1679849549983)
+++ b/.idea/libraries/Maven__org_springframework_data_spring_data_commons_2_7_3.xml	(date 1679849549983)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.data:spring-data-commons:2.7.3">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/data/spring-data-commons/2.7.3/spring-data-commons-2.7.3.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/data/spring-data-commons/2.7.3/spring-data-commons-2.7.3-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/data/spring-data-commons/2.7.3/spring-data-commons-2.7.3-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/at/fhtw/swen3/services/dto/HopArrival.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.fhtw.swen3.services.dto;\r\n\r\nimport java.util.Objects;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeName;\r\nimport java.time.OffsetDateTime;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\n\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.*;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\n\r\n\r\nimport javax.annotation.Generated;\r\n\r\n/**\r\n * HopArrival\r\n */\r\n\r\n@JsonTypeName(\"hopArrival\")\r\n@Generated(value = \"org.openapitools.codegen.languages.SpringCodegen\", date = \"2022-09-23T12:35:41.388911Z[Etc/UTC]\")\r\npublic class HopArrival {\r\n\r\n  @JsonProperty(\"code\")\r\n  private String code;\r\n\r\n  @JsonProperty(\"description\")\r\n  private String description;\r\n\r\n  @JsonProperty(\"dateTime\")\r\n  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)\r\n  private OffsetDateTime dateTime;\r\n\r\n  public HopArrival code(String code) {\r\n    this.code = code;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unique CODE of the hop.\r\n   * @return code\r\n  */\r\n  @NotNull @Pattern(regexp = \"^[A-Z]{4}\\\\d{1,4}$\") \r\n  @Schema(name = \"code\", description = \"Unique CODE of the hop.\", required = true)\r\n  public String getCode() {\r\n    return code;\r\n  }\r\n\r\n  public void setCode(String code) {\r\n    this.code = code;\r\n  }\r\n\r\n  public HopArrival description(String description) {\r\n    this.description = description;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Description of the hop.\r\n   * @return description\r\n  */\r\n  @NotNull \r\n  @Schema(name = \"description\", description = \"Description of the hop.\", required = true)\r\n  public String getDescription() {\r\n    return description;\r\n  }\r\n\r\n  public void setDescription(String description) {\r\n    this.description = description;\r\n  }\r\n\r\n  public HopArrival dateTime(OffsetDateTime dateTime) {\r\n    this.dateTime = dateTime;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The date/time the parcel arrived at the hop.\r\n   * @return dateTime\r\n  */\r\n  @NotNull @Valid \r\n  @Schema(name = \"dateTime\", description = \"The date/time the parcel arrived at the hop.\", required = true)\r\n  public OffsetDateTime getDateTime() {\r\n    return dateTime;\r\n  }\r\n\r\n  public void setDateTime(OffsetDateTime dateTime) {\r\n    this.dateTime = dateTime;\r\n  }\r\n\r\n  @Override\r\n  public boolean equals(Object o) {\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n      return false;\r\n    }\r\n    HopArrival hopArrival = (HopArrival) o;\r\n    return Objects.equals(this.code, hopArrival.code) &&\r\n        Objects.equals(this.description, hopArrival.description) &&\r\n        Objects.equals(this.dateTime, hopArrival.dateTime);\r\n  }\r\n\r\n  @Override\r\n  public int hashCode() {\r\n    return Objects.hash(code, description, dateTime);\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class HopArrival {\\n\");\r\n    sb.append(\"    code: \").append(toIndentedString(code)).append(\"\\n\");\r\n    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");\r\n    sb.append(\"    dateTime: \").append(toIndentedString(dateTime)).append(\"\\n\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n  }\r\n\r\n  /**\r\n   * Convert the given object to string with each line indented by 4 spaces\r\n   * (except the first line).\r\n   */\r\n  private String toIndentedString(Object o) {\r\n    if (o == null) {\r\n      return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/fhtw/swen3/services/dto/HopArrival.java b/src/main/java/at/fhtw/swen3/services/dto/HopArrival.java
--- a/src/main/java/at/fhtw/swen3/services/dto/HopArrival.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/main/java/at/fhtw/swen3/services/dto/HopArrival.java	(date 1679847965144)
@@ -4,6 +4,8 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import java.time.OffsetDateTime;
+
+import lombok.Builder;
 import org.springframework.format.annotation.DateTimeFormat;
 
 import javax.validation.Valid;
@@ -18,13 +20,16 @@
  */
 
 @JsonTypeName("hopArrival")
-@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-23T12:35:41.388911Z[Etc/UTC]")
+@Builder
+@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T13:39:57.022856Z[Etc/UTC]")
 public class HopArrival {
 
   @JsonProperty("code")
+  @Pattern(regexp = " ^[A-Z]{4}\\d{1,4}$", message = "must match postal code regex")
   private String code;
 
   @JsonProperty("description")
+  @Pattern(regexp = " ^[A-Za-z0-9\\s\\-]$", message = "text")
   private String description;
 
   @JsonProperty("dateTime")
@@ -39,8 +44,8 @@
   /**
    * Unique CODE of the hop.
    * @return code
-  */
-  @NotNull @Pattern(regexp = "^[A-Z]{4}\\d{1,4}$") 
+   */
+  @NotNull @Pattern(regexp = "^[A-Z]{4}\\d{1,4}$")
   @Schema(name = "code", description = "Unique CODE of the hop.", required = true)
   public String getCode() {
     return code;
@@ -58,8 +63,8 @@
   /**
    * Description of the hop.
    * @return description
-  */
-  @NotNull 
+   */
+  @NotNull
   @Schema(name = "description", description = "Description of the hop.", required = true)
   public String getDescription() {
     return description;
@@ -77,8 +82,8 @@
   /**
    * The date/time the parcel arrived at the hop.
    * @return dateTime
-  */
-  @NotNull @Valid 
+   */
+  @NotNull @Valid
   @Schema(name = "dateTime", description = "The date/time the parcel arrived at the hop.", required = true)
   public OffsetDateTime getDateTime() {
     return dateTime;
@@ -98,8 +103,8 @@
     }
     HopArrival hopArrival = (HopArrival) o;
     return Objects.equals(this.code, hopArrival.code) &&
-        Objects.equals(this.description, hopArrival.description) &&
-        Objects.equals(this.dateTime, hopArrival.dateTime);
+            Objects.equals(this.description, hopArrival.description) &&
+            Objects.equals(this.dateTime, hopArrival.dateTime);
   }
 
   @Override
Index: .idea/libraries/Maven__org_springframework_spring_context_5_3_23.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_context_5_3_23.xml b/.idea/libraries/Maven__org_springframework_spring_context_5_3_23.xml
new file mode 100644
--- /dev/null	(date 1679849550022)
+++ b/.idea/libraries/Maven__org_springframework_spring_context_5_3_23.xml	(date 1679849550022)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-context:5.3.23">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-context/5.3.23/spring-context-5.3.23.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-context/5.3.23/spring-context-5.3.23-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-context/5.3.23/spring-context-5.3.23-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_jdbc_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_jdbc_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_core_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_jdbc_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_core_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_jdbc_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_core_5_3_23.xml	(date 1679849550031)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-jdbc:5.3.20">
+  <library name="Maven: org.springframework:spring-core:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jdbc/5.3.20/spring-jdbc-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.23/spring-core-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jdbc/5.3.20/spring-jdbc-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.23/spring-core-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jdbc/5.3.20/spring-jdbc-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.23/spring-core-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/dto/RecipientTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/dto/RecipientTest.java b/src/test/java/at/fhtw/swen3/services/dto/RecipientTest.java
new file mode 100644
--- /dev/null	(date 1679517625477)
+++ b/src/test/java/at/fhtw/swen3/services/dto/RecipientTest.java	(date 1679517625477)
@@ -0,0 +1,43 @@
+package at.fhtw.swen3.services.dto;
+
+import at.fhtw.swen3.services.validation.Validator;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+
+import javax.validation.ConstraintViolationException;
+
+@SpringBootTest
+public class RecipientTest {
+    @Autowired
+    Validator validator;
+
+    @Test
+    void validateRecipientThrow() {
+        Recipient recipient = Recipient.builder()
+                .name("test name")
+                .street("Arnold Fink Str. 13")
+                .postalCode("A-3667830")
+                .city("Waidhofen an der Thaya")
+                .country("Austria")
+                .build();
+
+        Assertions.assertThrows(ConstraintViolationException.class, () -> {
+            validator.validate(recipient);
+        });
+    }
+
+    @Test
+    void validateRecipientNotThrow() {
+        Recipient recipient = Recipient.builder()
+                .name("test name")
+                .street("Landstraße 27a")
+                .postalCode("A-3500")
+                .city("Krems an der Donau")
+                .country("Austria")
+                .build();
+
+        Assertions.assertDoesNotThrow(() -> validator.validate(recipient));
+    }
+}
Index: .idea/libraries/Maven__org_springframework_spring_aspects_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_aspects_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_aspects_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_aspects_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_aspects_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_aspects_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_aspects_5_3_23.xml	(date 1679849550007)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-aspects:5.3.20">
+  <library name="Maven: org.springframework:spring-aspects:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aspects/5.3.20/spring-aspects-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aspects/5.3.23/spring-aspects-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aspects/5.3.20/spring-aspects-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aspects/5.3.23/spring-aspects-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aspects/5.3.20/spring-aspects-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aspects/5.3.23/spring-aspects-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/services/mapper/HopMapperTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/services/mapper/HopMapperTest.java b/src/test/java/at/fhtw/swen3/services/mapper/HopMapperTest.java
new file mode 100644
--- /dev/null	(date 1679517625478)
+++ b/src/test/java/at/fhtw/swen3/services/mapper/HopMapperTest.java	(date 1679517625478)
@@ -0,0 +1,87 @@
+package at.fhtw.swen3.services.mapper;
+
+import at.fhtw.swen3.persistence.entities.WarehouseEntity;
+import at.fhtw.swen3.services.dto.GeoCoordinate;
+import at.fhtw.swen3.services.dto.Truck;
+import at.fhtw.swen3.services.dto.Warehouse;
+import at.fhtw.swen3.services.dto.WarehouseNextHops;
+import com.mapbox.geojson.Point;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+@SpringBootTest
+@Slf4j
+class HopMapperTest {
+
+    @Autowired
+    private HopMapper hopMapper;
+
+    @Test
+    void mapToTarget() {
+    }
+
+    @Test
+    void mapToSource() {
+        GeoCoordinate nextHopGC = GeoCoordinate.builder().lat(7582346d).lon(285d).build();
+        Point point1 = Point.fromLngLat(nextHopGC.getLon(), nextHopGC.getLat());
+
+        Truck hop1 = new Truck(
+                "truck",
+                "ABCD12",
+                "next hop 1 of warehouse",
+                200,
+                "Wien",
+                nextHopGC,
+                String.valueOf(point1),
+                "W-747200");
+
+        WarehouseNextHops nextHop1 = WarehouseNextHops.builder()
+                .hop(hop1)
+                .traveltimeMins(400)
+                .build();
+
+        Truck hop2 = new Truck(
+                "truck",
+                "EFGH34",
+                "next hop 2 of warehouse",
+                56,
+                "Tulln",
+                nextHopGC,
+                String.valueOf(point1),
+                "TU-20056");
+
+        WarehouseNextHops nextHop2 = WarehouseNextHops.builder()
+                .hop(hop2)
+                .traveltimeMins(120)
+                .build();
+
+        List<WarehouseNextHops> nextHops = Arrays.asList(nextHop1, nextHop2);
+
+        GeoCoordinate warehouseGC = GeoCoordinate.builder().lat(3493582346d).lon(345d).build();
+
+        Warehouse warehouse = new Warehouse(
+                "warehouse",
+                "ABCD12",
+                "test description",
+                55,
+                "Wien",
+                warehouseGC,
+                2,
+                nextHops);
+
+        WarehouseEntity entity = (WarehouseEntity) hopMapper.mapToSource(warehouse);
+
+        log.warn(entity.toString());
+    }
+
+    @Test
+    void testMapToSource() {
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_beans_5_3_23.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_beans_5_3_23.xml b/.idea/libraries/Maven__org_springframework_spring_beans_5_3_23.xml
new file mode 100644
--- /dev/null	(date 1679849550014)
+++ b/.idea/libraries/Maven__org_springframework_spring_beans_5_3_23.xml	(date 1679849550014)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-beans:5.3.23">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-beans/5.3.23/spring-beans-5.3.23.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-beans/5.3.23/spring-beans-5.3.23-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-beans/5.3.23/spring-beans-5.3.23-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_core_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_core_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_jdbc_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_core_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_jdbc_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_core_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_jdbc_5_3_23.xml	(date 1679849550056)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-core:5.3.20">
+  <library name="Maven: org.springframework:spring-jdbc:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.20/spring-core-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jdbc/5.3.23/spring-jdbc-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.20/spring-core-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jdbc/5.3.23/spring-jdbc-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.20/spring-core-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jdbc/5.3.23/spring-jdbc-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/controller/rest/WarehouseApiControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/controller/rest/WarehouseApiControllerTest.java b/src/test/java/at/fhtw/swen3/controller/rest/WarehouseApiControllerTest.java
new file mode 100644
--- /dev/null	(date 1679849904264)
+++ b/src/test/java/at/fhtw/swen3/controller/rest/WarehouseApiControllerTest.java	(date 1679849904264)
@@ -0,0 +1,101 @@
+package at.fhtw.swen3.controller.rest;
+
+import at.fhtw.swen3.persistence.repositories.WarehouseNextHopsRepository;
+import at.fhtw.swen3.services.dto.*;
+import at.fhtw.swen3.services.impl.controller.rest.WarehouseApiController;
+import com.mapbox.geojson.Point;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+@SpringBootTest
+@Slf4j
+@Transactional
+class WarehouseApiControllerTest {
+
+    @Autowired
+    WarehouseApiController warehouseApiController;
+
+    @Autowired
+    WarehouseNextHopsRepository warehouseNextHopsRepository;
+
+
+    @Test
+    void getRequest() {
+    }
+
+    @Test
+    void exportWarehouses() {
+        ResponseEntity<Warehouse> warehouseHierarchy = warehouseApiController.exportWarehouses();
+        log.info(String.valueOf(warehouseHierarchy));
+    }
+
+    @Test
+    void getWarehouse() {
+        ResponseEntity<Hop> warehouse = warehouseApiController.getWarehouse("abdsa");
+        assertEquals(warehouse, new ResponseEntity<>(null, HttpStatus.NOT_FOUND));
+    }
+
+
+    @Test
+    void importWarehouses() {
+        GeoCoordinate nextHopGC = GeoCoordinate.builder().lat(7582346d).lon(285d).build();
+        Point point1 = Point.fromLngLat(nextHopGC.getLon(), nextHopGC.getLat());
+
+        Truck hop1 = new Truck(
+                "truck",
+                "ABCD12",
+                "next hop 1 of warehouse",
+                200,
+                "Wien",
+                nextHopGC,
+                String.valueOf(point1),
+                "W-747200");
+
+        WarehouseNextHops nextHop1 = WarehouseNextHops.builder()
+                .hop(hop1)
+                .traveltimeMins(400)
+                .build();
+
+        Truck hop2 = new Truck(
+                "truck",
+                "EFGH34",
+                "next hop 2 of warehouse",
+                56,
+                "Tulln",
+                nextHopGC,
+                String.valueOf(point1),
+                "TU-20056");
+
+        WarehouseNextHops nextHop2 = WarehouseNextHops.builder()
+                .hop(hop2)
+                .traveltimeMins(120)
+                .build();
+
+        List<WarehouseNextHops> nextHops = Arrays.asList(nextHop1, nextHop2);
+
+        GeoCoordinate warehouseGC = GeoCoordinate.builder().lat(3493582346d).lon(345d).build();
+
+        Warehouse warehouse = new Warehouse(
+                "warehouse",
+                "ABCD12",
+                "test description",
+                55,
+                "Wien",
+                warehouseGC,
+                2,
+                nextHops);
+
+        ResponseEntity<Void> importedWarehouse = warehouseApiController.importWarehouses(warehouse);
+        assertEquals(importedWarehouse, new ResponseEntity<>( HttpStatus.OK));
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_aop_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_aop_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_orm_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_aop_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_orm_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_aop_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_orm_5_3_23.xml	(date 1679849550064)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-aop:5.3.20">
+  <library name="Maven: org.springframework:spring-orm:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.20/spring-aop-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-orm/5.3.23/spring-orm-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.20/spring-aop-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-orm/5.3.23/spring-orm-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.20/spring-aop-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-orm/5.3.23/spring-orm-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/org/openapitools/OpenApiGeneratorApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/openapitools/OpenApiGeneratorApplicationTests.java b/src/test/java/at/fhtw/swen3/OpenApiGeneratorApplicationTests.java
rename from src/test/java/org/openapitools/OpenApiGeneratorApplicationTests.java
rename to src/test/java/at/fhtw/swen3/OpenApiGeneratorApplicationTests.java
--- a/src/test/java/org/openapitools/OpenApiGeneratorApplicationTests.java	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/src/test/java/at/fhtw/swen3/OpenApiGeneratorApplicationTests.java	(date 1679517625467)
@@ -1,4 +1,4 @@
-package org.openapitools;
+package at.fhtw.swen3;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
Index: .idea/libraries/Maven__org_springframework_spring_expression_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_expression_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_expression_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_expression_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_expression_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_expression_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_expression_5_3_23.xml	(date 1679849550040)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-expression:5.3.20">
+  <library name="Maven: org.springframework:spring-expression:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.20/spring-expression-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.23/spring-expression-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.20/spring-expression-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.23/spring-expression-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.20/spring-expression-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.23/spring-expression-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
Index: src/test/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxyTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxyTest.java b/src/test/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxyTest.java
new file mode 100644
--- /dev/null	(date 1679848414571)
+++ b/src/test/java/at/fhtw/swen3/gps/service/impl/OpenStreetMapEncodingProxyTest.java	(date 1679848414571)
@@ -0,0 +1,23 @@
+package at.fhtw.swen3.gps.service.impl;
+
+import at.fhtw.swen3.services.dto.GeoCoordinate;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.Test;
+
+import java.io.UnsupportedEncodingException;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+@Slf4j
+class OpenStreetMapEncodingProxyTest {
+    OpenStreetMapEncodingProxy proxy = new OpenStreetMapEncodingProxy();
+
+    @Test
+    void encodeAddressTrue() throws UnsupportedEncodingException {
+        String testAddress = "Engerthstrasse+228";
+        GeoCoordinate geocoordinate = proxy.encodeAddress(testAddress);
+        log.info("test - lat:" + geocoordinate.getLat() + ", lon:" + geocoordinate.getLon());
+        assertEquals(geocoordinate.getLat(), 48.2163914);
+        assertEquals(geocoordinate.getLon(), 16.4141428);
+    }
+}
\ No newline at end of file
Index: .idea/libraries/Maven__org_springframework_spring_jcl_5_3_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_springframework_spring_jcl_5_3_20.xml b/.idea/libraries/Maven__org_springframework_spring_jcl_5_3_23.xml
rename from .idea/libraries/Maven__org_springframework_spring_jcl_5_3_20.xml
rename to .idea/libraries/Maven__org_springframework_spring_jcl_5_3_23.xml
--- a/.idea/libraries/Maven__org_springframework_spring_jcl_5_3_20.xml	(revision 253d0d34e3660a7551627bcbdcc99156c6e660ec)
+++ b/.idea/libraries/Maven__org_springframework_spring_jcl_5_3_23.xml	(date 1679849550048)
@@ -1,13 +1,13 @@
 <component name="libraryTable">
-  <library name="Maven: org.springframework:spring-jcl:5.3.20">
+  <library name="Maven: org.springframework:spring-jcl:5.3.23">
     <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.20/spring-jcl-5.3.20.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.23/spring-jcl-5.3.23.jar!/" />
     </CLASSES>
     <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.20/spring-jcl-5.3.20-javadoc.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.23/spring-jcl-5.3.23-javadoc.jar!/" />
     </JAVADOC>
     <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.20/spring-jcl-5.3.20-sources.jar!/" />
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.23/spring-jcl-5.3.23-sources.jar!/" />
     </SOURCES>
   </library>
 </component>
\ No newline at end of file
